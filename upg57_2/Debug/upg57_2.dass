
./Debug/upg57_2.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f9aa 	bl	2000035c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
    *portOtyper =0x00000000;
2000001a:	4b06      	ldr	r3, [pc, #24]	; (20000034 <init_app+0x24>)
2000001c:	2200      	movs	r2, #0
2000001e:	601a      	str	r2, [r3, #0]
    *Ospeedr    =0x55555555;
20000020:	4b05      	ldr	r3, [pc, #20]	; (20000038 <init_app+0x28>)
20000022:	4a03      	ldr	r2, [pc, #12]	; (20000030 <init_app+0x20>)
20000024:	601a      	str	r2, [r3, #0]
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000034:	40021010 	andmi	r1, r2, r0, lsl r0
20000038:	40021020 	andmi	r1, r2, r0, lsr #32

2000003c <delay_250ns>:

void delay_250ns(void){
2000003c:	b580      	push	{r7, lr}
2000003e:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000040:	4b0c      	ldr	r3, [pc, #48]	; (20000074 <delay_250ns+0x38>)
20000042:	2200      	movs	r2, #0
20000044:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168/4)-1);
20000046:	4b0c      	ldr	r3, [pc, #48]	; (20000078 <delay_250ns+0x3c>)
20000048:	2229      	movs	r2, #41	; 0x29
2000004a:	601a      	str	r2, [r3, #0]
    *STK_VAL  = 0;
2000004c:	4b0b      	ldr	r3, [pc, #44]	; (2000007c <delay_250ns+0x40>)
2000004e:	2200      	movs	r2, #0
20000050:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000052:	4b08      	ldr	r3, [pc, #32]	; (20000074 <delay_250ns+0x38>)
20000054:	2205      	movs	r2, #5
20000056:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000)== 0){}
20000058:	46c0      	nop			; (mov r8, r8)
2000005a:	4b06      	ldr	r3, [pc, #24]	; (20000074 <delay_250ns+0x38>)
2000005c:	681a      	ldr	r2, [r3, #0]
2000005e:	2380      	movs	r3, #128	; 0x80
20000060:	025b      	lsls	r3, r3, #9
20000062:	4013      	ands	r3, r2
20000064:	d0f9      	beq.n	2000005a <delay_250ns+0x1e>
    *STK_CTRL = 0;
20000066:	4b03      	ldr	r3, [pc, #12]	; (20000074 <delay_250ns+0x38>)
20000068:	2200      	movs	r2, #0
2000006a:	601a      	str	r2, [r3, #0]
}
2000006c:	46c0      	nop			; (mov r8, r8)
2000006e:	46bd      	mov	sp, r7
20000070:	bd80      	pop	{r7, pc}
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	e000e010 	and	lr, r0, r0, lsl r0
20000078:	e000e014 	and	lr, r0, r4, lsl r0
2000007c:	e000e018 	and	lr, r0, r8, lsl r0

20000080 <delay_micro>:

void delay_micro(unsigned int us){
20000080:	b580      	push	{r7, lr}
20000082:	b082      	sub	sp, #8
20000084:	af00      	add	r7, sp, #0
20000086:	6078      	str	r0, [r7, #4]
    while(us > 0){
20000088:	e00a      	b.n	200000a0 <delay_micro+0x20>
        delay_250ns();
2000008a:	f7ff ffd7 	bl	2000003c <delay_250ns>
        delay_250ns();
2000008e:	f7ff ffd5 	bl	2000003c <delay_250ns>
        delay_250ns();
20000092:	f7ff ffd3 	bl	2000003c <delay_250ns>
        delay_250ns();
20000096:	f7ff ffd1 	bl	2000003c <delay_250ns>
        us--;
2000009a:	687b      	ldr	r3, [r7, #4]
2000009c:	3b01      	subs	r3, #1
2000009e:	607b      	str	r3, [r7, #4]
    while(us > 0){
200000a0:	687b      	ldr	r3, [r7, #4]
200000a2:	2b00      	cmp	r3, #0
200000a4:	d1f1      	bne.n	2000008a <delay_micro+0xa>
    }
}
200000a6:	46c0      	nop			; (mov r8, r8)
200000a8:	46bd      	mov	sp, r7
200000aa:	b002      	add	sp, #8
200000ac:	bd80      	pop	{r7, pc}

200000ae <delay_milli>:

void delay_milli(unsigned int ms){
200000ae:	b580      	push	{r7, lr}
200000b0:	b082      	sub	sp, #8
200000b2:	af00      	add	r7, sp, #0
200000b4:	6078      	str	r0, [r7, #4]

    while(ms--){
200000b6:	e002      	b.n	200000be <delay_milli+0x10>
        delay_micro(10);
200000b8:	200a      	movs	r0, #10
200000ba:	f7ff ffe1 	bl	20000080 <delay_micro>
    while(ms--){
200000be:	687b      	ldr	r3, [r7, #4]
200000c0:	1e5a      	subs	r2, r3, #1
200000c2:	607a      	str	r2, [r7, #4]
200000c4:	2b00      	cmp	r3, #0
200000c6:	d1f7      	bne.n	200000b8 <delay_milli+0xa>
    }
    
}
200000c8:	46c0      	nop			; (mov r8, r8)
200000ca:	46bd      	mov	sp, r7
200000cc:	b002      	add	sp, #8
200000ce:	bd80      	pop	{r7, pc}

200000d0 <ascii_ctrl_bit_set>:


void ascii_ctrl_bit_set( unsigned char x){
200000d0:	b580      	push	{r7, lr}
200000d2:	b082      	sub	sp, #8
200000d4:	af00      	add	r7, sp, #0
200000d6:	0002      	movs	r2, r0
200000d8:	1dfb      	adds	r3, r7, #7
200000da:	701a      	strb	r2, [r3, #0]
    *portOdrLow |= (B_SELECT | x);
200000dc:	4b07      	ldr	r3, [pc, #28]	; (200000fc <ascii_ctrl_bit_set+0x2c>)
200000de:	781b      	ldrb	r3, [r3, #0]
200000e0:	b2da      	uxtb	r2, r3
200000e2:	1dfb      	adds	r3, r7, #7
200000e4:	781b      	ldrb	r3, [r3, #0]
200000e6:	4313      	orrs	r3, r2
200000e8:	b2db      	uxtb	r3, r3
200000ea:	4a04      	ldr	r2, [pc, #16]	; (200000fc <ascii_ctrl_bit_set+0x2c>)
200000ec:	2104      	movs	r1, #4
200000ee:	430b      	orrs	r3, r1
200000f0:	b2db      	uxtb	r3, r3
200000f2:	7013      	strb	r3, [r2, #0]
}
200000f4:	46c0      	nop			; (mov r8, r8)
200000f6:	46bd      	mov	sp, r7
200000f8:	b002      	add	sp, #8
200000fa:	bd80      	pop	{r7, pc}
200000fc:	40021014 	andmi	r1, r2, r4, lsl r0

20000100 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000100:	b580      	push	{r7, lr}
20000102:	b082      	sub	sp, #8
20000104:	af00      	add	r7, sp, #0
20000106:	0002      	movs	r2, r0
20000108:	1dfb      	adds	r3, r7, #7
2000010a:	701a      	strb	r2, [r3, #0]
    *portOdrLow &= (B_SELECT | ~x);
2000010c:	4b0a      	ldr	r3, [pc, #40]	; (20000138 <ascii_ctrl_bit_clear+0x38>)
2000010e:	781b      	ldrb	r3, [r3, #0]
20000110:	b2db      	uxtb	r3, r3
20000112:	b25b      	sxtb	r3, r3
20000114:	1dfa      	adds	r2, r7, #7
20000116:	7812      	ldrb	r2, [r2, #0]
20000118:	b252      	sxtb	r2, r2
2000011a:	43d2      	mvns	r2, r2
2000011c:	b252      	sxtb	r2, r2
2000011e:	2104      	movs	r1, #4
20000120:	430a      	orrs	r2, r1
20000122:	b252      	sxtb	r2, r2
20000124:	4013      	ands	r3, r2
20000126:	b25a      	sxtb	r2, r3
20000128:	4b03      	ldr	r3, [pc, #12]	; (20000138 <ascii_ctrl_bit_clear+0x38>)
2000012a:	b2d2      	uxtb	r2, r2
2000012c:	701a      	strb	r2, [r3, #0]
}
2000012e:	46c0      	nop			; (mov r8, r8)
20000130:	46bd      	mov	sp, r7
20000132:	b002      	add	sp, #8
20000134:	bd80      	pop	{r7, pc}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	40021014 	andmi	r1, r2, r4, lsl r0

2000013c <ascii_read_controller>:

unsigned char ascii_read_controller( void ){
2000013c:	b580      	push	{r7, lr}
2000013e:	b082      	sub	sp, #8
20000140:	af00      	add	r7, sp, #0
    unsigned char c;
    ascii_ctrl_bit_set( B_E );
20000142:	2040      	movs	r0, #64	; 0x40
20000144:	f7ff ffc4 	bl	200000d0 <ascii_ctrl_bit_set>
    delay_250ns();
20000148:	f7ff ff78 	bl	2000003c <delay_250ns>
    delay_250ns();
2000014c:	f7ff ff76 	bl	2000003c <delay_250ns>
    c = *portIdrHigh;
20000150:	4a06      	ldr	r2, [pc, #24]	; (2000016c <ascii_read_controller+0x30>)
20000152:	1dfb      	adds	r3, r7, #7
20000154:	7812      	ldrb	r2, [r2, #0]
20000156:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear( B_E );
20000158:	2040      	movs	r0, #64	; 0x40
2000015a:	f7ff ffd1 	bl	20000100 <ascii_ctrl_bit_clear>
    return c;   
2000015e:	1dfb      	adds	r3, r7, #7
20000160:	781b      	ldrb	r3, [r3, #0]
}
20000162:	0018      	movs	r0, r3
20000164:	46bd      	mov	sp, r7
20000166:	b002      	add	sp, #8
20000168:	bd80      	pop	{r7, pc}
2000016a:	46c0      	nop			; (mov r8, r8)
2000016c:	40021010 	andmi	r1, r2, r0, lsl r0

20000170 <ascii_write_controller>:

void ascii_write_controller( unsigned char c ){
20000170:	b580      	push	{r7, lr}
20000172:	b082      	sub	sp, #8
20000174:	af00      	add	r7, sp, #0
20000176:	0002      	movs	r2, r0
20000178:	1dfb      	adds	r3, r7, #7
2000017a:	701a      	strb	r2, [r3, #0]
	delay_250ns();
2000017c:	f7ff ff5e 	bl	2000003c <delay_250ns>
    ascii_ctrl_bit_set( B_E );   // Synchronization signal =1
20000180:	2040      	movs	r0, #64	; 0x40
20000182:	f7ff ffa5 	bl	200000d0 <ascii_ctrl_bit_set>
    *portOdrHigh = c;            // Ger kommandot till porten
20000186:	4a07      	ldr	r2, [pc, #28]	; (200001a4 <ascii_write_controller+0x34>)
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	7013      	strb	r3, [r2, #0]
    delay_250ns();
2000018e:	f7ff ff55 	bl	2000003c <delay_250ns>
    ascii_ctrl_bit_clear( B_E ); // Stänger av synchronizatoin.
20000192:	2040      	movs	r0, #64	; 0x40
20000194:	f7ff ffb4 	bl	20000100 <ascii_ctrl_bit_clear>
    delay_250ns();
20000198:	f7ff ff50 	bl	2000003c <delay_250ns>
}
2000019c:	46c0      	nop			; (mov r8, r8)
2000019e:	46bd      	mov	sp, r7
200001a0:	b002      	add	sp, #8
200001a2:	bd80      	pop	{r7, pc}
200001a4:	40021015 	andmi	r1, r2, r5, lsl r0

200001a8 <ascii_read_status>:

unsigned char ascii_read_status(){
200001a8:	b590      	push	{r4, r7, lr}
200001aa:	b083      	sub	sp, #12
200001ac:	af00      	add	r7, sp, #0
    unsigned char c;
    *portModer = 0x0000;   //GÖR OM PORTEN TILL INGÅNGAR
200001ae:	4b0b      	ldr	r3, [pc, #44]	; (200001dc <ascii_read_status+0x34>)
200001b0:	2200      	movs	r2, #0
200001b2:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set( B_RW );   // ETT STÄLL READ/WRITE
200001b4:	2002      	movs	r0, #2
200001b6:	f7ff ff8b 	bl	200000d0 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear( B_RS );  //NOLLSTÄLL READ/ SET
200001ba:	2001      	movs	r0, #1
200001bc:	f7ff ffa0 	bl	20000100 <ascii_ctrl_bit_clear>
    c = ascii_read_controller( );
200001c0:	1dfc      	adds	r4, r7, #7
200001c2:	f7ff ffbb 	bl	2000013c <ascii_read_controller>
200001c6:	0003      	movs	r3, r0
200001c8:	7023      	strb	r3, [r4, #0]
    *portModer = 0x5555;    //GÖR OM PORTEN TILL UTGÅNGAR
200001ca:	4b04      	ldr	r3, [pc, #16]	; (200001dc <ascii_read_status+0x34>)
200001cc:	4a04      	ldr	r2, [pc, #16]	; (200001e0 <ascii_read_status+0x38>)
200001ce:	601a      	str	r2, [r3, #0]
return c;
200001d0:	1dfb      	adds	r3, r7, #7
200001d2:	781b      	ldrb	r3, [r3, #0]
}
200001d4:	0018      	movs	r0, r3
200001d6:	46bd      	mov	sp, r7
200001d8:	b003      	add	sp, #12
200001da:	bd90      	pop	{r4, r7, pc}
200001dc:	40021000 	andmi	r1, r2, r0
200001e0:	00005555 	andeq	r5, r0, r5, asr r5

200001e4 <ascii_write_cmd>:

void ascii_write_cmd ( unsigned char command){
200001e4:	b580      	push	{r7, lr}
200001e6:	b082      	sub	sp, #8
200001e8:	af00      	add	r7, sp, #0
200001ea:	0002      	movs	r2, r0
200001ec:	1dfb      	adds	r3, r7, #7
200001ee:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
200001f0:	2001      	movs	r0, #1
200001f2:	f7ff ff85 	bl	20000100 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
200001f6:	2002      	movs	r0, #2
200001f8:	f7ff ff82 	bl	20000100 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
200001fc:	1dfb      	adds	r3, r7, #7
200001fe:	781b      	ldrb	r3, [r3, #0]
20000200:	0018      	movs	r0, r3
20000202:	f7ff ffb5 	bl	20000170 <ascii_write_controller>
}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	46bd      	mov	sp, r7
2000020a:	b002      	add	sp, #8
2000020c:	bd80      	pop	{r7, pc}

2000020e <ascii_write_data>:

void ascii_write_data (unsigned char data){
2000020e:	b580      	push	{r7, lr}
20000210:	b082      	sub	sp, #8
20000212:	af00      	add	r7, sp, #0
20000214:	0002      	movs	r2, r0
20000216:	1dfb      	adds	r3, r7, #7
20000218:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RW);
2000021a:	2002      	movs	r0, #2
2000021c:	f7ff ff70 	bl	20000100 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RS);
20000220:	2001      	movs	r0, #1
20000222:	f7ff ff55 	bl	200000d0 <ascii_ctrl_bit_set>
    ascii_write_controller(data);
20000226:	1dfb      	adds	r3, r7, #7
20000228:	781b      	ldrb	r3, [r3, #0]
2000022a:	0018      	movs	r0, r3
2000022c:	f7ff ffa0 	bl	20000170 <ascii_write_controller>
}
20000230:	46c0      	nop			; (mov r8, r8)
20000232:	46bd      	mov	sp, r7
20000234:	b002      	add	sp, #8
20000236:	bd80      	pop	{r7, pc}

20000238 <ascii_read_data>:

void ascii_read_data(void){
20000238:	b590      	push	{r4, r7, lr}
2000023a:	b083      	sub	sp, #12
2000023c:	af00      	add	r7, sp, #0
    unsigned char c;
    *portModer = 0x0000;
2000023e:	4b0a      	ldr	r3, [pc, #40]	; (20000268 <ascii_read_data+0x30>)
20000240:	2200      	movs	r2, #0
20000242:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000244:	2001      	movs	r0, #1
20000246:	f7ff ff43 	bl	200000d0 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
2000024a:	2002      	movs	r0, #2
2000024c:	f7ff ff40 	bl	200000d0 <ascii_ctrl_bit_set>
    c = ascii_read_controller();
20000250:	1dfc      	adds	r4, r7, #7
20000252:	f7ff ff73 	bl	2000013c <ascii_read_controller>
20000256:	0003      	movs	r3, r0
20000258:	7023      	strb	r3, [r4, #0]
    *portModer = 0x5555;
2000025a:	4b03      	ldr	r3, [pc, #12]	; (20000268 <ascii_read_data+0x30>)
2000025c:	4a03      	ldr	r2, [pc, #12]	; (2000026c <ascii_read_data+0x34>)
2000025e:	601a      	str	r2, [r3, #0]
    return c;
20000260:	46c0      	nop			; (mov r8, r8)
}
20000262:	46bd      	mov	sp, r7
20000264:	b003      	add	sp, #12
20000266:	bd90      	pop	{r4, r7, pc}
20000268:	40021000 	andmi	r1, r2, r0
2000026c:	00005555 	andeq	r5, r0, r5, asr r5

20000270 <ascii_clear_cmd>:
void ascii_clear_cmd(unsigned char cmd){
20000270:	b580      	push	{r7, lr}
20000272:	b082      	sub	sp, #8
20000274:	af00      	add	r7, sp, #0
20000276:	0002      	movs	r2, r0
20000278:	1dfb      	adds	r3, r7, #7
2000027a:	701a      	strb	r2, [r3, #0]
    while((ascii_read_status() & 0x80) == 0x80){
2000027c:	e00a      	b.n	20000294 <ascii_clear_cmd+0x24>
        delay_micro(8);
2000027e:	2008      	movs	r0, #8
20000280:	f7ff fefe 	bl	20000080 <delay_micro>
        ascii_write_cmd(cmd);
20000284:	1dfb      	adds	r3, r7, #7
20000286:	781b      	ldrb	r3, [r3, #0]
20000288:	0018      	movs	r0, r3
2000028a:	f7ff ffab 	bl	200001e4 <ascii_write_cmd>
        delay_milli(2);
2000028e:	2002      	movs	r0, #2
20000290:	f7ff ff0d 	bl	200000ae <delay_milli>
    while((ascii_read_status() & 0x80) == 0x80){
20000294:	f7ff ff88 	bl	200001a8 <ascii_read_status>
20000298:	0003      	movs	r3, r0
2000029a:	001a      	movs	r2, r3
2000029c:	2380      	movs	r3, #128	; 0x80
2000029e:	4013      	ands	r3, r2
200002a0:	2b80      	cmp	r3, #128	; 0x80
200002a2:	d0ec      	beq.n	2000027e <ascii_clear_cmd+0xe>
    }
}
200002a4:	46c0      	nop			; (mov r8, r8)
200002a6:	46bd      	mov	sp, r7
200002a8:	b002      	add	sp, #8
200002aa:	bd80      	pop	{r7, pc}

200002ac <ascii_init>:

void ascii_init(void){
200002ac:	b580      	push	{r7, lr}
200002ae:	af00      	add	r7, sp, #0
    ascii_write_cmd(0x38);
200002b0:	2038      	movs	r0, #56	; 0x38
200002b2:	f7ff ff97 	bl	200001e4 <ascii_write_cmd>
    ascii_write_cmd(0x0E);
200002b6:	200e      	movs	r0, #14
200002b8:	f7ff ff94 	bl	200001e4 <ascii_write_cmd>
    ascii_clear_cmd(0x01);
200002bc:	2001      	movs	r0, #1
200002be:	f7ff ffd7 	bl	20000270 <ascii_clear_cmd>
    ascii_write_cmd(0x04);
200002c2:	2004      	movs	r0, #4
200002c4:	f7ff ff8e 	bl	200001e4 <ascii_write_cmd>

}
200002c8:	46c0      	nop			; (mov r8, r8)
200002ca:	46bd      	mov	sp, r7
200002cc:	bd80      	pop	{r7, pc}

200002ce <ascii_gotoxy>:


void ascii_gotoxy( unsigned int x, unsigned int y) {
200002ce:	b580      	push	{r7, lr}
200002d0:	b084      	sub	sp, #16
200002d2:	af00      	add	r7, sp, #0
200002d4:	6078      	str	r0, [r7, #4]
200002d6:	6039      	str	r1, [r7, #0]
    unsigned char address = x-1;
200002d8:	687b      	ldr	r3, [r7, #4]
200002da:	b2da      	uxtb	r2, r3
200002dc:	230f      	movs	r3, #15
200002de:	18fb      	adds	r3, r7, r3
200002e0:	3a01      	subs	r2, #1
200002e2:	701a      	strb	r2, [r3, #0]
    if(y != 1){
200002e4:	683b      	ldr	r3, [r7, #0]
200002e6:	2b01      	cmp	r3, #1
200002e8:	d00c      	beq.n	20000304 <ascii_gotoxy+0x36>
        address +=0x40 | (x-1);
200002ea:	687b      	ldr	r3, [r7, #4]
200002ec:	b2db      	uxtb	r3, r3
200002ee:	3b01      	subs	r3, #1
200002f0:	b2db      	uxtb	r3, r3
200002f2:	2240      	movs	r2, #64	; 0x40
200002f4:	4313      	orrs	r3, r2
200002f6:	b2d9      	uxtb	r1, r3
200002f8:	220f      	movs	r2, #15
200002fa:	18bb      	adds	r3, r7, r2
200002fc:	18ba      	adds	r2, r7, r2
200002fe:	7812      	ldrb	r2, [r2, #0]
20000300:	188a      	adds	r2, r1, r2
20000302:	701a      	strb	r2, [r3, #0]
} 
    ascii_write_cmd( 0x80 | address);
20000304:	230f      	movs	r3, #15
20000306:	18fb      	adds	r3, r7, r3
20000308:	781b      	ldrb	r3, [r3, #0]
2000030a:	2280      	movs	r2, #128	; 0x80
2000030c:	4252      	negs	r2, r2
2000030e:	4313      	orrs	r3, r2
20000310:	b2db      	uxtb	r3, r3
20000312:	0018      	movs	r0, r3
20000314:	f7ff ff66 	bl	200001e4 <ascii_write_cmd>
    delay_micro(45);
20000318:	202d      	movs	r0, #45	; 0x2d
2000031a:	f7ff feb1 	bl	20000080 <delay_micro>
}
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	46bd      	mov	sp, r7
20000322:	b004      	add	sp, #16
20000324:	bd80      	pop	{r7, pc}

20000326 <ascii_write_char>:

void ascii_write_char( unsigned char c){
20000326:	b580      	push	{r7, lr}
20000328:	b082      	sub	sp, #8
2000032a:	af00      	add	r7, sp, #0
2000032c:	0002      	movs	r2, r0
2000032e:	1dfb      	adds	r3, r7, #7
20000330:	701a      	strb	r2, [r3, #0]
    while((ascii_read_status() & 0x80) == 0x80){
20000332:	e007      	b.n	20000344 <ascii_write_char+0x1e>
        delay_micro(8);
20000334:	2008      	movs	r0, #8
20000336:	f7ff fea3 	bl	20000080 <delay_micro>
        ascii_write_data(c);
2000033a:	1dfb      	adds	r3, r7, #7
2000033c:	781b      	ldrb	r3, [r3, #0]
2000033e:	0018      	movs	r0, r3
20000340:	f7ff ff65 	bl	2000020e <ascii_write_data>
    while((ascii_read_status() & 0x80) == 0x80){
20000344:	f7ff ff30 	bl	200001a8 <ascii_read_status>
20000348:	0003      	movs	r3, r0
2000034a:	001a      	movs	r2, r3
2000034c:	2380      	movs	r3, #128	; 0x80
2000034e:	4013      	ands	r3, r2
20000350:	2b80      	cmp	r3, #128	; 0x80
20000352:	d0ef      	beq.n	20000334 <ascii_write_char+0xe>
    }
    
}
20000354:	46c0      	nop			; (mov r8, r8)
20000356:	46bd      	mov	sp, r7
20000358:	b002      	add	sp, #8
2000035a:	bd80      	pop	{r7, pc}

2000035c <main>:

void main(void){
2000035c:	b5b0      	push	{r4, r5, r7, lr}
2000035e:	b08a      	sub	sp, #40	; 0x28
20000360:	af00      	add	r7, sp, #0
    char *s;
    char test1[] = "Alfanumerisk";
20000362:	2414      	movs	r4, #20
20000364:	193b      	adds	r3, r7, r4
20000366:	4a1c      	ldr	r2, [pc, #112]	; (200003d8 <main+0x7c>)
20000368:	ca23      	ldmia	r2!, {r0, r1, r5}
2000036a:	c323      	stmia	r3!, {r0, r1, r5}
2000036c:	7812      	ldrb	r2, [r2, #0]
2000036e:	701a      	strb	r2, [r3, #0]
    char test2[] = "Display - test";
20000370:	1d3b      	adds	r3, r7, #4
20000372:	4a1a      	ldr	r2, [pc, #104]	; (200003dc <main+0x80>)
20000374:	ca23      	ldmia	r2!, {r0, r1, r5}
20000376:	c323      	stmia	r3!, {r0, r1, r5}
20000378:	8811      	ldrh	r1, [r2, #0]
2000037a:	8019      	strh	r1, [r3, #0]
2000037c:	7892      	ldrb	r2, [r2, #2]
2000037e:	709a      	strb	r2, [r3, #2]
    
    init_app();
20000380:	f7ff fe46 	bl	20000010 <init_app>
    ascii_init();
20000384:	f7ff ff92 	bl	200002ac <ascii_init>
    ascii_gotoxy(1,1);
20000388:	2101      	movs	r1, #1
2000038a:	2001      	movs	r0, #1
2000038c:	f7ff ff9f 	bl	200002ce <ascii_gotoxy>
    s = test1;
20000390:	193b      	adds	r3, r7, r4
20000392:	627b      	str	r3, [r7, #36]	; 0x24
	
    while (*s){
20000394:	e006      	b.n	200003a4 <main+0x48>
        ascii_write_char( *s++);
20000396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000398:	1c5a      	adds	r2, r3, #1
2000039a:	627a      	str	r2, [r7, #36]	; 0x24
2000039c:	781b      	ldrb	r3, [r3, #0]
2000039e:	0018      	movs	r0, r3
200003a0:	f7ff ffc1 	bl	20000326 <ascii_write_char>
    while (*s){
200003a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003a6:	781b      	ldrb	r3, [r3, #0]
200003a8:	2b00      	cmp	r3, #0
200003aa:	d1f4      	bne.n	20000396 <main+0x3a>
    }
    ascii_gotoxy(1,2);
200003ac:	2102      	movs	r1, #2
200003ae:	2001      	movs	r0, #1
200003b0:	f7ff ff8d 	bl	200002ce <ascii_gotoxy>
    s = test2;
200003b4:	1d3b      	adds	r3, r7, #4
200003b6:	627b      	str	r3, [r7, #36]	; 0x24
	
    while(*s){
200003b8:	e006      	b.n	200003c8 <main+0x6c>
        ascii_write_char(*s++);
200003ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003bc:	1c5a      	adds	r2, r3, #1
200003be:	627a      	str	r2, [r7, #36]	; 0x24
200003c0:	781b      	ldrb	r3, [r3, #0]
200003c2:	0018      	movs	r0, r3
200003c4:	f7ff ffaf 	bl	20000326 <ascii_write_char>
    while(*s){
200003c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003ca:	781b      	ldrb	r3, [r3, #0]
200003cc:	2b00      	cmp	r3, #0
200003ce:	d1f4      	bne.n	200003ba <main+0x5e>
    }
200003d0:	46c0      	nop			; (mov r8, r8)
200003d2:	46bd      	mov	sp, r7
200003d4:	b00a      	add	sp, #40	; 0x28
200003d6:	bdb0      	pop	{r4, r5, r7, pc}
200003d8:	200003e0 	andcs	r0, r0, r0, ror #7
200003dc:	200003f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200003e0:	61666c41 	cmnvs	r6, r1, asr #24
200003e4:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
200003e8:	6b736972 	blvs	21cda9b8 <main+0x1cda65c>
200003ec:	00000000 	andeq	r0, r0, r0
200003f0:	70736944 	rsbsvc	r6, r3, r4, asr #18
200003f4:	2079616c 	rsbscs	r6, r9, ip, ror #2
200003f8:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0xffffffd3
200003fc:	00007473 	andeq	r7, r0, r3, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000002c3 	andeq	r0, r0, r3, asr #5
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
  10:	0000190c 	andeq	r1, r0, ip, lsl #18
  14:	00016a00 	andeq	r6, r1, r0, lsl #20
	...
  24:	01240200 			; <UNDEFINED> instruction: 0x01240200
  28:	a6010000 	strge	r0, [r1], -r0
  2c:	2000035c 	andcs	r0, r0, ip, asr r3
  30:	00000084 	andeq	r0, r0, r4, lsl #1
  34:	00639c01 	rsbeq	r9, r3, r1, lsl #24
  38:	73030000 	movwvc	r0, #12288	; 0x3000
  3c:	63a70100 			; <UNDEFINED> instruction: 0x63a70100
  40:	02000000 	andeq	r0, r0, #0
  44:	4e046c91 	mcrmi	12, 0, r6, cr4, cr1, {4}
  48:	01000001 	tsteq	r0, r1
  4c:	000070a8 	andeq	r7, r0, r8, lsr #1
  50:	5c910200 	lfmpl	f0, 4, [r1], {0}
  54:	00015404 	andeq	r5, r1, r4, lsl #8
  58:	87a90100 	strhi	r0, [r9, r0, lsl #2]!
  5c:	02000000 	andeq	r0, r0, #0
  60:	05004c91 	streq	r4, [r0, #-3217]	; 0xfffff36f
  64:	00006904 	andeq	r6, r0, r4, lsl #18
  68:	08010600 	stmdaeq	r1, {r9, sl}
  6c:	0000010f 	andeq	r0, r0, pc, lsl #2
  70:	00006907 	andeq	r6, r0, r7, lsl #18
  74:	00008000 	andeq	r8, r0, r0
  78:	00800800 	addeq	r0, r0, r0, lsl #16
  7c:	000c0000 	andeq	r0, ip, r0
  80:	5f070406 	svcpl	0x00070406
  84:	07000000 	streq	r0, [r0, -r0]
  88:	00000069 	andeq	r0, r0, r9, rrx
  8c:	00000097 	muleq	r0, r7, r0
  90:	00008008 	andeq	r8, r0, r8
  94:	02000e00 	andeq	r0, r0, #0, 28
  98:	0000008c 	andeq	r0, r0, ip, lsl #1
  9c:	03269e01 			; <UNDEFINED> instruction: 0x03269e01
  a0:	00362000 	eorseq	r2, r6, r0
  a4:	9c010000 	stcls	0, cr0, [r1], {-0}
  a8:	000000b9 	strheq	r0, [r0], -r9
  ac:	01006309 	tsteq	r0, r9, lsl #6
  b0:	0000b99e 	muleq	r0, lr, r9
  b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  b8:	08010600 	stmdaeq	r1, {r9, sl}
  bc:	00000106 	andeq	r0, r0, r6, lsl #2
  c0:	00000c02 	andeq	r0, r0, r2, lsl #24
  c4:	ce950100 	fmlgts	f0, f5, f0
  c8:	58200002 	stmdapl	r0!, {r1}
  cc:	01000000 	mrseq	r0, (UNDEF: 0)
  d0:	0000fc9c 	muleq	r0, ip, ip
  d4:	00780900 	rsbseq	r0, r8, r0, lsl #18
  d8:	00809501 	addeq	r9, r0, r1, lsl #10
  dc:	91020000 	mrsls	r0, (UNDEF: 2)
  e0:	0079096c 	rsbseq	r0, r9, ip, ror #18
  e4:	00809501 	addeq	r9, r0, r1, lsl #10
  e8:	91020000 	mrsls	r0, (UNDEF: 2)
  ec:	00cc0468 	sbceq	r0, ip, r8, ror #8
  f0:	96010000 	strls	r0, [r1], -r0
  f4:	000000b9 	strheq	r0, [r0], -r9
  f8:	00779102 	rsbseq	r9, r7, r2, lsl #2
  fc:	0002310a 	andeq	r3, r2, sl, lsl #2
 100:	ac8c0100 	stfges	f0, [ip], {0}
 104:	22200002 	eorcs	r0, r0, #2
 108:	01000000 	mrseq	r0, (UNDEF: 0)
 10c:	0114029c 			; <UNDEFINED> instruction: 0x0114029c
 110:	84010000 	strhi	r0, [r1], #-0
 114:	20000270 	andcs	r0, r0, r0, ror r2
 118:	0000003c 	andeq	r0, r0, ip, lsr r0
 11c:	01319c01 	teqeq	r1, r1, lsl #24
 120:	63090000 	movwvs	r0, #36864	; 0x9000
 124:	0100646d 	tsteq	r0, sp, ror #8
 128:	0000b984 	andeq	fp, r0, r4, lsl #19
 12c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 130:	00ea0200 	rsceq	r0, sl, r0, lsl #4
 134:	7b010000 	blvc	4013c <startup-0x1ffbfec4>
 138:	20000238 	andcs	r0, r0, r8, lsr r2
 13c:	00000038 	andeq	r0, r0, r8, lsr r0
 140:	01539c01 	cmpeq	r3, r1, lsl #24
 144:	63030000 	movwvs	r0, #12288	; 0x3000
 148:	b97c0100 	ldmdblt	ip!, {r8}^
 14c:	02000000 	andeq	r0, r0, #0
 150:	02006f91 	andeq	r6, r0, #580	; 0x244
 154:	000000af 	andeq	r0, r0, pc, lsr #1
 158:	020e7501 	andeq	r7, lr, #4194304	; 0x400000
 15c:	002a2000 	eoreq	r2, sl, r0
 160:	9c010000 	stcls	0, cr0, [r1], {-0}
 164:	00000177 	andeq	r0, r0, r7, ror r1
 168:	0000f50b 	andeq	pc, r0, fp, lsl #10
 16c:	b9750100 	ldmdblt	r5!, {r8}^
 170:	02000000 	andeq	r0, r0, #0
 174:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 178:	0000015a 	andeq	r0, r0, sl, asr r1
 17c:	01e46f01 	mvneq	r6, r1, lsl #30
 180:	002a2000 	eoreq	r2, sl, r0
 184:	9c010000 	stcls	0, cr0, [r1], {-0}
 188:	0000019b 	muleq	r0, fp, r1
 18c:	00013e0b 	andeq	r3, r1, fp, lsl #28
 190:	b96f0100 	stmdblt	pc!, {r8}^	; <UNPREDICTABLE>
 194:	02000000 	andeq	r0, r0, #0
 198:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
 19c:	0000009d 	muleq	r0, sp, r0
 1a0:	00b96501 	adcseq	r6, r9, r1, lsl #10
 1a4:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
 1a8:	003c2000 	eorseq	r2, ip, r0
 1ac:	9c010000 	stcls	0, cr0, [r1], {-0}
 1b0:	000001c1 	andeq	r0, r0, r1, asr #3
 1b4:	01006303 	tsteq	r0, r3, lsl #6
 1b8:	0000b966 	andeq	fp, r0, r6, ror #18
 1bc:	6f910200 	svcvs	0x00910200
 1c0:	006c0200 	rsbeq	r0, ip, r0, lsl #4
 1c4:	5c010000 	stcpl	0, cr0, [r1], {-0}
 1c8:	20000170 	andcs	r0, r0, r0, ror r1
 1cc:	00000038 	andeq	r0, r0, r8, lsr r0
 1d0:	01e39c01 	mvneq	r9, r1, lsl #24
 1d4:	63090000 	movwvs	r0, #36864	; 0x9000
 1d8:	b95c0100 	ldmdblt	ip, {r8}^
 1dc:	02000000 	andeq	r0, r0, #0
 1e0:	0d007791 	stceq	7, cr7, [r0, #-580]	; 0xfffffdbc
 1e4:	000000d4 	ldrdeq	r0, [r0], -r4
 1e8:	00b95201 	adcseq	r5, r9, r1, lsl #4
 1ec:	013c0000 	teqeq	ip, r0
 1f0:	00342000 	eorseq	r2, r4, r0
 1f4:	9c010000 	stcls	0, cr0, [r1], {-0}
 1f8:	00000209 	andeq	r0, r0, r9, lsl #4
 1fc:	01006303 	tsteq	r0, r3, lsl #6
 200:	0000b953 	andeq	fp, r0, r3, asr r9
 204:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 208:	01290e00 			; <UNDEFINED> instruction: 0x01290e00
 20c:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 210:	20000100 	andcs	r0, r0, r0, lsl #2
 214:	0000003c 	andeq	r0, r0, ip, lsr r0
 218:	022b9c01 	eoreq	r9, fp, #256	; 0x100
 21c:	78090000 	stmdavc	r9, {}	; <UNPREDICTABLE>
 220:	b94e0100 	stmdblt	lr, {r8}^
 224:	02000000 	andeq	r0, r0, #0
 228:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 22c:	000001a6 	andeq	r0, r0, r6, lsr #3
 230:	00d04a01 	sbcseq	r4, r0, r1, lsl #20
 234:	00302000 	eorseq	r2, r0, r0
 238:	9c010000 	stcls	0, cr0, [r1], {-0}
 23c:	0000024d 	andeq	r0, r0, sp, asr #4
 240:	01007809 	tsteq	r0, r9, lsl #16
 244:	0000b94a 	andeq	fp, r0, sl, asr #18
 248:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 24c:	00000200 	andeq	r0, r0, r0, lsl #4
 250:	41010000 	mrsmi	r0, (UNDEF: 1)
 254:	200000ae 	andcs	r0, r0, lr, lsr #1
 258:	00000022 	andeq	r0, r0, r2, lsr #32
 25c:	02709c01 	rsbseq	r9, r0, #256	; 0x100
 260:	6d090000 	stcvs	0, cr0, [r9, #-0]
 264:	41010073 	tstmi	r1, r3, ror r0
 268:	00000080 	andeq	r0, r0, r0, lsl #1
 26c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 270:	0000fa02 	andeq	pc, r0, r2, lsl #20
 274:	80370100 	eorshi	r0, r7, r0, lsl #2
 278:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 27c:	01000000 	mrseq	r0, (UNDEF: 0)
 280:	0002939c 	muleq	r2, ip, r3
 284:	73750900 	cmnvc	r5, #0, 18
 288:	80370100 	eorshi	r0, r7, r0, lsl #2
 28c:	02000000 	andeq	r0, r0, #0
 290:	0f007491 	svceq	0x00007491
 294:	000000c0 	andeq	r0, r0, r0, asr #1
 298:	003c2e01 	eorseq	r2, ip, r1, lsl #28
 29c:	00442000 	subeq	r2, r4, r0
 2a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a4:	00008310 	andeq	r8, r0, r0, lsl r3
 2a8:	10280100 	eorne	r0, r8, r0, lsl #2
 2ac:	2c200000 	stccs	0, cr0, [r0], #-0
 2b0:	01000000 	mrseq	r0, (UNDEF: 0)
 2b4:	01460f9c 			; <UNDEFINED> instruction: 0x01460f9c
 2b8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
 2bc:	20000000 	andcs	r0, r0, r0
 2c0:	0000000c 	andeq	r0, r0, ip
 2c4:	Address 0x00000000000002c4 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  20:	06120111 			; <UNDEFINED> instruction: 0x06120111
  24:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  28:	00130119 	andseq	r0, r3, r9, lsl r1
  2c:	00340300 	eorseq	r0, r4, r0, lsl #6
  30:	0b3a0803 	bleq	e82044 <startup-0x1f17dfbc>
  34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  38:	00001802 	andeq	r1, r0, r2, lsl #16
  3c:	03003404 	movweq	r3, #1028	; 0x404
  40:	3b0b3a0e 	blcc	2ce880 <startup-0x1fd31780>
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0b0b000f 	bleq	2c0090 <startup-0x1fd3ff70>
  50:	00001349 	andeq	r1, r0, r9, asr #6
  54:	0b002406 	bleq	9074 <startup-0x1fff6f8c>
  58:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  5c:	0700000e 	streq	r0, [r0, -lr]
  60:	13490101 	movtne	r0, #37121	; 0x9101
  64:	00001301 	andeq	r1, r0, r1, lsl #6
  68:	49002108 	stmdbmi	r0, {r3, r8, sp}
  6c:	000b2f13 	andeq	r2, fp, r3, lsl pc
  70:	00050900 	andeq	r0, r5, r0, lsl #18
  74:	0b3a0803 	bleq	e82088 <startup-0x1f17df78>
  78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  7c:	00001802 	andeq	r1, r0, r2, lsl #16
  80:	3f002e0a 	svccc	0x00002e0a
  84:	3a0e0319 	bcc	380cf0 <startup-0x1fc7f310>
  88:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  8c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  90:	96184006 	ldrls	r4, [r8], -r6
  94:	00001942 	andeq	r1, r0, r2, asr #18
  98:	0300050b 	movweq	r0, #1291	; 0x50b
  9c:	3b0b3a0e 	blcc	2ce8dc <startup-0x1fd31724>
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0c000018 	stceq	0, cr0, [r0], {24}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  bc:	00130119 	andseq	r0, r3, r9, lsl r1
  c0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
  c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  c8:	0b3b0b3a 	bleq	ec2db8 <startup-0x1f13d248>
  cc:	13491927 	movtne	r1, #39207	; 0x9927
  d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  d4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  d8:	00130119 	andseq	r0, r3, r9, lsl r1
  dc:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	01111927 	tsteq	r1, r7, lsr #18
  ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
  f4:	0f000013 	svceq	0x00000013
  f8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  fc:	0b3a0e03 	bleq	e83910 <startup-0x1f17c6f0>
 100:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 104:	06120111 			; <UNDEFINED> instruction: 0x06120111
 108:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 10c:	10000019 	andne	r0, r0, r9, lsl r0
 110:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 114:	0b3a0e03 	bleq	e83928 <startup-0x1f17c6d8>
 118:	01110b3b 	tsteq	r1, fp, lsr fp
 11c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 120:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200003e0 	andcs	r0, r0, r0, ror #7
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000fe 	strdeq	r0, [r0], -lr
   4:	005c0002 	subseq	r0, ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	6d6f742f 	cfstrdvs	mvd7, [pc, #-188]!	; ffffff6c <main+0xdffffc10>
  24:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  28:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  2c:	572f7374 			; <UNDEFINED> instruction: 0x572f7374
  30:	2f4b524f 	svccs	0x004b524f
  34:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
  38:	4f656e69 	svcmi	0x00656e69
  3c:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
  40:	50646574 	rsbpl	r6, r4, r4, ror r5
  44:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  48:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
  4c:	752f676e 	strvc	r6, [pc, #-1902]!	; fffff8e6 <main+0xdffff58a>
  50:	37356770 			; <UNDEFINED> instruction: 0x37356770
  54:	0000325f 	andeq	r3, r0, pc, asr r2
  58:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  5c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  60:	00010063 	andeq	r0, r1, r3, rrx
  64:	05000000 	streq	r0, [r0, #-0]
  68:	00000002 	andeq	r0, r0, r2
  6c:	011e0320 	tsteq	lr, r0, lsr #6
  70:	03025e13 	movweq	r5, #11795	; 0x2e13
  74:	00010100 	andeq	r0, r1, r0, lsl #2
  78:	00100205 	andseq	r0, r0, r5, lsl #4
  7c:	27032000 	strcs	r2, [r3, -r0]
  80:	3d3d2f01 	ldccc	15, cr2, [sp, #-4]!
  84:	3d2fae3d 	stccc	14, cr10, [pc, #-244]!	; ffffff98 <main+0xdffffc3c>
  88:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
  8c:	06010402 	streq	r0, [r1], -r2, lsl #8
  90:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
  94:	2f214ba0 	svccs	0x00214ba0
  98:	372f2f2f 	strcc	r2, [pc, -pc, lsr #30]!
  9c:	214c4c43 	cmpcs	ip, r3, asr #24
  a0:	674d5c3b 	smlaldxvs	r5, sp, fp, ip
  a4:	086768bb 	stmdaeq	r7!, {r0, r1, r3, r4, r5, r7, fp, sp, lr}^
  a8:	3d3e7613 	ldccc	6, cr7, [lr, #-76]!	; 0xffffffb4
  ac:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
  b0:	2f67762f 	svccs	0x0067762f
  b4:	3d2f4b3d 	fstmdbxcc	pc!, {d4-d33}	;@ Deprecated
  b8:	3d3e682f 	ldccc	8, cr6, [lr, #-188]!	; 0xffffff44
  bc:	3d593d3d 	ldclcc	13, cr3, [r9, #-244]	; 0xffffff0c
  c0:	3d67842f 	cfstrdcc	mvd8, [r7, #-188]!	; 0xffffff44
  c4:	674c593d 	smlaldxvs	r5, ip, sp, r9
  c8:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
  cc:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
  d0:	75213d59 	strvc	r3, [r1, #-3417]!	; 0xfffff2a7
  d4:	593d2167 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sp}
  d8:	2f4c8739 	svccs	0x004c8739
  dc:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
  e0:	3d67593f 			; <UNDEFINED> instruction: 0x3d67593f
  e4:	4c3d9fca 	ldcmi	15, cr9, [sp], #-808	; 0xfffffcd8
  e8:	563d2167 	ldrtpl	r2, [sp], -r7, ror #2
  ec:	753e4c87 	ldrvc	r4, [lr, #-3207]!	; 0xfffff379
  f0:	4b2f2f84 	blmi	bcbf08 <startup-0x1f4340f8>
  f4:	4d732130 	ldfmie	f2, [r3, #-192]!	; 0xffffff40
  f8:	7321304b 			; <UNDEFINED> instruction: 0x7321304b
  fc:	0008024d 	andeq	r0, r8, sp, asr #4
 100:	Address 0x0000000000000100 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  10:	6f675f69 	svcvs	0x00675f69
  14:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	6f682f00 	svcvs	0x00682f00
  1c:	742f656d 	strtvc	r6, [pc], #-1389	; 24 <startup-0x1fffffdc>
  20:	442f6d6f 	strtmi	r6, [pc], #-3439	; 28 <startup-0x1fffffd8>
  24:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  28:	73746e65 	cmnvc	r4, #1616	; 0x650
  2c:	524f572f 	subpl	r5, pc, #12320768	; 0xbc0000
  30:	614d2f4b 	cmpvs	sp, fp, asr #30
  34:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  38:	69724f65 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, lr}^
  3c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
  40:	6f725064 	svcvs	0x00725064
  44:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
  48:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
  4c:	6770752f 	ldrbvs	r7, [r0, -pc, lsr #10]!
  50:	325f3735 	subscc	r3, pc, #13893632	; 0xd40000
  54:	6174732f 	cmnvs	r4, pc, lsr #6
  58:	70757472 	rsbsvc	r7, r5, r2, ror r4
  5c:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
  60:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  64:	2064656e 	rsbcs	r6, r4, lr, ror #10
  68:	00746e69 	rsbseq	r6, r4, r9, ror #28
  6c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  70:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  74:	5f657469 	svcpl	0x00657469
  78:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  7c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  80:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
  84:	5f74696e 	svcpl	0x0074696e
  88:	00707061 	rsbseq	r7, r0, r1, rrx
  8c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  90:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  94:	5f657469 	svcpl	0x00657469
  98:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  9c:	63736100 	cmnvs	r3, #0, 2
  a0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
  a4:	5f646165 	svcpl	0x00646165
  a8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  ac:	61007375 	tstvs	r0, r5, ror r3
  b0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  b4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  b8:	645f6574 	ldrbvs	r6, [pc], #-1396	; c0 <startup-0x1fffff40>
  bc:	00617461 	rsbeq	r7, r1, r1, ror #8
  c0:	616c6564 	cmnvs	ip, r4, ror #10
  c4:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
  c8:	00736e30 	rsbseq	r6, r3, r0, lsr lr
  cc:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
  d0:	00737365 	rsbseq	r7, r3, r5, ror #6
  d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  d8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  dc:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
  e0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  e4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  e8:	73610072 	cmnvc	r1, #114	; 0x72
  ec:	5f696963 	svcpl	0x00696963
  f0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  f4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  f8:	65640061 	strbvs	r0, [r4, #-97]!	; 0xffffff9f
  fc:	5f79616c 	svcpl	0x0079616c
 100:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 104:	6e75006f 	cdpvs	0, 7, cr0, cr5, cr15, {3}
 108:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 10c:	63206465 			; <UNDEFINED> instruction: 0x63206465
 110:	00726168 	rsbseq	r6, r2, r8, ror #2
 114:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 118:	6c635f69 	stclvs	15, cr5, [r3], #-420	; 0xfffffe5c
 11c:	5f726165 	svcpl	0x00726165
 120:	00646d63 	rsbeq	r6, r4, r3, ror #26
 124:	6e69616d 	powvsez	f6, f1, #5.0
 128:	63736100 	cmnvs	r3, #0, 2
 12c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 130:	5f6c7274 	svcpl	0x006c7274
 134:	5f746962 	svcpl	0x00746962
 138:	61656c63 	cmnvs	r5, r3, ror #24
 13c:	6f630072 	svcvs	0x00630072
 140:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 144:	74730064 	ldrbtvc	r0, [r3], #-100	; 0xffffff9c
 148:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 14c:	65740070 	ldrbvs	r0, [r4, #-112]!	; 0xffffff90
 150:	00317473 	eorseq	r7, r1, r3, ror r4
 154:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 158:	73610032 	cmnvc	r1, #50	; 0x32
 15c:	5f696963 	svcpl	0x00696963
 160:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 164:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 168:	682f0064 	stmdavs	pc!, {r2, r5, r6}	; <UNPREDICTABLE>
 16c:	2f656d6f 	svccs	0x00656d6f
 170:	2f6d6f74 	svccs	0x006d6f74
 174:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 178:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 17c:	4f572f73 	svcmi	0x00572f73
 180:	4d2f4b52 	vstmdbmi	pc!, {d4-<overflow reg d44>}
 184:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 188:	724f656e 	subvc	r6, pc, #461373440	; 0x1b800000
 18c:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
 190:	72506465 	subsvc	r6, r0, #1694498816	; 0x65000000
 194:	6172676f 	cmnvs	r2, pc, ror #14
 198:	6e696d6d 	cdpvs	13, 6, cr6, cr9, cr13, {3}
 19c:	70752f67 	rsbsvc	r2, r5, r7, ror #30
 1a0:	5f373567 	svcpl	0x00373567
 1a4:	73610032 	cmnvc	r1, #50	; 0x32
 1a8:	5f696963 	svcpl	0x00696963
 1ac:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 1b0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 1b4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 1b8:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 1bc:	31314320 	teqcc	r1, r0, lsr #6
 1c0:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
 1c4:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 1c8:	30373130 	eorscc	r3, r7, r0, lsr r1
 1cc:	20343039 	eorscs	r3, r4, r9, lsr r0
 1d0:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 1d4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 1d8:	415b2029 	cmpmi	fp, r9, lsr #32
 1dc:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff492 <main+0xdffff136>
 1e0:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 1e4:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
 1e8:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
 1ec:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 1f0:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 1f4:	6f697369 	svcvs	0x00697369
 1f8:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
 1fc:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
 200:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 204:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 208:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 20c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 210:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 214:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 218:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 21c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 220:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 224:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 228:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
 22c:	304f2d20 	subcc	r2, pc, r0, lsr #26
 230:	63736100 	cmnvs	r3, #0, 2
 234:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 238:	0074696e 	rsbseq	r6, r4, lr, ror #18

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <main+0xdfffefb2>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x000000000000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000002c 	andeq	r0, r0, ip, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000003c 	andcs	r0, r0, ip, lsr r0
  48:	00000044 	andeq	r0, r0, r4, asr #32
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000080 	andcs	r0, r0, r0, lsl #1
  64:	0000002e 	andeq	r0, r0, lr, lsr #32
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	100e4101 	andne	r4, lr, r1, lsl #2
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000ae 	andcs	r0, r0, lr, lsr #1
  84:	00000022 	andeq	r0, r0, r2, lsr #32
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	100e4101 	andne	r4, lr, r1, lsl #2
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  a4:	00000030 	andeq	r0, r0, r0, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000100 	andcs	r0, r0, r0, lsl #2
  c4:	0000003c 	andeq	r0, r0, ip, lsr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	2000013c 	andcs	r0, r0, ip, lsr r1
  e4:	00000034 	andeq	r0, r0, r4, lsr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000170 	andcs	r0, r0, r0, ror r1
 104:	00000038 	andeq	r0, r0, r8, lsr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	00000020 	andeq	r0, r0, r0, lsr #32
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001a8 	andcs	r0, r0, r8, lsr #3
 124:	0000003c 	andeq	r0, r0, ip, lsr r0
 128:	400c0e41 	andmi	r0, ip, r1, asr #28
 12c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 130:	018e4002 	orreq	r4, lr, r2
 134:	41180e41 	tstmi	r8, r1, asr #28
 138:	0000070d 	andeq	r0, r0, sp, lsl #14
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	200001e4 	andcs	r0, r0, r4, ror #3
 148:	0000002a 	andeq	r0, r0, sl, lsr #32
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	2000020e 	andcs	r0, r0, lr, lsl #4
 168:	0000002a 	andeq	r0, r0, sl, lsr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	00000020 	andeq	r0, r0, r0, lsr #32
 180:	00000000 	andeq	r0, r0, r0
 184:	20000238 	andcs	r0, r0, r8, lsr r2
 188:	00000038 	andeq	r0, r0, r8, lsr r0
 18c:	400c0e41 	andmi	r0, ip, r1, asr #28
 190:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 194:	018e4002 	orreq	r4, lr, r2
 198:	41180e41 	tstmi	r8, r1, asr #28
 19c:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	20000270 	andcs	r0, r0, r0, ror r2
 1ac:	0000003c 	andeq	r0, r0, ip, lsr r0
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	100e4101 	andne	r4, lr, r1, lsl #2
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	00000018 	andeq	r0, r0, r8, lsl r0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	200002ac 	andcs	r0, r0, ip, lsr #5
 1cc:	00000022 	andeq	r0, r0, r2, lsr #32
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	200002ce 	andcs	r0, r0, lr, asr #5
 1e8:	00000058 	andeq	r0, r0, r8, asr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	20000326 	andcs	r0, r0, r6, lsr #6
 208:	00000036 	andeq	r0, r0, r6, lsr r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	100e4101 	andne	r4, lr, r1, lsl #2
 218:	00070d41 	andeq	r0, r7, r1, asr #26
 21c:	00000024 	andeq	r0, r0, r4, lsr #32
 220:	00000000 	andeq	r0, r0, r0
 224:	2000035c 	andcs	r0, r0, ip, asr r3
 228:	00000084 	andeq	r0, r0, r4, lsl #1
 22c:	40100e41 	andsmi	r0, r0, r1, asr #28
 230:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 234:	02874003 	addeq	r4, r7, #3
 238:	41018e40 	tstmi	r1, r0, asr #28
 23c:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 240:	00000007 	andeq	r0, r0, r7
