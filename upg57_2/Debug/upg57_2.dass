
./Debug/upg57_2.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f9ba 	bl	2000037c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
    *portOtyper =0x00000000;
2000001a:	4b06      	ldr	r3, [pc, #24]	; (20000034 <init_app+0x24>)
2000001c:	2200      	movs	r2, #0
2000001e:	601a      	str	r2, [r3, #0]
    *Ospeedr    =0x55555555;
20000020:	4b05      	ldr	r3, [pc, #20]	; (20000038 <init_app+0x28>)
20000022:	4a03      	ldr	r2, [pc, #12]	; (20000030 <init_app+0x20>)
20000024:	601a      	str	r2, [r3, #0]
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000034:	40021010 	andmi	r1, r2, r0, lsl r0
20000038:	40021020 	andmi	r1, r2, r0, lsr #32

2000003c <delay_250ns>:

void delay_250ns(void){
2000003c:	b580      	push	{r7, lr}
2000003e:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000040:	4b0c      	ldr	r3, [pc, #48]	; (20000074 <delay_250ns+0x38>)
20000042:	2200      	movs	r2, #0
20000044:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168/4)-1);
20000046:	4b0c      	ldr	r3, [pc, #48]	; (20000078 <delay_250ns+0x3c>)
20000048:	2229      	movs	r2, #41	; 0x29
2000004a:	601a      	str	r2, [r3, #0]
    *STK_VAL  = 0;
2000004c:	4b0b      	ldr	r3, [pc, #44]	; (2000007c <delay_250ns+0x40>)
2000004e:	2200      	movs	r2, #0
20000050:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000052:	4b08      	ldr	r3, [pc, #32]	; (20000074 <delay_250ns+0x38>)
20000054:	2205      	movs	r2, #5
20000056:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000)== 0){}
20000058:	46c0      	nop			; (mov r8, r8)
2000005a:	4b06      	ldr	r3, [pc, #24]	; (20000074 <delay_250ns+0x38>)
2000005c:	681a      	ldr	r2, [r3, #0]
2000005e:	2380      	movs	r3, #128	; 0x80
20000060:	025b      	lsls	r3, r3, #9
20000062:	4013      	ands	r3, r2
20000064:	d0f9      	beq.n	2000005a <delay_250ns+0x1e>
    *STK_CTRL = 0;
20000066:	4b03      	ldr	r3, [pc, #12]	; (20000074 <delay_250ns+0x38>)
20000068:	2200      	movs	r2, #0
2000006a:	601a      	str	r2, [r3, #0]
}
2000006c:	46c0      	nop			; (mov r8, r8)
2000006e:	46bd      	mov	sp, r7
20000070:	bd80      	pop	{r7, pc}
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	e000e010 	and	lr, r0, r0, lsl r0
20000078:	e000e014 	and	lr, r0, r4, lsl r0
2000007c:	e000e018 	and	lr, r0, r8, lsl r0

20000080 <delay_micro>:

void delay_micro(unsigned int us){
20000080:	b580      	push	{r7, lr}
20000082:	b082      	sub	sp, #8
20000084:	af00      	add	r7, sp, #0
20000086:	6078      	str	r0, [r7, #4]
    while(us > 0){
20000088:	e00a      	b.n	200000a0 <delay_micro+0x20>
        delay_250ns();
2000008a:	f7ff ffd7 	bl	2000003c <delay_250ns>
        delay_250ns();
2000008e:	f7ff ffd5 	bl	2000003c <delay_250ns>
        delay_250ns();
20000092:	f7ff ffd3 	bl	2000003c <delay_250ns>
        delay_250ns();
20000096:	f7ff ffd1 	bl	2000003c <delay_250ns>
        us--;
2000009a:	687b      	ldr	r3, [r7, #4]
2000009c:	3b01      	subs	r3, #1
2000009e:	607b      	str	r3, [r7, #4]
    while(us > 0){
200000a0:	687b      	ldr	r3, [r7, #4]
200000a2:	2b00      	cmp	r3, #0
200000a4:	d1f1      	bne.n	2000008a <delay_micro+0xa>
    }
}
200000a6:	46c0      	nop			; (mov r8, r8)
200000a8:	46bd      	mov	sp, r7
200000aa:	b002      	add	sp, #8
200000ac:	bd80      	pop	{r7, pc}

200000ae <delay_milli>:

void delay_milli(unsigned int ms){
200000ae:	b580      	push	{r7, lr}
200000b0:	b082      	sub	sp, #8
200000b2:	af00      	add	r7, sp, #0
200000b4:	6078      	str	r0, [r7, #4]

    while(ms--){
200000b6:	e002      	b.n	200000be <delay_milli+0x10>
        delay_micro(10);
200000b8:	200a      	movs	r0, #10
200000ba:	f7ff ffe1 	bl	20000080 <delay_micro>
    while(ms--){
200000be:	687b      	ldr	r3, [r7, #4]
200000c0:	1e5a      	subs	r2, r3, #1
200000c2:	607a      	str	r2, [r7, #4]
200000c4:	2b00      	cmp	r3, #0
200000c6:	d1f7      	bne.n	200000b8 <delay_milli+0xa>
    }
    
}
200000c8:	46c0      	nop			; (mov r8, r8)
200000ca:	46bd      	mov	sp, r7
200000cc:	b002      	add	sp, #8
200000ce:	bd80      	pop	{r7, pc}

200000d0 <ascii_ctrl_bit_set>:


void ascii_ctrl_bit_set( unsigned char x){
200000d0:	b580      	push	{r7, lr}
200000d2:	b084      	sub	sp, #16
200000d4:	af00      	add	r7, sp, #0
200000d6:	0002      	movs	r2, r0
200000d8:	1dfb      	adds	r3, r7, #7
200000da:	701a      	strb	r2, [r3, #0]
    unsigned char c;
    c = *portOdrLow;
200000dc:	4a0c      	ldr	r2, [pc, #48]	; (20000110 <ascii_ctrl_bit_set+0x40>)
200000de:	210f      	movs	r1, #15
200000e0:	187b      	adds	r3, r7, r1
200000e2:	7812      	ldrb	r2, [r2, #0]
200000e4:	701a      	strb	r2, [r3, #0]
    c |= (B_SELECT | x);
200000e6:	1dfa      	adds	r2, r7, #7
200000e8:	187b      	adds	r3, r7, r1
200000ea:	7812      	ldrb	r2, [r2, #0]
200000ec:	781b      	ldrb	r3, [r3, #0]
200000ee:	4313      	orrs	r3, r2
200000f0:	b2da      	uxtb	r2, r3
200000f2:	0008      	movs	r0, r1
200000f4:	187b      	adds	r3, r7, r1
200000f6:	2104      	movs	r1, #4
200000f8:	430a      	orrs	r2, r1
200000fa:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
200000fc:	4a04      	ldr	r2, [pc, #16]	; (20000110 <ascii_ctrl_bit_set+0x40>)
200000fe:	0001      	movs	r1, r0
20000100:	187b      	adds	r3, r7, r1
20000102:	781b      	ldrb	r3, [r3, #0]
20000104:	7013      	strb	r3, [r2, #0]
}
20000106:	46c0      	nop			; (mov r8, r8)
20000108:	46bd      	mov	sp, r7
2000010a:	b004      	add	sp, #16
2000010c:	bd80      	pop	{r7, pc}
2000010e:	46c0      	nop			; (mov r8, r8)
20000110:	40021014 	andmi	r1, r2, r4, lsl r0

20000114 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000114:	b580      	push	{r7, lr}
20000116:	b084      	sub	sp, #16
20000118:	af00      	add	r7, sp, #0
2000011a:	0002      	movs	r2, r0
2000011c:	1dfb      	adds	r3, r7, #7
2000011e:	701a      	strb	r2, [r3, #0]
    unsigned char c;
    c = *portOdrLow;
20000120:	4a0d      	ldr	r2, [pc, #52]	; (20000158 <ascii_ctrl_bit_clear+0x44>)
20000122:	210f      	movs	r1, #15
20000124:	187b      	adds	r3, r7, r1
20000126:	7812      	ldrb	r2, [r2, #0]
20000128:	701a      	strb	r2, [r3, #0]
    c &= (B_SELECT | ~x);
2000012a:	1dfb      	adds	r3, r7, #7
2000012c:	781b      	ldrb	r3, [r3, #0]
2000012e:	b25b      	sxtb	r3, r3
20000130:	43db      	mvns	r3, r3
20000132:	b25b      	sxtb	r3, r3
20000134:	2204      	movs	r2, #4
20000136:	4313      	orrs	r3, r2
20000138:	b25b      	sxtb	r3, r3
2000013a:	187a      	adds	r2, r7, r1
2000013c:	7812      	ldrb	r2, [r2, #0]
2000013e:	b252      	sxtb	r2, r2
20000140:	4013      	ands	r3, r2
20000142:	b25a      	sxtb	r2, r3
20000144:	187b      	adds	r3, r7, r1
20000146:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
20000148:	4a03      	ldr	r2, [pc, #12]	; (20000158 <ascii_ctrl_bit_clear+0x44>)
2000014a:	187b      	adds	r3, r7, r1
2000014c:	781b      	ldrb	r3, [r3, #0]
2000014e:	7013      	strb	r3, [r2, #0]
}
20000150:	46c0      	nop			; (mov r8, r8)
20000152:	46bd      	mov	sp, r7
20000154:	b004      	add	sp, #16
20000156:	bd80      	pop	{r7, pc}
20000158:	40021014 	andmi	r1, r2, r4, lsl r0

2000015c <ascii_read_controller>:

unsigned char ascii_read_controller( void ){
2000015c:	b580      	push	{r7, lr}
2000015e:	b082      	sub	sp, #8
20000160:	af00      	add	r7, sp, #0
    unsigned char c;
    ascii_ctrl_bit_set( B_E );
20000162:	2040      	movs	r0, #64	; 0x40
20000164:	f7ff ffb4 	bl	200000d0 <ascii_ctrl_bit_set>
    delay_250ns();
20000168:	f7ff ff68 	bl	2000003c <delay_250ns>
    delay_250ns();
2000016c:	f7ff ff66 	bl	2000003c <delay_250ns>
    c = *portIdrHigh;
20000170:	4a06      	ldr	r2, [pc, #24]	; (2000018c <ascii_read_controller+0x30>)
20000172:	1dfb      	adds	r3, r7, #7
20000174:	7812      	ldrb	r2, [r2, #0]
20000176:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear( B_E );
20000178:	2040      	movs	r0, #64	; 0x40
2000017a:	f7ff ffcb 	bl	20000114 <ascii_ctrl_bit_clear>
    return c;   
2000017e:	1dfb      	adds	r3, r7, #7
20000180:	781b      	ldrb	r3, [r3, #0]
}
20000182:	0018      	movs	r0, r3
20000184:	46bd      	mov	sp, r7
20000186:	b002      	add	sp, #8
20000188:	bd80      	pop	{r7, pc}
2000018a:	46c0      	nop			; (mov r8, r8)
2000018c:	40021010 	andmi	r1, r2, r0, lsl r0

20000190 <ascii_write_controller>:

void ascii_write_controller( unsigned char c ){
20000190:	b580      	push	{r7, lr}
20000192:	b082      	sub	sp, #8
20000194:	af00      	add	r7, sp, #0
20000196:	0002      	movs	r2, r0
20000198:	1dfb      	adds	r3, r7, #7
2000019a:	701a      	strb	r2, [r3, #0]
	delay_250ns();
2000019c:	f7ff ff4e 	bl	2000003c <delay_250ns>
    ascii_ctrl_bit_set( B_E );   // Synchronization signal =1
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff95 	bl	200000d0 <ascii_ctrl_bit_set>
    *portOdrHigh = c;            // Ger kommandot till porten
200001a6:	4a07      	ldr	r2, [pc, #28]	; (200001c4 <ascii_write_controller+0x34>)
200001a8:	1dfb      	adds	r3, r7, #7
200001aa:	781b      	ldrb	r3, [r3, #0]
200001ac:	7013      	strb	r3, [r2, #0]
    delay_250ns();
200001ae:	f7ff ff45 	bl	2000003c <delay_250ns>
    ascii_ctrl_bit_clear( B_E ); // St√§nger av synchronizatoin.
200001b2:	2040      	movs	r0, #64	; 0x40
200001b4:	f7ff ffae 	bl	20000114 <ascii_ctrl_bit_clear>
    delay_250ns();
200001b8:	f7ff ff40 	bl	2000003c <delay_250ns>
}
200001bc:	46c0      	nop			; (mov r8, r8)
200001be:	46bd      	mov	sp, r7
200001c0:	b002      	add	sp, #8
200001c2:	bd80      	pop	{r7, pc}
200001c4:	40021015 	andmi	r1, r2, r5, lsl r0

200001c8 <ascii_read_status>:

unsigned char ascii_read_status(){
200001c8:	b590      	push	{r4, r7, lr}
200001ca:	b083      	sub	sp, #12
200001cc:	af00      	add	r7, sp, #0
    unsigned char c;
    *portModer = 0x0000;   //G√ñR OM PORTEN TILL ING√ÖNGAR
200001ce:	4b0b      	ldr	r3, [pc, #44]	; (200001fc <ascii_read_status+0x34>)
200001d0:	2200      	movs	r2, #0
200001d2:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set( B_RW );   // ETT ST√ÑLL READ/WRITE
200001d4:	2002      	movs	r0, #2
200001d6:	f7ff ff7b 	bl	200000d0 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear( B_RS );  //NOLLST√ÑLL READ/ SET
200001da:	2001      	movs	r0, #1
200001dc:	f7ff ff9a 	bl	20000114 <ascii_ctrl_bit_clear>
    c = ascii_read_controller( );
200001e0:	1dfc      	adds	r4, r7, #7
200001e2:	f7ff ffbb 	bl	2000015c <ascii_read_controller>
200001e6:	0003      	movs	r3, r0
200001e8:	7023      	strb	r3, [r4, #0]
    *portModer = 0x5555;    //G√ñR OM PORTEN TILL UTG√ÖNGAR
200001ea:	4b04      	ldr	r3, [pc, #16]	; (200001fc <ascii_read_status+0x34>)
200001ec:	4a04      	ldr	r2, [pc, #16]	; (20000200 <ascii_read_status+0x38>)
200001ee:	601a      	str	r2, [r3, #0]
return c;
200001f0:	1dfb      	adds	r3, r7, #7
200001f2:	781b      	ldrb	r3, [r3, #0]
}
200001f4:	0018      	movs	r0, r3
200001f6:	46bd      	mov	sp, r7
200001f8:	b003      	add	sp, #12
200001fa:	bd90      	pop	{r4, r7, pc}
200001fc:	40021000 	andmi	r1, r2, r0
20000200:	00005555 	andeq	r5, r0, r5, asr r5

20000204 <ascii_write_cmd>:

void ascii_write_cmd ( unsigned char command){
20000204:	b580      	push	{r7, lr}
20000206:	b082      	sub	sp, #8
20000208:	af00      	add	r7, sp, #0
2000020a:	0002      	movs	r2, r0
2000020c:	1dfb      	adds	r3, r7, #7
2000020e:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
20000210:	2001      	movs	r0, #1
20000212:	f7ff ff7f 	bl	20000114 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
20000216:	2002      	movs	r0, #2
20000218:	f7ff ff7c 	bl	20000114 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
2000021c:	1dfb      	adds	r3, r7, #7
2000021e:	781b      	ldrb	r3, [r3, #0]
20000220:	0018      	movs	r0, r3
20000222:	f7ff ffb5 	bl	20000190 <ascii_write_controller>
}
20000226:	46c0      	nop			; (mov r8, r8)
20000228:	46bd      	mov	sp, r7
2000022a:	b002      	add	sp, #8
2000022c:	bd80      	pop	{r7, pc}

2000022e <ascii_write_data>:

void ascii_write_data (unsigned char data){
2000022e:	b580      	push	{r7, lr}
20000230:	b082      	sub	sp, #8
20000232:	af00      	add	r7, sp, #0
20000234:	0002      	movs	r2, r0
20000236:	1dfb      	adds	r3, r7, #7
20000238:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RW);
2000023a:	2002      	movs	r0, #2
2000023c:	f7ff ff6a 	bl	20000114 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RS);
20000240:	2001      	movs	r0, #1
20000242:	f7ff ff45 	bl	200000d0 <ascii_ctrl_bit_set>
    ascii_write_controller(data);
20000246:	1dfb      	adds	r3, r7, #7
20000248:	781b      	ldrb	r3, [r3, #0]
2000024a:	0018      	movs	r0, r3
2000024c:	f7ff ffa0 	bl	20000190 <ascii_write_controller>
}
20000250:	46c0      	nop			; (mov r8, r8)
20000252:	46bd      	mov	sp, r7
20000254:	b002      	add	sp, #8
20000256:	bd80      	pop	{r7, pc}

20000258 <ascii_read_data>:

void ascii_read_data(void){
20000258:	b590      	push	{r4, r7, lr}
2000025a:	b083      	sub	sp, #12
2000025c:	af00      	add	r7, sp, #0
    unsigned char c;
    *portModer = 0x0000;
2000025e:	4b0a      	ldr	r3, [pc, #40]	; (20000288 <ascii_read_data+0x30>)
20000260:	2200      	movs	r2, #0
20000262:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000264:	2001      	movs	r0, #1
20000266:	f7ff ff33 	bl	200000d0 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
2000026a:	2002      	movs	r0, #2
2000026c:	f7ff ff30 	bl	200000d0 <ascii_ctrl_bit_set>
    c = ascii_read_controller();
20000270:	1dfc      	adds	r4, r7, #7
20000272:	f7ff ff73 	bl	2000015c <ascii_read_controller>
20000276:	0003      	movs	r3, r0
20000278:	7023      	strb	r3, [r4, #0]
    *portModer = 0x5555;
2000027a:	4b03      	ldr	r3, [pc, #12]	; (20000288 <ascii_read_data+0x30>)
2000027c:	4a03      	ldr	r2, [pc, #12]	; (2000028c <ascii_read_data+0x34>)
2000027e:	601a      	str	r2, [r3, #0]
    return c;
20000280:	46c0      	nop			; (mov r8, r8)
}
20000282:	46bd      	mov	sp, r7
20000284:	b003      	add	sp, #12
20000286:	bd90      	pop	{r4, r7, pc}
20000288:	40021000 	andmi	r1, r2, r0
2000028c:	00005555 	andeq	r5, r0, r5, asr r5

20000290 <ascii_clear_cmd>:
void ascii_clear_cmd(unsigned char cmd){
20000290:	b580      	push	{r7, lr}
20000292:	b082      	sub	sp, #8
20000294:	af00      	add	r7, sp, #0
20000296:	0002      	movs	r2, r0
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	701a      	strb	r2, [r3, #0]
    while((ascii_read_status() & 0x80) == 0x80){
2000029c:	e00a      	b.n	200002b4 <ascii_clear_cmd+0x24>
        delay_micro(8);
2000029e:	2008      	movs	r0, #8
200002a0:	f7ff feee 	bl	20000080 <delay_micro>
        ascii_write_cmd(cmd);
200002a4:	1dfb      	adds	r3, r7, #7
200002a6:	781b      	ldrb	r3, [r3, #0]
200002a8:	0018      	movs	r0, r3
200002aa:	f7ff ffab 	bl	20000204 <ascii_write_cmd>
        delay_milli(2);
200002ae:	2002      	movs	r0, #2
200002b0:	f7ff fefd 	bl	200000ae <delay_milli>
    while((ascii_read_status() & 0x80) == 0x80){
200002b4:	f7ff ff88 	bl	200001c8 <ascii_read_status>
200002b8:	0003      	movs	r3, r0
200002ba:	001a      	movs	r2, r3
200002bc:	2380      	movs	r3, #128	; 0x80
200002be:	4013      	ands	r3, r2
200002c0:	2b80      	cmp	r3, #128	; 0x80
200002c2:	d0ec      	beq.n	2000029e <ascii_clear_cmd+0xe>
    }
}
200002c4:	46c0      	nop			; (mov r8, r8)
200002c6:	46bd      	mov	sp, r7
200002c8:	b002      	add	sp, #8
200002ca:	bd80      	pop	{r7, pc}

200002cc <ascii_init>:

void ascii_init(void){
200002cc:	b580      	push	{r7, lr}
200002ce:	af00      	add	r7, sp, #0
    ascii_write_cmd(0x38);
200002d0:	2038      	movs	r0, #56	; 0x38
200002d2:	f7ff ff97 	bl	20000204 <ascii_write_cmd>
    ascii_write_cmd(0x0E);
200002d6:	200e      	movs	r0, #14
200002d8:	f7ff ff94 	bl	20000204 <ascii_write_cmd>
    ascii_clear_cmd(0x01);
200002dc:	2001      	movs	r0, #1
200002de:	f7ff ffd7 	bl	20000290 <ascii_clear_cmd>
    ascii_write_cmd(0x04);
200002e2:	2004      	movs	r0, #4
200002e4:	f7ff ff8e 	bl	20000204 <ascii_write_cmd>

}
200002e8:	46c0      	nop			; (mov r8, r8)
200002ea:	46bd      	mov	sp, r7
200002ec:	bd80      	pop	{r7, pc}

200002ee <ascii_gotoxy>:


void ascii_gotoxy( unsigned int x, unsigned int y) {
200002ee:	b580      	push	{r7, lr}
200002f0:	b084      	sub	sp, #16
200002f2:	af00      	add	r7, sp, #0
200002f4:	6078      	str	r0, [r7, #4]
200002f6:	6039      	str	r1, [r7, #0]
    unsigned char address = x-1;
200002f8:	687b      	ldr	r3, [r7, #4]
200002fa:	b2da      	uxtb	r2, r3
200002fc:	230f      	movs	r3, #15
200002fe:	18fb      	adds	r3, r7, r3
20000300:	3a01      	subs	r2, #1
20000302:	701a      	strb	r2, [r3, #0]
    if(y != 1){
20000304:	683b      	ldr	r3, [r7, #0]
20000306:	2b01      	cmp	r3, #1
20000308:	d00c      	beq.n	20000324 <ascii_gotoxy+0x36>
        address +=0x40 | (x-1);
2000030a:	687b      	ldr	r3, [r7, #4]
2000030c:	b2db      	uxtb	r3, r3
2000030e:	3b01      	subs	r3, #1
20000310:	b2db      	uxtb	r3, r3
20000312:	2240      	movs	r2, #64	; 0x40
20000314:	4313      	orrs	r3, r2
20000316:	b2d9      	uxtb	r1, r3
20000318:	220f      	movs	r2, #15
2000031a:	18bb      	adds	r3, r7, r2
2000031c:	18ba      	adds	r2, r7, r2
2000031e:	7812      	ldrb	r2, [r2, #0]
20000320:	188a      	adds	r2, r1, r2
20000322:	701a      	strb	r2, [r3, #0]
} 
    ascii_write_cmd( 0x80 | address);
20000324:	230f      	movs	r3, #15
20000326:	18fb      	adds	r3, r7, r3
20000328:	781b      	ldrb	r3, [r3, #0]
2000032a:	2280      	movs	r2, #128	; 0x80
2000032c:	4252      	negs	r2, r2
2000032e:	4313      	orrs	r3, r2
20000330:	b2db      	uxtb	r3, r3
20000332:	0018      	movs	r0, r3
20000334:	f7ff ff66 	bl	20000204 <ascii_write_cmd>
    delay_micro(45);
20000338:	202d      	movs	r0, #45	; 0x2d
2000033a:	f7ff fea1 	bl	20000080 <delay_micro>
}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	46bd      	mov	sp, r7
20000342:	b004      	add	sp, #16
20000344:	bd80      	pop	{r7, pc}

20000346 <ascii_write_char>:

void ascii_write_char( unsigned char c){
20000346:	b580      	push	{r7, lr}
20000348:	b082      	sub	sp, #8
2000034a:	af00      	add	r7, sp, #0
2000034c:	0002      	movs	r2, r0
2000034e:	1dfb      	adds	r3, r7, #7
20000350:	701a      	strb	r2, [r3, #0]
    while((ascii_read_status() & 0x80) == 0x80){
20000352:	e007      	b.n	20000364 <ascii_write_char+0x1e>
        delay_micro(8);
20000354:	2008      	movs	r0, #8
20000356:	f7ff fe93 	bl	20000080 <delay_micro>
        ascii_write_data(c);
2000035a:	1dfb      	adds	r3, r7, #7
2000035c:	781b      	ldrb	r3, [r3, #0]
2000035e:	0018      	movs	r0, r3
20000360:	f7ff ff65 	bl	2000022e <ascii_write_data>
    while((ascii_read_status() & 0x80) == 0x80){
20000364:	f7ff ff30 	bl	200001c8 <ascii_read_status>
20000368:	0003      	movs	r3, r0
2000036a:	001a      	movs	r2, r3
2000036c:	2380      	movs	r3, #128	; 0x80
2000036e:	4013      	ands	r3, r2
20000370:	2b80      	cmp	r3, #128	; 0x80
20000372:	d0ef      	beq.n	20000354 <ascii_write_char+0xe>
    }
    
}
20000374:	46c0      	nop			; (mov r8, r8)
20000376:	46bd      	mov	sp, r7
20000378:	b002      	add	sp, #8
2000037a:	bd80      	pop	{r7, pc}

2000037c <main>:

void main(void){
2000037c:	b5b0      	push	{r4, r5, r7, lr}
2000037e:	b08a      	sub	sp, #40	; 0x28
20000380:	af00      	add	r7, sp, #0
    char *s;
    char test1[] = "Alfanumerisk";
20000382:	2414      	movs	r4, #20
20000384:	193b      	adds	r3, r7, r4
20000386:	4a1c      	ldr	r2, [pc, #112]	; (200003f8 <main+0x7c>)
20000388:	ca23      	ldmia	r2!, {r0, r1, r5}
2000038a:	c323      	stmia	r3!, {r0, r1, r5}
2000038c:	7812      	ldrb	r2, [r2, #0]
2000038e:	701a      	strb	r2, [r3, #0]
    char test2[] = "Display - test";
20000390:	1d3b      	adds	r3, r7, #4
20000392:	4a1a      	ldr	r2, [pc, #104]	; (200003fc <main+0x80>)
20000394:	ca23      	ldmia	r2!, {r0, r1, r5}
20000396:	c323      	stmia	r3!, {r0, r1, r5}
20000398:	8811      	ldrh	r1, [r2, #0]
2000039a:	8019      	strh	r1, [r3, #0]
2000039c:	7892      	ldrb	r2, [r2, #2]
2000039e:	709a      	strb	r2, [r3, #2]
    
    init_app();
200003a0:	f7ff fe36 	bl	20000010 <init_app>
    ascii_init();
200003a4:	f7ff ff92 	bl	200002cc <ascii_init>
    ascii_gotoxy(1,1);
200003a8:	2101      	movs	r1, #1
200003aa:	2001      	movs	r0, #1
200003ac:	f7ff ff9f 	bl	200002ee <ascii_gotoxy>
    s = test1;
200003b0:	193b      	adds	r3, r7, r4
200003b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (*s){
200003b4:	e006      	b.n	200003c4 <main+0x48>
        ascii_write_char( *s ++);
200003b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003b8:	1c5a      	adds	r2, r3, #1
200003ba:	627a      	str	r2, [r7, #36]	; 0x24
200003bc:	781b      	ldrb	r3, [r3, #0]
200003be:	0018      	movs	r0, r3
200003c0:	f7ff ffc1 	bl	20000346 <ascii_write_char>
    while (*s){
200003c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003c6:	781b      	ldrb	r3, [r3, #0]
200003c8:	2b00      	cmp	r3, #0
200003ca:	d1f4      	bne.n	200003b6 <main+0x3a>
    }
    ascii_gotoxy(1,2);
200003cc:	2102      	movs	r1, #2
200003ce:	2001      	movs	r0, #1
200003d0:	f7ff ff8d 	bl	200002ee <ascii_gotoxy>
    s = test2;
200003d4:	1d3b      	adds	r3, r7, #4
200003d6:	627b      	str	r3, [r7, #36]	; 0x24
    while(*s){
200003d8:	e006      	b.n	200003e8 <main+0x6c>
        ascii_write_char(*s++);
200003da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003dc:	1c5a      	adds	r2, r3, #1
200003de:	627a      	str	r2, [r7, #36]	; 0x24
200003e0:	781b      	ldrb	r3, [r3, #0]
200003e2:	0018      	movs	r0, r3
200003e4:	f7ff ffaf 	bl	20000346 <ascii_write_char>
    while(*s){
200003e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003ea:	781b      	ldrb	r3, [r3, #0]
200003ec:	2b00      	cmp	r3, #0
200003ee:	d1f4      	bne.n	200003da <main+0x5e>
    }
200003f0:	46c0      	nop			; (mov r8, r8)
200003f2:	46bd      	mov	sp, r7
200003f4:	b00a      	add	sp, #40	; 0x28
200003f6:	bdb0      	pop	{r4, r5, r7, pc}
200003f8:	20000400 	andcs	r0, r0, r0, lsl #8
200003fc:	20000410 	andcs	r0, r0, r0, lsl r4
20000400:	61666c41 	cmnvs	r6, r1, asr #24
20000404:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
20000408:	6b736972 	blvs	21cda9d8 <main+0x1cda65c>
2000040c:	00000000 	andeq	r0, r0, r0
20000410:	70736944 	rsbsvc	r6, r3, r4, asr #18
20000414:	2079616c 	rsbscs	r6, r9, ip, ror #2
20000418:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0xffffffd3
2000041c:	00007473 	andeq	r7, r0, r3, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000002db 	ldrdeq	r0, [r0], -fp
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000183 	andeq	r0, r0, r3, lsl #3
  10:	0001190c 	andeq	r1, r1, ip, lsl #18
  14:	00007e00 	andeq	r7, r0, r0, lsl #28
	...
  24:	01140200 	tsteq	r4, r0, lsl #4
  28:	ac010000 	stcge	0, cr0, [r1], {-0}
  2c:	2000037c 	andcs	r0, r0, ip, ror r3
  30:	00000084 	andeq	r0, r0, r4, lsl #1
  34:	00639c01 	rsbeq	r9, r3, r1, lsl #24
  38:	73030000 	movwvc	r0, #12288	; 0x3000
  3c:	63ad0100 			; <UNDEFINED> instruction: 0x63ad0100
  40:	02000000 	andeq	r0, r0, #0
  44:	54046c91 	strpl	r6, [r4], #-3217	; 0xfffff36f
  48:	01000001 	tsteq	r0, r1
  4c:	000070ae 	andeq	r7, r0, lr, lsr #1
  50:	5c910200 	lfmpl	f0, 4, [r1], {0}
  54:	00015a04 	andeq	r5, r1, r4, lsl #20
  58:	87af0100 	strhi	r0, [pc, r0, lsl #2]!
  5c:	02000000 	andeq	r0, r0, #0
  60:	05004c91 	streq	r4, [r0, #-3217]	; 0xfffff36f
  64:	00006904 	andeq	r6, r0, r4, lsl #18
  68:	08010600 	stmdaeq	r1, {r9, sl}
  6c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
  70:	00006907 	andeq	r6, r0, r7, lsl #18
  74:	00008000 	andeq	r8, r0, r0
  78:	00800800 	addeq	r0, r0, r0, lsl #16
  7c:	000c0000 	andeq	r0, ip, r0
  80:	19070406 	stmdbne	r7, {r1, r2, sl}
  84:	07000000 	streq	r0, [r0, -r0]
  88:	00000069 	andeq	r0, r0, r9, rrx
  8c:	00000097 	muleq	r0, r7, r0
  90:	00008008 	andeq	r8, r0, r8
  94:	02000e00 	andeq	r0, r0, #0, 28
  98:	0000005b 	andeq	r0, r0, fp, asr r0
  9c:	0346a401 	movteq	sl, #25601	; 0x6401
  a0:	00362000 	eorseq	r2, r6, r0
  a4:	9c010000 	stcls	0, cr0, [r1], {-0}
  a8:	000000b9 	strheq	r0, [r0], -r9
  ac:	01006309 	tsteq	r0, r9, lsl #6
  b0:	0000b9a4 	andeq	fp, r0, r4, lsr #19
  b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  b8:	08010600 	stmdaeq	r1, {r9, sl}
  bc:	000000f6 	strdeq	r0, [r0], -r6
  c0:	00000c02 	andeq	r0, r0, r2, lsl #24
  c4:	ee9b0100 	fmle	f0, f3, f0
  c8:	58200002 	stmdapl	r0!, {r1}
  cc:	01000000 	mrseq	r0, (UNDEF: 0)
  d0:	0000fc9c 	muleq	r0, ip, ip
  d4:	00780900 	rsbseq	r0, r8, r0, lsl #18
  d8:	00809b01 	addeq	r9, r0, r1, lsl #22
  dc:	91020000 	mrsls	r0, (UNDEF: 2)
  e0:	0079096c 	rsbseq	r0, r9, ip, ror #18
  e4:	00809b01 	addeq	r9, r0, r1, lsl #22
  e8:	91020000 	mrsls	r0, (UNDEF: 2)
  ec:	00bc0468 	adcseq	r0, ip, r8, ror #8
  f0:	9c010000 	stcls	0, cr0, [r1], {-0}
  f4:	000000b9 	strheq	r0, [r0], -r9
  f8:	00779102 	rsbseq	r9, r7, r2, lsl #2
  fc:	0001fb0a 	andeq	pc, r1, sl, lsl #22
 100:	cc920100 	ldfgts	f0, [r2], {0}
 104:	22200002 	eorcs	r0, r0, #2
 108:	01000000 	mrseq	r0, (UNDEF: 0)
 10c:	0104029c 			; <UNDEFINED> instruction: 0x0104029c
 110:	8a010000 	bhi	40118 <startup-0x1ffbfee8>
 114:	20000290 	mulcs	r0, r0, r2
 118:	0000003c 	andeq	r0, r0, ip, lsr r0
 11c:	01319c01 	teqeq	r1, r1, lsl #24
 120:	63090000 	movwvs	r0, #36864	; 0x9000
 124:	0100646d 	tsteq	r0, sp, ror #8
 128:	0000b98a 	andeq	fp, r0, sl, lsl #19
 12c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 130:	00da0200 	sbcseq	r0, sl, r0, lsl #4
 134:	81010000 	mrshi	r0, (UNDEF: 1)
 138:	20000258 	andcs	r0, r0, r8, asr r2
 13c:	00000038 	andeq	r0, r0, r8, lsr r0
 140:	01539c01 	cmpeq	r3, r1, lsl #24
 144:	63030000 	movwvs	r0, #12288	; 0x3000
 148:	b9820100 	stmiblt	r2, {r8}
 14c:	02000000 	andeq	r0, r0, #0
 150:	02006f91 	andeq	r6, r0, #580	; 0x244
 154:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 158:	022e7b01 	eoreq	r7, lr, #1024	; 0x400
 15c:	002a2000 	eoreq	r2, sl, r0
 160:	9c010000 	stcls	0, cr0, [r1], {-0}
 164:	00000177 	andeq	r0, r0, r7, ror r1
 168:	0000e50b 	andeq	lr, r0, fp, lsl #10
 16c:	b97b0100 	ldmdblt	fp!, {r8}^
 170:	02000000 	andeq	r0, r0, #0
 174:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 178:	00000160 	andeq	r0, r0, r0, ror #2
 17c:	02047501 	andeq	r7, r4, #4194304	; 0x400000
 180:	002a2000 	eoreq	r2, sl, r0
 184:	9c010000 	stcls	0, cr0, [r1], {-0}
 188:	0000019b 	muleq	r0, fp, r1
 18c:	0001440b 	andeq	r4, r1, fp, lsl #8
 190:	b9750100 	ldmdblt	r5!, {r8}^
 194:	02000000 	andeq	r0, r0, #0
 198:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
 19c:	0000006c 	andeq	r0, r0, ip, rrx
 1a0:	00b96b01 	adcseq	r6, r9, r1, lsl #22
 1a4:	01c80000 	biceq	r0, r8, r0
 1a8:	003c2000 	eorseq	r2, ip, r0
 1ac:	9c010000 	stcls	0, cr0, [r1], {-0}
 1b0:	000001c1 	andeq	r0, r0, r1, asr #3
 1b4:	01006303 	tsteq	r0, r3, lsl #6
 1b8:	0000b96c 	andeq	fp, r0, ip, ror #18
 1bc:	6f910200 	svcvs	0x00910200
 1c0:	003b0200 	eorseq	r0, fp, r0, lsl #4
 1c4:	62010000 	andvs	r0, r1, #0
 1c8:	20000190 	mulcs	r0, r0, r1
 1cc:	00000038 	andeq	r0, r0, r8, lsr r0
 1d0:	01e39c01 	mvneq	r9, r1, lsl #24
 1d4:	63090000 	movwvs	r0, #36864	; 0x9000
 1d8:	b9620100 	stmdblt	r2!, {r8}^
 1dc:	02000000 	andeq	r0, r0, #0
 1e0:	0d007791 	stceq	7, cr7, [r0, #-580]	; 0xfffffdbc
 1e4:	000000c4 	andeq	r0, r0, r4, asr #1
 1e8:	00b95801 	adcseq	r5, r9, r1, lsl #16
 1ec:	015c0000 	cmpeq	ip, r0
 1f0:	00342000 	eorseq	r2, r4, r0
 1f4:	9c010000 	stcls	0, cr0, [r1], {-0}
 1f8:	00000209 	andeq	r0, r0, r9, lsl #4
 1fc:	01006303 	tsteq	r0, r3, lsl #6
 200:	0000b959 	andeq	fp, r0, r9, asr r9
 204:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 208:	00260e00 	eoreq	r0, r6, r0, lsl #28
 20c:	51010000 	mrspl	r0, (UNDEF: 1)
 210:	20000114 	andcs	r0, r0, r4, lsl r1
 214:	00000048 	andeq	r0, r0, r8, asr #32
 218:	02379c01 	eorseq	r9, r7, #256	; 0x100
 21c:	78090000 	stmdavc	r9, {}	; <UNPREDICTABLE>
 220:	b9510100 	ldmdblt	r1, {r8}^
 224:	02000000 	andeq	r0, r0, #0
 228:	63036f91 	movwvs	r6, #16273	; 0x3f91
 22c:	b9520100 	ldmdblt	r2, {r8}^
 230:	02000000 	andeq	r0, r0, #0
 234:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 238:	00000170 	andeq	r0, r0, r0, ror r1
 23c:	00d04a01 	sbcseq	r4, r0, r1, lsl #20
 240:	00442000 	subeq	r2, r4, r0
 244:	9c010000 	stcls	0, cr0, [r1], {-0}
 248:	00000265 	andeq	r0, r0, r5, ror #4
 24c:	01007809 	tsteq	r0, r9, lsl #16
 250:	0000b94a 	andeq	fp, r0, sl, asr #18
 254:	6f910200 	svcvs	0x00910200
 258:	01006303 	tsteq	r0, r3, lsl #6
 25c:	0000b94b 	andeq	fp, r0, fp, asr #18
 260:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 264:	00000200 	andeq	r0, r0, r0, lsl #4
 268:	41010000 	mrsmi	r0, (UNDEF: 1)
 26c:	200000ae 	andcs	r0, r0, lr, lsr #1
 270:	00000022 	andeq	r0, r0, r2, lsr #32
 274:	02889c01 	addeq	r9, r8, #256	; 0x100
 278:	6d090000 	stcvs	0, cr0, [r9, #-0]
 27c:	41010073 	tstmi	r1, r3, ror r0
 280:	00000080 	andeq	r0, r0, r0, lsl #1
 284:	00749102 	rsbseq	r9, r4, r2, lsl #2
 288:	0000ea02 	andeq	lr, r0, r2, lsl #20
 28c:	80370100 	eorshi	r0, r7, r0, lsl #2
 290:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 294:	01000000 	mrseq	r0, (UNDEF: 0)
 298:	0002ab9c 	muleq	r2, ip, fp
 29c:	73750900 	cmnvc	r5, #0, 18
 2a0:	80370100 	eorshi	r0, r7, r0, lsl #2
 2a4:	02000000 	andeq	r0, r0, #0
 2a8:	0f007491 	svceq	0x00007491
 2ac:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 2b0:	003c2e01 	eorseq	r2, ip, r1, lsl #28
 2b4:	00442000 	subeq	r2, r4, r0
 2b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 2bc:	00005210 	andeq	r5, r0, r0, lsl r2
 2c0:	10280100 	eorne	r0, r8, r0, lsl #2
 2c4:	2c200000 	stccs	0, cr0, [r0], #-0
 2c8:	01000000 	mrseq	r0, (UNDEF: 0)
 2cc:	014c0f9c 			; <UNDEFINED> instruction: 0x014c0f9c
 2d0:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
 2d4:	20000000 	andcs	r0, r0, r0
 2d8:	0000000c 	andeq	r0, r0, ip
 2dc:	Address 0x00000000000002dc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  20:	06120111 			; <UNDEFINED> instruction: 0x06120111
  24:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  28:	00130119 	andseq	r0, r3, r9, lsl r1
  2c:	00340300 	eorseq	r0, r4, r0, lsl #6
  30:	0b3a0803 	bleq	e82044 <startup-0x1f17dfbc>
  34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  38:	00001802 	andeq	r1, r0, r2, lsl #16
  3c:	03003404 	movweq	r3, #1028	; 0x404
  40:	3b0b3a0e 	blcc	2ce880 <startup-0x1fd31780>
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0b0b000f 	bleq	2c0090 <startup-0x1fd3ff70>
  50:	00001349 	andeq	r1, r0, r9, asr #6
  54:	0b002406 	bleq	9074 <startup-0x1fff6f8c>
  58:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  5c:	0700000e 	streq	r0, [r0, -lr]
  60:	13490101 	movtne	r0, #37121	; 0x9101
  64:	00001301 	andeq	r1, r0, r1, lsl #6
  68:	49002108 	stmdbmi	r0, {r3, r8, sp}
  6c:	000b2f13 	andeq	r2, fp, r3, lsl pc
  70:	00050900 	andeq	r0, r5, r0, lsl #18
  74:	0b3a0803 	bleq	e82088 <startup-0x1f17df78>
  78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  7c:	00001802 	andeq	r1, r0, r2, lsl #16
  80:	3f002e0a 	svccc	0x00002e0a
  84:	3a0e0319 	bcc	380cf0 <startup-0x1fc7f310>
  88:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  8c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  90:	96184006 	ldrls	r4, [r8], -r6
  94:	00001942 	andeq	r1, r0, r2, asr #18
  98:	0300050b 	movweq	r0, #1291	; 0x50b
  9c:	3b0b3a0e 	blcc	2ce8dc <startup-0x1fd31724>
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0c000018 	stceq	0, cr0, [r0], {24}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  bc:	00130119 	andseq	r0, r3, r9, lsl r1
  c0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
  c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  c8:	0b3b0b3a 	bleq	ec2db8 <startup-0x1f13d248>
  cc:	13491927 	movtne	r1, #39207	; 0x9927
  d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  d4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  d8:	00130119 	andseq	r0, r3, r9, lsl r1
  dc:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	01111927 	tsteq	r1, r7, lsr #18
  ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
  f4:	0f000013 	svceq	0x00000013
  f8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  fc:	0b3a0e03 	bleq	e83910 <startup-0x1f17c6f0>
 100:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 104:	06120111 			; <UNDEFINED> instruction: 0x06120111
 108:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 10c:	10000019 	andne	r0, r0, r9, lsl r0
 110:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 114:	0b3a0e03 	bleq	e83928 <startup-0x1f17c6d8>
 118:	01110b3b 	tsteq	r1, fp, lsr fp
 11c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 120:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000400 	andcs	r0, r0, r0, lsl #8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000e6 	andeq	r0, r0, r6, ror #1
   4:	00410002 	subeq	r0, r1, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	6d6f742f 	cfstrdvs	mvd7, [pc, #-188]!	; ffffff6c <main+0xdffffbf0>
  24:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  28:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  2c:	572f7374 			; <UNDEFINED> instruction: 0x572f7374
  30:	2f4b524f 	svccs	0x004b524f
  34:	35677075 	strbcc	r7, [r7, #-117]!	; 0xffffff8b
  38:	00325f37 	eorseq	r5, r2, r7, lsr pc
  3c:	61747300 	cmnvs	r4, r0, lsl #6
  40:	70757472 	rsbsvc	r7, r5, r2, ror r4
  44:	0100632e 	tsteq	r0, lr, lsr #6
  48:	00000000 	andeq	r0, r0, r0
  4c:	00000205 	andeq	r0, r0, r5, lsl #4
  50:	1e032000 	cdpne	0, 0, cr2, cr3, cr0, {0}
  54:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  58:	01010003 	tsteq	r1, r3
  5c:	10020500 	andne	r0, r2, r0, lsl #10
  60:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  64:	3d2f0127 	stfccs	f0, [pc, #-156]!	; ffffffd0 <main+0xdffffc54>
  68:	2fae3d3d 	svccs	0x00ae3d3d
  6c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  70:	01040200 	mrseq	r0, R12_usr
  74:	67062006 	strvs	r2, [r6, -r6]
  78:	214ba03d 	cmpcs	fp, sp, lsr r0
  7c:	2f2f2f2f 	svccs	0x002f2f2f
  80:	4c4c4337 	mcrrmi	3, 3, r4, ip, cr7
  84:	4d5c3b21 	vldrmi	d19, [ip, #-132]	; 0xffffff7c
  88:	59ad5968 	stmibpl	sp!, {r3, r5, r6, r8, fp, ip, lr}
  8c:	e5596876 	ldrb	r6, [r9, #-2166]	; 0xfffff78a
  90:	3d3e684b 	ldccc	8, cr6, [lr, #-300]!	; 0xfffffed4
  94:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
  98:	2f67762f 	svccs	0x0067762f
  9c:	3d2f4b3d 	fstmdbxcc	pc!, {d4-d33}	;@ Deprecated
  a0:	3d3e682f 	ldccc	8, cr6, [lr, #-188]!	; 0xffffff44
  a4:	3d593d3d 	ldclcc	13, cr3, [r9, #-244]	; 0xffffff0c
  a8:	3d67842f 	cfstrdcc	mvd8, [r7, #-188]!	; 0xffffff44
  ac:	674c593d 	smlaldxvs	r5, ip, sp, r9
  b0:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
  b4:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
  b8:	75213d59 	strvc	r3, [r1, #-3417]!	; 0xfffff2a7
  bc:	593d2167 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sp}
  c0:	2f4c8739 	svccs	0x004c8739
  c4:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
  c8:	3d67593f 			; <UNDEFINED> instruction: 0x3d67593f
  cc:	4c3d9fca 	ldcmi	15, cr9, [sp], #-808	; 0xfffffcd8
  d0:	563d2167 	ldrtpl	r2, [sp], -r7, ror #2
  d4:	753e4c87 	ldrvc	r4, [lr, #-3207]!	; 0xfffff379
  d8:	4b2f2f84 	blmi	bcbef0 <startup-0x1f434110>
  dc:	4d73212f 	ldfmie	f2, [r3, #-188]!	; 0xffffff44
  e0:	73212f4b 			; <UNDEFINED> instruction: 0x73212f4b
  e4:	0008024d 	andeq	r0, r8, sp, asr #4
  e8:	Address 0x00000000000000e8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  10:	6f675f69 	svcvs	0x00675f69
  14:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	736e7500 	cmnvc	lr, #0, 10
  1c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  20:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  24:	73610074 	cmnvc	r1, #116	; 0x74
  28:	5f696963 	svcpl	0x00696963
  2c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  34:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  38:	61007261 	tstvs	r0, r1, ror #4
  3c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  40:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  44:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  48:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  4c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  50:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
  54:	615f7469 	cmpvs	pc, r9, ror #8
  58:	61007070 	tstvs	r0, r0, ror r0
  5c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  60:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  64:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  68:	00726168 	rsbseq	r6, r2, r8, ror #2
  6c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  70:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  74:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
  78:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
  7c:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
  80:	2f656d6f 	svccs	0x00656d6f
  84:	2f6d6f74 	svccs	0x006d6f74
  88:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
  8c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  90:	4f572f73 	svcmi	0x00572f73
  94:	752f4b52 	strvc	r4, [pc, #-2898]!	; fffff54a <main+0xdffff1ce>
  98:	37356770 			; <UNDEFINED> instruction: 0x37356770
  9c:	6100325f 	tstvs	r0, pc, asr r2
  a0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  a4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  a8:	645f6574 	ldrbvs	r6, [pc], #-1396	; b0 <startup-0x1fffff50>
  ac:	00617461 	rsbeq	r7, r1, r1, ror #8
  b0:	616c6564 	cmnvs	ip, r4, ror #10
  b4:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
  b8:	00736e30 	rsbseq	r6, r3, r0, lsr lr
  bc:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
  c0:	00737365 	rsbseq	r7, r3, r5, ror #6
  c4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  c8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  cc:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
  d0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  d4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  d8:	73610072 	cmnvc	r1, #114	; 0x72
  dc:	5f696963 	svcpl	0x00696963
  e0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  e4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  e8:	65640061 	strbvs	r0, [r4, #-97]!	; 0xffffff9f
  ec:	5f79616c 	svcpl	0x0079616c
  f0:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
  f4:	6e75006f 	cdpvs	0, 7, cr0, cr5, cr15, {3}
  f8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  fc:	63206465 			; <UNDEFINED> instruction: 0x63206465
 100:	00726168 	rsbseq	r6, r2, r8, ror #2
 104:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 108:	6c635f69 	stclvs	15, cr5, [r3], #-420	; 0xfffffe5c
 10c:	5f726165 	svcpl	0x00726165
 110:	00646d63 	rsbeq	r6, r4, r3, ror #26
 114:	6e69616d 	powvsez	f6, f1, #5.0
 118:	6f682f00 	svcvs	0x00682f00
 11c:	742f656d 	strtvc	r6, [pc], #-1389	; 124 <startup-0x1ffffedc>
 120:	442f6d6f 	strtmi	r6, [pc], #-3439	; 128 <startup-0x1ffffed8>
 124:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 128:	73746e65 	cmnvc	r4, #1616	; 0x650
 12c:	524f572f 	subpl	r5, pc, #12320768	; 0xbc0000
 130:	70752f4b 	rsbsvc	r2, r5, fp, asr #30
 134:	5f373567 	svcpl	0x00373567
 138:	74732f32 	ldrbtvc	r2, [r3], #-3890	; 0xfffff0ce
 13c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 140:	00632e70 	rsbeq	r2, r3, r0, ror lr
 144:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 148:	00646e61 	rsbeq	r6, r4, r1, ror #28
 14c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 150:	00707574 	rsbseq	r7, r0, r4, ror r5
 154:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 158:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
 15c:	00327473 	eorseq	r7, r2, r3, ror r4
 160:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 164:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 168:	5f657469 	svcpl	0x00657469
 16c:	00646d63 	rsbeq	r6, r4, r3, ror #26
 170:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 174:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 178:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 17c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 180:	47007465 	strmi	r7, [r0, -r5, ror #8]
 184:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
 188:	37203131 			; <UNDEFINED> instruction: 0x37203131
 18c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 190:	31303220 	teqcc	r0, r0, lsr #4
 194:	30393037 	eorscc	r3, r9, r7, lsr r0
 198:	72282034 	eorvc	r2, r8, #52	; 0x34
 19c:	61656c65 	cmnvs	r5, r5, ror #24
 1a0:	20296573 	eorcs	r6, r9, r3, ror r5
 1a4:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 1a8:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
 1ac:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 1b0:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
 1b4:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 1b8:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 1bc:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 1c0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 1c4:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
 1c8:	205d3430 	subscs	r3, sp, r0, lsr r4
 1cc:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 1d0:	20626d75 	rsbcs	r6, r2, r5, ror sp
 1d4:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 1d8:	613d6863 	teqvs	sp, r3, ror #16
 1dc:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 1e0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 1e4:	6f6c666d 	svcvs	0x006c666d
 1e8:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 1ec:	733d6962 	teqvc	sp, #1605632	; 0x188000
 1f0:	2074666f 	rsbscs	r6, r4, pc, ror #12
 1f4:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 1f8:	6100304f 	tstvs	r0, pc, asr #32
 1fc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 200:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 204:	Address 0x0000000000000204 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <main+0xdfffef92>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x000000000000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000002c 	andeq	r0, r0, ip, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000003c 	andcs	r0, r0, ip, lsr r0
  48:	00000044 	andeq	r0, r0, r4, asr #32
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000080 	andcs	r0, r0, r0, lsl #1
  64:	0000002e 	andeq	r0, r0, lr, lsr #32
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	100e4101 	andne	r4, lr, r1, lsl #2
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000ae 	andcs	r0, r0, lr, lsr #1
  84:	00000022 	andeq	r0, r0, r2, lsr #32
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	100e4101 	andne	r4, lr, r1, lsl #2
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  a4:	00000044 	andeq	r0, r0, r4, asr #32
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	180e4101 	stmdane	lr, {r0, r8, lr}
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000114 	andcs	r0, r0, r4, lsl r1
  c4:	00000048 	andeq	r0, r0, r8, asr #32
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	180e4101 	stmdane	lr, {r0, r8, lr}
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	2000015c 	andcs	r0, r0, ip, asr r1
  e4:	00000034 	andeq	r0, r0, r4, lsr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000190 	mulcs	r0, r0, r1
 104:	00000038 	andeq	r0, r0, r8, lsr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	00000020 	andeq	r0, r0, r0, lsr #32
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001c8 	andcs	r0, r0, r8, asr #3
 124:	0000003c 	andeq	r0, r0, ip, lsr r0
 128:	400c0e41 	andmi	r0, ip, r1, asr #28
 12c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 130:	018e4002 	orreq	r4, lr, r2
 134:	41180e41 	tstmi	r8, r1, asr #28
 138:	0000070d 	andeq	r0, r0, sp, lsl #14
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	20000204 	andcs	r0, r0, r4, lsl #4
 148:	0000002a 	andeq	r0, r0, sl, lsr #32
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	2000022e 	andcs	r0, r0, lr, lsr #4
 168:	0000002a 	andeq	r0, r0, sl, lsr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	00000020 	andeq	r0, r0, r0, lsr #32
 180:	00000000 	andeq	r0, r0, r0
 184:	20000258 	andcs	r0, r0, r8, asr r2
 188:	00000038 	andeq	r0, r0, r8, lsr r0
 18c:	400c0e41 	andmi	r0, ip, r1, asr #28
 190:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 194:	018e4002 	orreq	r4, lr, r2
 198:	41180e41 	tstmi	r8, r1, asr #28
 19c:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	20000290 	mulcs	r0, r0, r2
 1ac:	0000003c 	andeq	r0, r0, ip, lsr r0
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	100e4101 	andne	r4, lr, r1, lsl #2
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	00000018 	andeq	r0, r0, r8, lsl r0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	200002cc 	andcs	r0, r0, ip, asr #5
 1cc:	00000022 	andeq	r0, r0, r2, lsr #32
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	200002ee 	andcs	r0, r0, lr, ror #5
 1e8:	00000058 	andeq	r0, r0, r8, asr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	20000346 	andcs	r0, r0, r6, asr #6
 208:	00000036 	andeq	r0, r0, r6, lsr r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	100e4101 	andne	r4, lr, r1, lsl #2
 218:	00070d41 	andeq	r0, r7, r1, asr #26
 21c:	00000024 	andeq	r0, r0, r4, lsr #32
 220:	00000000 	andeq	r0, r0, r0
 224:	2000037c 	andcs	r0, r0, ip, ror r3
 228:	00000084 	andeq	r0, r0, r4, lsl #1
 22c:	40100e41 	andsmi	r0, r0, r1, asr #28
 230:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 234:	02874003 	addeq	r4, r7, #3
 238:	41018e40 	tstmi	r1, r0, asr #28
 23c:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 240:	00000007 	andeq	r0, r0, r7
