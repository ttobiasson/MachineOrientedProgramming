
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define STK_LOAD ((volatile unsigned int*)(0xE000E014))
#define STK_VAL  ((volatile unsigned int*)(0xE000E018))
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void ){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fb40 	bl	20000688 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168/4)-1);
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL  = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000)== 0){}
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    *STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_500ns>:
void delay_500ns(void){
20000054:	b580      	push	{r7, lr}
20000056:	af00      	add	r7, sp, #0
	delay_250ns();
20000058:	f7ff ffda 	bl	20000010 <delay_250ns>
	delay_250ns();
2000005c:	f7ff ffd8 	bl	20000010 <delay_250ns>
}
20000060:	46c0      	nop			; (mov r8, r8)
20000062:	46bd      	mov	sp, r7
20000064:	bd80      	pop	{r7, pc}

20000066 <delay_micro>:
void delay_micro(unsigned int us){
20000066:	b580      	push	{r7, lr}
20000068:	b082      	sub	sp, #8
2000006a:	af00      	add	r7, sp, #0
2000006c:	6078      	str	r0, [r7, #4]
    while(us--){
2000006e:	e007      	b.n	20000080 <delay_micro+0x1a>
        delay_250ns();
20000070:	f7ff ffce 	bl	20000010 <delay_250ns>
        delay_250ns();
20000074:	f7ff ffcc 	bl	20000010 <delay_250ns>
        delay_250ns();
20000078:	f7ff ffca 	bl	20000010 <delay_250ns>
        delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
    while(us--){
20000080:	687b      	ldr	r3, [r7, #4]
20000082:	1e5a      	subs	r2, r3, #1
20000084:	607a      	str	r2, [r7, #4]
20000086:	2b00      	cmp	r3, #0
20000088:	d1f2      	bne.n	20000070 <delay_micro+0xa>
    }
}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b002      	add	sp, #8
20000090:	bd80      	pop	{r7, pc}

20000092 <delay_milli>:
void delay_milli(unsigned int ms){
20000092:	b580      	push	{r7, lr}
20000094:	b082      	sub	sp, #8
20000096:	af00      	add	r7, sp, #0
20000098:	6078      	str	r0, [r7, #4]
    while(ms--){
2000009a:	e002      	b.n	200000a2 <delay_milli+0x10>
        delay_micro(10);
2000009c:	200a      	movs	r0, #10
2000009e:	f7ff ffe2 	bl	20000066 <delay_micro>
    while(ms--){
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	1e5a      	subs	r2, r3, #1
200000a6:	607a      	str	r2, [r7, #4]
200000a8:	2b00      	cmp	r3, #0
200000aa:	d1f7      	bne.n	2000009c <delay_milli+0xa>
    }
    
}
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	b002      	add	sp, #8
200000b2:	bd80      	pop	{r7, pc}

200000b4 <graphic_ctrl_bit_set>:
	void (* move ) (struct tObj *);
	void (* set_speed ) (struct tObj *, int, int);
}OBJECT, *POBJECT;


void graphic_ctrl_bit_set(uint8_t x){
200000b4:	b580      	push	{r7, lr}
200000b6:	b082      	sub	sp, #8
200000b8:	af00      	add	r7, sp, #0
200000ba:	0002      	movs	r2, r0
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	701a      	strb	r2, [r3, #0]
	*PORT_ODR_LOW |= x;
200000c0:	4b0a      	ldr	r3, [pc, #40]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000c2:	781b      	ldrb	r3, [r3, #0]
200000c4:	b2da      	uxtb	r2, r3
200000c6:	4909      	ldr	r1, [pc, #36]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000c8:	1dfb      	adds	r3, r7, #7
200000ca:	781b      	ldrb	r3, [r3, #0]
200000cc:	4313      	orrs	r3, r2
200000ce:	b2db      	uxtb	r3, r3
200000d0:	700b      	strb	r3, [r1, #0]
	*PORT_ODR_LOW &= ~(1UL << 2);
200000d2:	4b06      	ldr	r3, [pc, #24]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	b2db      	uxtb	r3, r3
200000d8:	4a04      	ldr	r2, [pc, #16]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000da:	2104      	movs	r1, #4
200000dc:	438b      	bics	r3, r1
200000de:	b2db      	uxtb	r3, r3
200000e0:	7013      	strb	r3, [r2, #0]

}
200000e2:	46c0      	nop			; (mov r8, r8)
200000e4:	46bd      	mov	sp, r7
200000e6:	b002      	add	sp, #8
200000e8:	bd80      	pop	{r7, pc}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	40021014 	andmi	r1, r2, r4, lsl r0

200000f0 <graphic_ctrl_bit_clear>:
void graphic_ctrl_bit_clear(uint8_t x){
200000f0:	b580      	push	{r7, lr}
200000f2:	b082      	sub	sp, #8
200000f4:	af00      	add	r7, sp, #0
200000f6:	0002      	movs	r2, r0
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	701a      	strb	r2, [r3, #0]
	*PORT_ODR_LOW &= ~((1UL << 2) | x);
200000fc:	4b08      	ldr	r3, [pc, #32]	; (20000120 <graphic_ctrl_bit_clear+0x30>)
200000fe:	781b      	ldrb	r3, [r3, #0]
20000100:	b2db      	uxtb	r3, r3
20000102:	1dfa      	adds	r2, r7, #7
20000104:	7812      	ldrb	r2, [r2, #0]
20000106:	2104      	movs	r1, #4
20000108:	430a      	orrs	r2, r1
2000010a:	b2d2      	uxtb	r2, r2
2000010c:	43d2      	mvns	r2, r2
2000010e:	b2d2      	uxtb	r2, r2
20000110:	4903      	ldr	r1, [pc, #12]	; (20000120 <graphic_ctrl_bit_clear+0x30>)
20000112:	4013      	ands	r3, r2
20000114:	b2db      	uxtb	r3, r3
20000116:	700b      	strb	r3, [r1, #0]

}
20000118:	46c0      	nop			; (mov r8, r8)
2000011a:	46bd      	mov	sp, r7
2000011c:	b002      	add	sp, #8
2000011e:	bd80      	pop	{r7, pc}
20000120:	40021014 	andmi	r1, r2, r4, lsl r0

20000124 <select_controller>:
void select_controller(uint8_t controller){
20000124:	b580      	push	{r7, lr}
20000126:	b082      	sub	sp, #8
20000128:	af00      	add	r7, sp, #0
2000012a:	0002      	movs	r2, r0
2000012c:	1dfb      	adds	r3, r7, #7
2000012e:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000130:	1dfb      	adds	r3, r7, #7
20000132:	781b      	ldrb	r3, [r3, #0]
20000134:	2b08      	cmp	r3, #8
20000136:	d00c      	beq.n	20000152 <select_controller+0x2e>
20000138:	dc02      	bgt.n	20000140 <select_controller+0x1c>
2000013a:	2b00      	cmp	r3, #0
2000013c:	d005      	beq.n	2000014a <select_controller+0x26>
		graphic_ctrl_bit_set(B_CS1 | B_CS2);
		break;
	}
		
	
}
2000013e:	e01a      	b.n	20000176 <select_controller+0x52>
	switch(controller){
20000140:	2b10      	cmp	r3, #16
20000142:	d00d      	beq.n	20000160 <select_controller+0x3c>
20000144:	2b18      	cmp	r3, #24
20000146:	d012      	beq.n	2000016e <select_controller+0x4a>
}
20000148:	e015      	b.n	20000176 <select_controller+0x52>
		graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000014a:	2018      	movs	r0, #24
2000014c:	f7ff ffd0 	bl	200000f0 <graphic_ctrl_bit_clear>
		break;
20000150:	e011      	b.n	20000176 <select_controller+0x52>
		graphic_ctrl_bit_set(B_CS1);
20000152:	2008      	movs	r0, #8
20000154:	f7ff ffae 	bl	200000b4 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS2);
20000158:	2010      	movs	r0, #16
2000015a:	f7ff ffc9 	bl	200000f0 <graphic_ctrl_bit_clear>
		break;
2000015e:	e00a      	b.n	20000176 <select_controller+0x52>
		graphic_ctrl_bit_set(B_CS2);
20000160:	2010      	movs	r0, #16
20000162:	f7ff ffa7 	bl	200000b4 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS1);
20000166:	2008      	movs	r0, #8
20000168:	f7ff ffc2 	bl	200000f0 <graphic_ctrl_bit_clear>
		break;
2000016c:	e003      	b.n	20000176 <select_controller+0x52>
		graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000016e:	2018      	movs	r0, #24
20000170:	f7ff ffa0 	bl	200000b4 <graphic_ctrl_bit_set>
		break;
20000174:	46c0      	nop			; (mov r8, r8)
}
20000176:	46c0      	nop			; (mov r8, r8)
20000178:	46bd      	mov	sp, r7
2000017a:	b002      	add	sp, #8
2000017c:	bd80      	pop	{r7, pc}

2000017e <graphic_wait_ready>:
void graphic_wait_ready(void){
2000017e:	b580      	push	{r7, lr}
20000180:	b082      	sub	sp, #8
20000182:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000184:	2040      	movs	r0, #64	; 0x40
20000186:	f7ff ffb3 	bl	200000f0 <graphic_ctrl_bit_clear>
	*PORT_MODER = 0x00005555;
2000018a:	4b16      	ldr	r3, [pc, #88]	; (200001e4 <graphic_wait_ready+0x66>)
2000018c:	4a16      	ldr	r2, [pc, #88]	; (200001e8 <graphic_wait_ready+0x6a>)
2000018e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000190:	2001      	movs	r0, #1
20000192:	f7ff ffad 	bl	200000f0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000196:	2002      	movs	r0, #2
20000198:	f7ff ff8c 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
2000019c:	f7ff ff5a 	bl	20000054 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff87 	bl	200000b4 <graphic_ctrl_bit_set>
		delay_500ns();
200001a6:	f7ff ff55 	bl	20000054 <delay_500ns>
		c = *PORT_IDR_HIGH & LCD_BUSY;
200001aa:	4b10      	ldr	r3, [pc, #64]	; (200001ec <graphic_wait_ready+0x6e>)
200001ac:	781b      	ldrb	r3, [r3, #0]
200001ae:	b2da      	uxtb	r2, r3
200001b0:	1dfb      	adds	r3, r7, #7
200001b2:	217f      	movs	r1, #127	; 0x7f
200001b4:	438a      	bics	r2, r1
200001b6:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200001b8:	2040      	movs	r0, #64	; 0x40
200001ba:	f7ff ff99 	bl	200000f0 <graphic_ctrl_bit_clear>
		delay_500ns();
200001be:	f7ff ff49 	bl	20000054 <delay_500ns>
		if( c == 0)
200001c2:	1dfb      	adds	r3, r7, #7
200001c4:	781b      	ldrb	r3, [r3, #0]
200001c6:	2b00      	cmp	r3, #0
200001c8:	d000      	beq.n	200001cc <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
200001ca:	e7e9      	b.n	200001a0 <graphic_wait_ready+0x22>
			break;
200001cc:	46c0      	nop			; (mov r8, r8)
		
	}
	graphic_ctrl_bit_set(B_E);
200001ce:	2040      	movs	r0, #64	; 0x40
200001d0:	f7ff ff70 	bl	200000b4 <graphic_ctrl_bit_set>
	*PORT_MODER = 0x55555555;
200001d4:	4b03      	ldr	r3, [pc, #12]	; (200001e4 <graphic_wait_ready+0x66>)
200001d6:	4a06      	ldr	r2, [pc, #24]	; (200001f0 <graphic_wait_ready+0x72>)
200001d8:	601a      	str	r2, [r3, #0]
}
200001da:	46c0      	nop			; (mov r8, r8)
200001dc:	46bd      	mov	sp, r7
200001de:	b002      	add	sp, #8
200001e0:	bd80      	pop	{r7, pc}
200001e2:	46c0      	nop			; (mov r8, r8)
200001e4:	40021000 	andmi	r1, r2, r0
200001e8:	00005555 	andeq	r5, r0, r5, asr r5
200001ec:	40021011 	andmi	r1, r2, r1, lsl r0
200001f0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001f4 <graphic_read>:
uint8_t graphic_read(uint8_t controller ){
200001f4:	b580      	push	{r7, lr}
200001f6:	b084      	sub	sp, #16
200001f8:	af00      	add	r7, sp, #0
200001fa:	0002      	movs	r2, r0
200001fc:	1dfb      	adds	r3, r7, #7
200001fe:	701a      	strb	r2, [r3, #0]
	uint8_t RV;
	graphic_ctrl_bit_clear( B_E );
20000200:	2040      	movs	r0, #64	; 0x40
20000202:	f7ff ff75 	bl	200000f0 <graphic_ctrl_bit_clear>
	*PORT_MODER = 0x00005555;
20000206:	4b1c      	ldr	r3, [pc, #112]	; (20000278 <graphic_read+0x84>)
20000208:	4a1c      	ldr	r2, [pc, #112]	; (2000027c <graphic_read+0x88>)
2000020a:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set( B_RS | B_RW);
2000020c:	2003      	movs	r0, #3
2000020e:	f7ff ff51 	bl	200000b4 <graphic_ctrl_bit_set>
	
	select_controller( controller );
20000212:	1dfb      	adds	r3, r7, #7
20000214:	781b      	ldrb	r3, [r3, #0]
20000216:	0018      	movs	r0, r3
20000218:	f7ff ff84 	bl	20000124 <select_controller>
	delay_500ns();
2000021c:	f7ff ff1a 	bl	20000054 <delay_500ns>
	
	graphic_ctrl_bit_set( B_E );
20000220:	2040      	movs	r0, #64	; 0x40
20000222:	f7ff ff47 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
20000226:	f7ff ff15 	bl	20000054 <delay_500ns>
	
	RV = *PORT_IDR_HIGH;
2000022a:	4a15      	ldr	r2, [pc, #84]	; (20000280 <graphic_read+0x8c>)
2000022c:	230f      	movs	r3, #15
2000022e:	18fb      	adds	r3, r7, r3
20000230:	7812      	ldrb	r2, [r2, #0]
20000232:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear( B_E );
20000234:	2040      	movs	r0, #64	; 0x40
20000236:	f7ff ff5b 	bl	200000f0 <graphic_ctrl_bit_clear>
	
	*PORT_MODER = 0x55555555;
2000023a:	4b0f      	ldr	r3, [pc, #60]	; (20000278 <graphic_read+0x84>)
2000023c:	4a11      	ldr	r2, [pc, #68]	; (20000284 <graphic_read+0x90>)
2000023e:	601a      	str	r2, [r3, #0]
	if( controller & B_CS1 ){
20000240:	1dfb      	adds	r3, r7, #7
20000242:	781b      	ldrb	r3, [r3, #0]
20000244:	2208      	movs	r2, #8
20000246:	4013      	ands	r3, r2
20000248:	d004      	beq.n	20000254 <graphic_read+0x60>
		select_controller(B_CS1);
2000024a:	2008      	movs	r0, #8
2000024c:	f7ff ff6a 	bl	20000124 <select_controller>
		graphic_wait_ready();
20000250:	f7ff ff95 	bl	2000017e <graphic_wait_ready>
	}
	if( controller & B_CS2 ){
20000254:	1dfb      	adds	r3, r7, #7
20000256:	781b      	ldrb	r3, [r3, #0]
20000258:	2210      	movs	r2, #16
2000025a:	4013      	ands	r3, r2
2000025c:	d004      	beq.n	20000268 <graphic_read+0x74>
		select_controller(B_CS2);
2000025e:	2010      	movs	r0, #16
20000260:	f7ff ff60 	bl	20000124 <select_controller>
		graphic_wait_ready();
20000264:	f7ff ff8b 	bl	2000017e <graphic_wait_ready>
	}
	return RV;
20000268:	230f      	movs	r3, #15
2000026a:	18fb      	adds	r3, r7, r3
2000026c:	781b      	ldrb	r3, [r3, #0]
}
2000026e:	0018      	movs	r0, r3
20000270:	46bd      	mov	sp, r7
20000272:	b004      	add	sp, #16
20000274:	bd80      	pop	{r7, pc}
20000276:	46c0      	nop			; (mov r8, r8)
20000278:	40021000 	andmi	r1, r2, r0
2000027c:	00005555 	andeq	r5, r0, r5, asr r5
20000280:	40021011 	andmi	r1, r2, r1, lsl r0
20000284:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000288 <graphic_read_data>:
uint8_t graphic_read_data(unsigned char controller){
20000288:	b580      	push	{r7, lr}
2000028a:	b082      	sub	sp, #8
2000028c:	af00      	add	r7, sp, #0
2000028e:	0002      	movs	r2, r0
20000290:	1dfb      	adds	r3, r7, #7
20000292:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000294:	1dfb      	adds	r3, r7, #7
20000296:	781b      	ldrb	r3, [r3, #0]
20000298:	0018      	movs	r0, r3
2000029a:	f7ff ffab 	bl	200001f4 <graphic_read>
	return graphic_read(controller);
2000029e:	1dfb      	adds	r3, r7, #7
200002a0:	781b      	ldrb	r3, [r3, #0]
200002a2:	0018      	movs	r0, r3
200002a4:	f7ff ffa6 	bl	200001f4 <graphic_read>
200002a8:	0003      	movs	r3, r0
	
}
200002aa:	0018      	movs	r0, r3
200002ac:	46bd      	mov	sp, r7
200002ae:	b002      	add	sp, #8
200002b0:	bd80      	pop	{r7, pc}

200002b2 <graphic_write>:
void graphic_write(uint8_t value, uint8_t controller){
200002b2:	b580      	push	{r7, lr}
200002b4:	b082      	sub	sp, #8
200002b6:	af00      	add	r7, sp, #0
200002b8:	0002      	movs	r2, r0
200002ba:	1dfb      	adds	r3, r7, #7
200002bc:	701a      	strb	r2, [r3, #0]
200002be:	1dbb      	adds	r3, r7, #6
200002c0:	1c0a      	adds	r2, r1, #0
200002c2:	701a      	strb	r2, [r3, #0]
	*PORT_ODR_HIGH = value;
200002c4:	4a19      	ldr	r2, [pc, #100]	; (2000032c <graphic_write+0x7a>)
200002c6:	1dfb      	adds	r3, r7, #7
200002c8:	781b      	ldrb	r3, [r3, #0]
200002ca:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002cc:	1dbb      	adds	r3, r7, #6
200002ce:	781b      	ldrb	r3, [r3, #0]
200002d0:	0018      	movs	r0, r3
200002d2:	f7ff ff27 	bl	20000124 <select_controller>
	delay_500ns();
200002d6:	f7ff febd 	bl	20000054 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002da:	2040      	movs	r0, #64	; 0x40
200002dc:	f7ff feea 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
200002e0:	f7ff feb8 	bl	20000054 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002e4:	2040      	movs	r0, #64	; 0x40
200002e6:	f7ff ff03 	bl	200000f0 <graphic_ctrl_bit_clear>
	
	if( controller & B_CS1 ){
200002ea:	1dbb      	adds	r3, r7, #6
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	2208      	movs	r2, #8
200002f0:	4013      	ands	r3, r2
200002f2:	d004      	beq.n	200002fe <graphic_write+0x4c>
		select_controller( B_CS1 );
200002f4:	2008      	movs	r0, #8
200002f6:	f7ff ff15 	bl	20000124 <select_controller>
		graphic_wait_ready();
200002fa:	f7ff ff40 	bl	2000017e <graphic_wait_ready>
	}
	if( controller & B_CS2 ){
200002fe:	1dbb      	adds	r3, r7, #6
20000300:	781b      	ldrb	r3, [r3, #0]
20000302:	2210      	movs	r2, #16
20000304:	4013      	ands	r3, r2
20000306:	d004      	beq.n	20000312 <graphic_write+0x60>
		select_controller( B_CS2 );
20000308:	2010      	movs	r0, #16
2000030a:	f7ff ff0b 	bl	20000124 <select_controller>
		graphic_wait_ready();
2000030e:	f7ff ff36 	bl	2000017e <graphic_wait_ready>
	}
	*PORT_ODR_HIGH = 0x0;
20000312:	4b06      	ldr	r3, [pc, #24]	; (2000032c <graphic_write+0x7a>)
20000314:	2200      	movs	r2, #0
20000316:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000318:	2040      	movs	r0, #64	; 0x40
2000031a:	f7ff fecb 	bl	200000b4 <graphic_ctrl_bit_set>
	select_controller(0);
2000031e:	2000      	movs	r0, #0
20000320:	f7ff ff00 	bl	20000124 <select_controller>
}
20000324:	46c0      	nop			; (mov r8, r8)
20000326:	46bd      	mov	sp, r7
20000328:	b002      	add	sp, #8
2000032a:	bd80      	pop	{r7, pc}
2000032c:	40021015 	andmi	r1, r2, r5, lsl r0

20000330 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller){
20000330:	b580      	push	{r7, lr}
20000332:	b082      	sub	sp, #8
20000334:	af00      	add	r7, sp, #0
20000336:	0002      	movs	r2, r0
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	701a      	strb	r2, [r3, #0]
2000033c:	1dbb      	adds	r3, r7, #6
2000033e:	1c0a      	adds	r2, r1, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear( B_E );
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fed4 	bl	200000f0 <graphic_ctrl_bit_clear>
	select_controller( controller );
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	0018      	movs	r0, r3
2000034e:	f7ff fee9 	bl	20000124 <select_controller>
	graphic_ctrl_bit_clear( B_RS | B_RW );
20000352:	2003      	movs	r0, #3
20000354:	f7ff fecc 	bl	200000f0 <graphic_ctrl_bit_clear>
	graphic_write( command, controller );
20000358:	1dbb      	adds	r3, r7, #6
2000035a:	781a      	ldrb	r2, [r3, #0]
2000035c:	1dfb      	adds	r3, r7, #7
2000035e:	781b      	ldrb	r3, [r3, #0]
20000360:	0011      	movs	r1, r2
20000362:	0018      	movs	r0, r3
20000364:	f7ff ffa5 	bl	200002b2 <graphic_write>
}
20000368:	46c0      	nop			; (mov r8, r8)
2000036a:	46bd      	mov	sp, r7
2000036c:	b002      	add	sp, #8
2000036e:	bd80      	pop	{r7, pc}

20000370 <graphic_write_data>:
void graphic_write_data( uint8_t data, uint8_t controller ){
20000370:	b580      	push	{r7, lr}
20000372:	b082      	sub	sp, #8
20000374:	af00      	add	r7, sp, #0
20000376:	0002      	movs	r2, r0
20000378:	1dfb      	adds	r3, r7, #7
2000037a:	701a      	strb	r2, [r3, #0]
2000037c:	1dbb      	adds	r3, r7, #6
2000037e:	1c0a      	adds	r2, r1, #0
20000380:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear( B_E );
20000382:	2040      	movs	r0, #64	; 0x40
20000384:	f7ff feb4 	bl	200000f0 <graphic_ctrl_bit_clear>
	select_controller( controller );
20000388:	1dbb      	adds	r3, r7, #6
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0018      	movs	r0, r3
2000038e:	f7ff fec9 	bl	20000124 <select_controller>
	graphic_ctrl_bit_set( B_RS );
20000392:	2001      	movs	r0, #1
20000394:	f7ff fe8e 	bl	200000b4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear( B_RW );
20000398:	2002      	movs	r0, #2
2000039a:	f7ff fea9 	bl	200000f0 <graphic_ctrl_bit_clear>
	graphic_write( data, controller );
2000039e:	1dbb      	adds	r3, r7, #6
200003a0:	781a      	ldrb	r2, [r3, #0]
200003a2:	1dfb      	adds	r3, r7, #7
200003a4:	781b      	ldrb	r3, [r3, #0]
200003a6:	0011      	movs	r1, r2
200003a8:	0018      	movs	r0, r3
200003aa:	f7ff ff82 	bl	200002b2 <graphic_write>
}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	46bd      	mov	sp, r7
200003b2:	b002      	add	sp, #8
200003b4:	bd80      	pop	{r7, pc}

200003b6 <graphic_clear_screen>:
void graphic_clear_screen(void){
200003b6:	b580      	push	{r7, lr}
200003b8:	b082      	sub	sp, #8
200003ba:	af00      	add	r7, sp, #0
	for( int i = 0; i < 7; i++){											//KAN SKAPA PROBLEM DÅ I ALDRiG ÄR 7, SAMMA MED K
200003bc:	2300      	movs	r3, #0
200003be:	607b      	str	r3, [r7, #4]
200003c0:	e01e      	b.n	20000400 <graphic_clear_screen+0x4a>
		graphic_write_command( LCD_SET_PAGE | i, B_CS1 | B_CS2 );
200003c2:	687b      	ldr	r3, [r7, #4]
200003c4:	b25b      	sxtb	r3, r3
200003c6:	2248      	movs	r2, #72	; 0x48
200003c8:	4252      	negs	r2, r2
200003ca:	4313      	orrs	r3, r2
200003cc:	b25b      	sxtb	r3, r3
200003ce:	b2db      	uxtb	r3, r3
200003d0:	2118      	movs	r1, #24
200003d2:	0018      	movs	r0, r3
200003d4:	f7ff ffac 	bl	20000330 <graphic_write_command>
		graphic_write_command( LCD_SET_ADD	| 0, B_CS1 | B_CS2 );
200003d8:	2118      	movs	r1, #24
200003da:	2040      	movs	r0, #64	; 0x40
200003dc:	f7ff ffa8 	bl	20000330 <graphic_write_command>
		for(int k = 0; k < 63; k++){
200003e0:	2300      	movs	r3, #0
200003e2:	603b      	str	r3, [r7, #0]
200003e4:	e006      	b.n	200003f4 <graphic_clear_screen+0x3e>
			graphic_write_data( 0, B_CS1 | B_CS2 );
200003e6:	2118      	movs	r1, #24
200003e8:	2000      	movs	r0, #0
200003ea:	f7ff ffc1 	bl	20000370 <graphic_write_data>
		for(int k = 0; k < 63; k++){
200003ee:	683b      	ldr	r3, [r7, #0]
200003f0:	3301      	adds	r3, #1
200003f2:	603b      	str	r3, [r7, #0]
200003f4:	683b      	ldr	r3, [r7, #0]
200003f6:	2b3e      	cmp	r3, #62	; 0x3e
200003f8:	ddf5      	ble.n	200003e6 <graphic_clear_screen+0x30>
	for( int i = 0; i < 7; i++){											//KAN SKAPA PROBLEM DÅ I ALDRiG ÄR 7, SAMMA MED K
200003fa:	687b      	ldr	r3, [r7, #4]
200003fc:	3301      	adds	r3, #1
200003fe:	607b      	str	r3, [r7, #4]
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	2b06      	cmp	r3, #6
20000404:	dddd      	ble.n	200003c2 <graphic_clear_screen+0xc>
		}
	}
}
20000406:	46c0      	nop			; (mov r8, r8)
20000408:	46bd      	mov	sp, r7
2000040a:	b002      	add	sp, #8
2000040c:	bd80      	pop	{r7, pc}

2000040e <pixel>:
void pixel(unsigned x, unsigned y, unsigned set){
2000040e:	b5b0      	push	{r4, r5, r7, lr}
20000410:	b088      	sub	sp, #32
20000412:	af00      	add	r7, sp, #0
20000414:	60f8      	str	r0, [r7, #12]
20000416:	60b9      	str	r1, [r7, #8]
20000418:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if(x < 1 || y < 1 || x > 128 || y > 64)
2000041a:	68fb      	ldr	r3, [r7, #12]
2000041c:	2b00      	cmp	r3, #0
2000041e:	d100      	bne.n	20000422 <pixel+0x14>
20000420:	e0ab      	b.n	2000057a <pixel+0x16c>
20000422:	68bb      	ldr	r3, [r7, #8]
20000424:	2b00      	cmp	r3, #0
20000426:	d100      	bne.n	2000042a <pixel+0x1c>
20000428:	e0a7      	b.n	2000057a <pixel+0x16c>
2000042a:	68fb      	ldr	r3, [r7, #12]
2000042c:	2b80      	cmp	r3, #128	; 0x80
2000042e:	d900      	bls.n	20000432 <pixel+0x24>
20000430:	e0a3      	b.n	2000057a <pixel+0x16c>
20000432:	68bb      	ldr	r3, [r7, #8]
20000434:	2b40      	cmp	r3, #64	; 0x40
20000436:	d900      	bls.n	2000043a <pixel+0x2c>
20000438:	e09f      	b.n	2000057a <pixel+0x16c>
		return;
	index = (y-1)/8;
2000043a:	68bb      	ldr	r3, [r7, #8]
2000043c:	3b01      	subs	r3, #1
2000043e:	08db      	lsrs	r3, r3, #3
20000440:	61bb      	str	r3, [r7, #24]
	switch((y-1)%8){
20000442:	68bb      	ldr	r3, [r7, #8]
20000444:	3b01      	subs	r3, #1
20000446:	2207      	movs	r2, #7
20000448:	4013      	ands	r3, r2
2000044a:	2b07      	cmp	r3, #7
2000044c:	d82c      	bhi.n	200004a8 <pixel+0x9a>
2000044e:	009a      	lsls	r2, r3, #2
20000450:	4b4c      	ldr	r3, [pc, #304]	; (20000584 <pixel+0x176>)
20000452:	18d3      	adds	r3, r2, r3
20000454:	681b      	ldr	r3, [r3, #0]
20000456:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000458:	231f      	movs	r3, #31
2000045a:	18fb      	adds	r3, r7, r3
2000045c:	2201      	movs	r2, #1
2000045e:	701a      	strb	r2, [r3, #0]
20000460:	e022      	b.n	200004a8 <pixel+0x9a>
		case 1:	mask = 2; break;
20000462:	231f      	movs	r3, #31
20000464:	18fb      	adds	r3, r7, r3
20000466:	2202      	movs	r2, #2
20000468:	701a      	strb	r2, [r3, #0]
2000046a:	e01d      	b.n	200004a8 <pixel+0x9a>
		case 2: mask = 4; break;
2000046c:	231f      	movs	r3, #31
2000046e:	18fb      	adds	r3, r7, r3
20000470:	2204      	movs	r2, #4
20000472:	701a      	strb	r2, [r3, #0]
20000474:	e018      	b.n	200004a8 <pixel+0x9a>
		case 3: mask = 8; break;
20000476:	231f      	movs	r3, #31
20000478:	18fb      	adds	r3, r7, r3
2000047a:	2208      	movs	r2, #8
2000047c:	701a      	strb	r2, [r3, #0]
2000047e:	e013      	b.n	200004a8 <pixel+0x9a>
		case 4: mask = 0x10; break;
20000480:	231f      	movs	r3, #31
20000482:	18fb      	adds	r3, r7, r3
20000484:	2210      	movs	r2, #16
20000486:	701a      	strb	r2, [r3, #0]
20000488:	e00e      	b.n	200004a8 <pixel+0x9a>
		case 5: mask = 0x20; break;
2000048a:	231f      	movs	r3, #31
2000048c:	18fb      	adds	r3, r7, r3
2000048e:	2220      	movs	r2, #32
20000490:	701a      	strb	r2, [r3, #0]
20000492:	e009      	b.n	200004a8 <pixel+0x9a>
		case 6: mask = 0x40; break;
20000494:	231f      	movs	r3, #31
20000496:	18fb      	adds	r3, r7, r3
20000498:	2240      	movs	r2, #64	; 0x40
2000049a:	701a      	strb	r2, [r3, #0]
2000049c:	e004      	b.n	200004a8 <pixel+0x9a>
		case 7: mask = 0x80; break;
2000049e:	231f      	movs	r3, #31
200004a0:	18fb      	adds	r3, r7, r3
200004a2:	2280      	movs	r2, #128	; 0x80
200004a4:	701a      	strb	r2, [r3, #0]
200004a6:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0)
200004a8:	687b      	ldr	r3, [r7, #4]
200004aa:	2b00      	cmp	r3, #0
200004ac:	d105      	bne.n	200004ba <pixel+0xac>
		mask = ~mask;
200004ae:	221f      	movs	r2, #31
200004b0:	18bb      	adds	r3, r7, r2
200004b2:	18ba      	adds	r2, r7, r2
200004b4:	7812      	ldrb	r2, [r2, #0]
200004b6:	43d2      	mvns	r2, r2
200004b8:	701a      	strb	r2, [r3, #0]
	if(x > 64){
200004ba:	68fb      	ldr	r3, [r7, #12]
200004bc:	2b40      	cmp	r3, #64	; 0x40
200004be:	d907      	bls.n	200004d0 <pixel+0xc2>
		controller = B_CS2;
200004c0:	231e      	movs	r3, #30
200004c2:	18fb      	adds	r3, r7, r3
200004c4:	2210      	movs	r2, #16
200004c6:	701a      	strb	r2, [r3, #0]
		x = x-65;
200004c8:	68fb      	ldr	r3, [r7, #12]
200004ca:	3b41      	subs	r3, #65	; 0x41
200004cc:	60fb      	str	r3, [r7, #12]
200004ce:	e006      	b.n	200004de <pixel+0xd0>
	}else{ 
		controller = B_CS1;
200004d0:	231e      	movs	r3, #30
200004d2:	18fb      	adds	r3, r7, r3
200004d4:	2208      	movs	r2, #8
200004d6:	701a      	strb	r2, [r3, #0]
		x = x-1;	
200004d8:	68fb      	ldr	r3, [r7, #12]
200004da:	3b01      	subs	r3, #1
200004dc:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller);
200004de:	68fb      	ldr	r3, [r7, #12]
200004e0:	b2db      	uxtb	r3, r3
200004e2:	2240      	movs	r2, #64	; 0x40
200004e4:	4313      	orrs	r3, r2
200004e6:	b2da      	uxtb	r2, r3
200004e8:	251e      	movs	r5, #30
200004ea:	197b      	adds	r3, r7, r5
200004ec:	781b      	ldrb	r3, [r3, #0]
200004ee:	0019      	movs	r1, r3
200004f0:	0010      	movs	r0, r2
200004f2:	f7ff ff1d 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200004f6:	69bb      	ldr	r3, [r7, #24]
200004f8:	b25b      	sxtb	r3, r3
200004fa:	2248      	movs	r2, #72	; 0x48
200004fc:	4252      	negs	r2, r2
200004fe:	4313      	orrs	r3, r2
20000500:	b25b      	sxtb	r3, r3
20000502:	b2da      	uxtb	r2, r3
20000504:	197b      	adds	r3, r7, r5
20000506:	781b      	ldrb	r3, [r3, #0]
20000508:	0019      	movs	r1, r3
2000050a:	0010      	movs	r0, r2
2000050c:	f7ff ff10 	bl	20000330 <graphic_write_command>
	c = graphic_read_data(controller);
20000510:	2317      	movs	r3, #23
20000512:	18fc      	adds	r4, r7, r3
20000514:	197b      	adds	r3, r7, r5
20000516:	781b      	ldrb	r3, [r3, #0]
20000518:	0018      	movs	r0, r3
2000051a:	f7ff feb5 	bl	20000288 <graphic_read_data>
2000051e:	0003      	movs	r3, r0
20000520:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000522:	68fb      	ldr	r3, [r7, #12]
20000524:	b2db      	uxtb	r3, r3
20000526:	2240      	movs	r2, #64	; 0x40
20000528:	4313      	orrs	r3, r2
2000052a:	b2da      	uxtb	r2, r3
2000052c:	197b      	adds	r3, r7, r5
2000052e:	781b      	ldrb	r3, [r3, #0]
20000530:	0019      	movs	r1, r3
20000532:	0010      	movs	r0, r2
20000534:	f7ff fefc 	bl	20000330 <graphic_write_command>
	if(set){
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	2b00      	cmp	r3, #0
2000053c:	d009      	beq.n	20000552 <pixel+0x144>
		mask = mask | c;
2000053e:	221f      	movs	r2, #31
20000540:	18bb      	adds	r3, r7, r2
20000542:	18b9      	adds	r1, r7, r2
20000544:	2217      	movs	r2, #23
20000546:	18ba      	adds	r2, r7, r2
20000548:	7809      	ldrb	r1, [r1, #0]
2000054a:	7812      	ldrb	r2, [r2, #0]
2000054c:	430a      	orrs	r2, r1
2000054e:	701a      	strb	r2, [r3, #0]
20000550:	e008      	b.n	20000564 <pixel+0x156>
	}else{
		mask = mask & c;
20000552:	221f      	movs	r2, #31
20000554:	18bb      	adds	r3, r7, r2
20000556:	18ba      	adds	r2, r7, r2
20000558:	2117      	movs	r1, #23
2000055a:	1879      	adds	r1, r7, r1
2000055c:	7812      	ldrb	r2, [r2, #0]
2000055e:	7809      	ldrb	r1, [r1, #0]
20000560:	400a      	ands	r2, r1
20000562:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000564:	231e      	movs	r3, #30
20000566:	18fb      	adds	r3, r7, r3
20000568:	781a      	ldrb	r2, [r3, #0]
2000056a:	231f      	movs	r3, #31
2000056c:	18fb      	adds	r3, r7, r3
2000056e:	781b      	ldrb	r3, [r3, #0]
20000570:	0011      	movs	r1, r2
20000572:	0018      	movs	r0, r3
20000574:	f7ff fefc 	bl	20000370 <graphic_write_data>
20000578:	e000      	b.n	2000057c <pixel+0x16e>
		return;
2000057a:	46c0      	nop			; (mov r8, r8)
}
2000057c:	46bd      	mov	sp, r7
2000057e:	b008      	add	sp, #32
20000580:	bdb0      	pop	{r4, r5, r7, pc}
20000582:	46c0      	nop			; (mov r8, r8)
20000584:	2000075c 	andcs	r0, r0, ip, asr r7

20000588 <set_object_speed>:
void set_object_speed(POBJECT object, int speedx, int speedy){
20000588:	b580      	push	{r7, lr}
2000058a:	b084      	sub	sp, #16
2000058c:	af00      	add	r7, sp, #0
2000058e:	60f8      	str	r0, [r7, #12]
20000590:	60b9      	str	r1, [r7, #8]
20000592:	607a      	str	r2, [r7, #4]
	
}
20000594:	46c0      	nop			; (mov r8, r8)
20000596:	46bd      	mov	sp, r7
20000598:	b004      	add	sp, #16
2000059a:	bd80      	pop	{r7, pc}

2000059c <draw_object>:
void draw_object(POBJECT object){
2000059c:	b580      	push	{r7, lr}
2000059e:	b084      	sub	sp, #16
200005a0:	af00      	add	r7, sp, #0
200005a2:	6078      	str	r0, [r7, #4]
	int i, j;
	for(i = 0; i < ( object->geo->sizeY ); i++){
200005a4:	2300      	movs	r3, #0
200005a6:	60fb      	str	r3, [r7, #12]
200005a8:	e017      	b.n	200005da <draw_object+0x3e>
		for(j =0; j < ( object->geo->sizeX ); j++){
200005aa:	2300      	movs	r3, #0
200005ac:	60bb      	str	r3, [r7, #8]
200005ae:	e00b      	b.n	200005c8 <draw_object+0x2c>
			pixel( object->posx, object->posy,1 );
200005b0:	687b      	ldr	r3, [r7, #4]
200005b2:	68db      	ldr	r3, [r3, #12]
200005b4:	0018      	movs	r0, r3
200005b6:	687b      	ldr	r3, [r7, #4]
200005b8:	691b      	ldr	r3, [r3, #16]
200005ba:	2201      	movs	r2, #1
200005bc:	0019      	movs	r1, r3
200005be:	f7ff ff26 	bl	2000040e <pixel>
		for(j =0; j < ( object->geo->sizeX ); j++){
200005c2:	68bb      	ldr	r3, [r7, #8]
200005c4:	3301      	adds	r3, #1
200005c6:	60bb      	str	r3, [r7, #8]
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	681b      	ldr	r3, [r3, #0]
200005cc:	685b      	ldr	r3, [r3, #4]
200005ce:	68ba      	ldr	r2, [r7, #8]
200005d0:	429a      	cmp	r2, r3
200005d2:	dbed      	blt.n	200005b0 <draw_object+0x14>
	for(i = 0; i < ( object->geo->sizeY ); i++){
200005d4:	68fb      	ldr	r3, [r7, #12]
200005d6:	3301      	adds	r3, #1
200005d8:	60fb      	str	r3, [r7, #12]
200005da:	687b      	ldr	r3, [r7, #4]
200005dc:	681b      	ldr	r3, [r3, #0]
200005de:	689b      	ldr	r3, [r3, #8]
200005e0:	68fa      	ldr	r2, [r7, #12]
200005e2:	429a      	cmp	r2, r3
200005e4:	dbe1      	blt.n	200005aa <draw_object+0xe>
		}
	}
}
200005e6:	46c0      	nop			; (mov r8, r8)
200005e8:	46bd      	mov	sp, r7
200005ea:	b004      	add	sp, #16
200005ec:	bd80      	pop	{r7, pc}

200005ee <clear_object>:
void clear_object(POBJECT object){
200005ee:	b580      	push	{r7, lr}
200005f0:	b082      	sub	sp, #8
200005f2:	af00      	add	r7, sp, #0
200005f4:	6078      	str	r0, [r7, #4]
	int i, j;
	for(i = 0; i < ( object->geo->sizeY ); i++){
200005f6:	46c0      	nop			; (mov r8, r8)
200005f8:	46bd      	mov	sp, r7
200005fa:	b002      	add	sp, #8
200005fc:	bd80      	pop	{r7, pc}

200005fe <graphic_initialize>:
		for(j =0; j < ( object->geo->sizeX ); j++){
200005fe:	b580      	push	{r7, lr}
20000600:	af00      	add	r7, sp, #0
			pixel( object->posx, object->posy,0 );
20000602:	2040      	movs	r0, #64	; 0x40
20000604:	f7ff fd56 	bl	200000b4 <graphic_ctrl_bit_set>
		}
20000608:	200a      	movs	r0, #10
2000060a:	f7ff fd2c 	bl	20000066 <delay_micro>
	}
}
2000060e:	2078      	movs	r0, #120	; 0x78
20000610:	f7ff fd6e 	bl	200000f0 <graphic_ctrl_bit_clear>
void move_object(POBJECT object){
20000614:	201e      	movs	r0, #30
20000616:	f7ff fd3c 	bl	20000092 <delay_milli>
	clear_object(object);
	int newXPos = object->dirx + object->posx;
2000061a:	2020      	movs	r0, #32
2000061c:	f7ff fd4a 	bl	200000b4 <graphic_ctrl_bit_set>
	int newYPos = object->diry + object->posy;
20000620:	2064      	movs	r0, #100	; 0x64
20000622:	f7ff fd36 	bl	20000092 <delay_milli>
	
20000626:	2118      	movs	r1, #24
20000628:	203e      	movs	r0, #62	; 0x3e
2000062a:	f7ff fe81 	bl	20000330 <graphic_write_command>
	if( newXPos < 1)
2000062e:	2118      	movs	r1, #24
20000630:	203f      	movs	r0, #63	; 0x3f
20000632:	f7ff fe7d 	bl	20000330 <graphic_write_command>
		object->dirx = ~( object->dirx );
20000636:	2118      	movs	r1, #24
20000638:	20c0      	movs	r0, #192	; 0xc0
2000063a:	f7ff fe79 	bl	20000330 <graphic_write_command>
	if( newXPos > 128 && object->geo->sizeX > 128 )
2000063e:	2118      	movs	r1, #24
20000640:	2040      	movs	r0, #64	; 0x40
20000642:	f7ff fe75 	bl	20000330 <graphic_write_command>
		object->dirx = ~( object->dirx );
20000646:	2118      	movs	r1, #24
20000648:	20b8      	movs	r0, #184	; 0xb8
2000064a:	f7ff fe71 	bl	20000330 <graphic_write_command>
	if( newYPos < 1)
2000064e:	2000      	movs	r0, #0
20000650:	f7ff fd68 	bl	20000124 <select_controller>
		object->diry = ~( object->diry );
20000654:	46c0      	nop			; (mov r8, r8)
20000656:	46bd      	mov	sp, r7
20000658:	bd80      	pop	{r7, pc}

2000065a <init_app>:
	if( newYPos > 64 && object->geo->sizeY > 64 )
2000065a:	b580      	push	{r7, lr}
2000065c:	af00      	add	r7, sp, #0
		object->diry = ~( object->diry );
2000065e:	4b06      	ldr	r3, [pc, #24]	; (20000678 <init_app+0x1e>)
20000660:	4a06      	ldr	r2, [pc, #24]	; (2000067c <init_app+0x22>)
20000662:	601a      	str	r2, [r3, #0]
	draw_object(object);
20000664:	4b06      	ldr	r3, [pc, #24]	; (20000680 <init_app+0x26>)
20000666:	2200      	movs	r2, #0
20000668:	801a      	strh	r2, [r3, #0]
}
2000066a:	4b06      	ldr	r3, [pc, #24]	; (20000684 <init_app+0x2a>)
2000066c:	4a03      	ldr	r2, [pc, #12]	; (2000067c <init_app+0x22>)
2000066e:	601a      	str	r2, [r3, #0]
static OBJECT ball = {
20000670:	46c0      	nop			; (mov r8, r8)
20000672:	46bd      	mov	sp, r7
20000674:	bd80      	pop	{r7, pc}
20000676:	46c0      	nop			; (mov r8, r8)
20000678:	40021000 	andmi	r1, r2, r0
2000067c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000680:	40021008 	andmi	r1, r2, r8
20000684:	40021020 	andmi	r1, r2, r0, lsr #32

20000688 <main>:
	&ball_geometry,
	0,0,
20000688:	b580      	push	{r7, lr}
2000068a:	b082      	sub	sp, #8
2000068c:	af00      	add	r7, sp, #0
	1,1,
	draw_object,
2000068e:	f7ff ffe4 	bl	2000065a <init_app>
	clear_object,
20000692:	f7ff ffb4 	bl	200005fe <graphic_initialize>
	move_object,
20000696:	f7ff fe8e 	bl	200003b6 <graphic_clear_screen>
	set_object_speed
2000069a:	2300      	movs	r3, #0
2000069c:	607b      	str	r3, [r7, #4]
2000069e:	e008      	b.n	200006b2 <main+0x2a>
};
200006a0:	687b      	ldr	r3, [r7, #4]
200006a2:	2201      	movs	r2, #1
200006a4:	210a      	movs	r1, #10
200006a6:	0018      	movs	r0, r3
200006a8:	f7ff feb1 	bl	2000040e <pixel>
	set_object_speed
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	3301      	adds	r3, #1
200006b0:	607b      	str	r3, [r7, #4]
200006b2:	687b      	ldr	r3, [r7, #4]
200006b4:	2b7f      	cmp	r3, #127	; 0x7f
200006b6:	d9f3      	bls.n	200006a0 <main+0x18>

void graphic_initialize(void){
200006b8:	2300      	movs	r3, #0
200006ba:	607b      	str	r3, [r7, #4]
200006bc:	e008      	b.n	200006d0 <main+0x48>
	graphic_ctrl_bit_set(B_E);
200006be:	687b      	ldr	r3, [r7, #4]
200006c0:	2201      	movs	r2, #1
200006c2:	0019      	movs	r1, r3
200006c4:	200a      	movs	r0, #10
200006c6:	f7ff fea2 	bl	2000040e <pixel>
void graphic_initialize(void){
200006ca:	687b      	ldr	r3, [r7, #4]
200006cc:	3301      	adds	r3, #1
200006ce:	607b      	str	r3, [r7, #4]
200006d0:	687b      	ldr	r3, [r7, #4]
200006d2:	2b3f      	cmp	r3, #63	; 0x3f
200006d4:	d9f3      	bls.n	200006be <main+0x36>
	delay_micro(10);
200006d6:	23fa      	movs	r3, #250	; 0xfa
200006d8:	005b      	lsls	r3, r3, #1
200006da:	0018      	movs	r0, r3
200006dc:	f7ff fcd9 	bl	20000092 <delay_milli>
	
200006e0:	2300      	movs	r3, #0
200006e2:	607b      	str	r3, [r7, #4]
200006e4:	e008      	b.n	200006f8 <main+0x70>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E );
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	2200      	movs	r2, #0
200006ea:	210a      	movs	r1, #10
200006ec:	0018      	movs	r0, r3
200006ee:	f7ff fe8e 	bl	2000040e <pixel>
	
200006f2:	687b      	ldr	r3, [r7, #4]
200006f4:	3301      	adds	r3, #1
200006f6:	607b      	str	r3, [r7, #4]
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	2b7f      	cmp	r3, #127	; 0x7f
200006fc:	d9f3      	bls.n	200006e6 <main+0x5e>
	delay_milli(30);
200006fe:	2300      	movs	r3, #0
20000700:	607b      	str	r3, [r7, #4]
20000702:	e008      	b.n	20000716 <main+0x8e>
	
20000704:	687b      	ldr	r3, [r7, #4]
20000706:	2200      	movs	r2, #0
20000708:	0019      	movs	r1, r3
2000070a:	200a      	movs	r0, #10
2000070c:	f7ff fe7f 	bl	2000040e <pixel>
	delay_milli(30);
20000710:	687b      	ldr	r3, [r7, #4]
20000712:	3301      	adds	r3, #1
20000714:	607b      	str	r3, [r7, #4]
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	2b3f      	cmp	r3, #63	; 0x3f
2000071a:	d9f3      	bls.n	20000704 <main+0x7c>
	graphic_ctrl_bit_set(B_RST);
2000071c:	2300      	movs	r3, #0
	delay_milli(100);
	graphic_write_command(LCD_OFF,			B_CS1 | B_CS2);
2000071e:	0018      	movs	r0, r3
20000720:	46bd      	mov	sp, r7
20000722:	b002      	add	sp, #8
20000724:	bd80      	pop	{r7, pc}
20000726:	46c0      	nop			; (mov r8, r8)

20000728 <ball_geometry>:
20000728:	0000000c 	andeq	r0, r0, ip
2000072c:	00000004 	andeq	r0, r0, r4
20000730:	00000004 	andeq	r0, r0, r4
20000734:	02000100 	andeq	r0, r0, #0, 2
20000738:	01010001 	tsteq	r1, r1
2000073c:	03010201 	movweq	r0, #4609	; 0x1201
20000740:	01020002 	tsteq	r2, r2
20000744:	03020202 	movweq	r0, #8706	; 0x2202
20000748:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...
2000075c:	20000458 	andcs	r0, r0, r8, asr r4
20000760:	20000462 	andcs	r0, r0, r2, ror #8
20000764:	2000046c 	andcs	r0, r0, ip, ror #8
20000768:	20000476 	andcs	r0, r0, r6, ror r4
2000076c:	20000480 	andcs	r0, r0, r0, lsl #9
20000770:	2000048a 	andcs	r0, r0, sl, lsl #9
20000774:	20000494 	mulcs	r0, r4, r4
20000778:	2000049e 	mulcs	r0, lr, r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000053d 	andeq	r0, r0, sp, lsr r5
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000195 	muleq	r0, r5, r1
  10:	0002170c 	andeq	r1, r2, ip, lsl #14
  14:	00029b00 	andeq	r9, r2, r0, lsl #22
	...
  24:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
  28:	46010000 	strmi	r0, [r1], -r0
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	74080103 	strvc	r0, [r8], #-259	; 0xfffffefd
  34:	04000000 	streq	r0, [r0], #-0
  38:	00000067 	andeq	r0, r0, r7, rrx
  3c:	58470102 	stmdapl	r7, {r1, r8}^
  40:	05000000 	streq	r0, [r0, #-0]
  44:	48010078 	stmdami	r1, {r3, r4, r5, r6}
  48:	00000030 	andeq	r0, r0, r0, lsr r0
  4c:	00790500 	rsbseq	r0, r9, r0, lsl #10
  50:	00304901 	eorseq	r4, r0, r1, lsl #18
  54:	00010000 	andeq	r0, r1, r0
  58:	00006e02 	andeq	r6, r0, r2, lsl #28
  5c:	374a0100 	strbcc	r0, [sl, -r0, lsl #2]
  60:	04000000 	streq	r0, [r0], #-0
  64:	0000011b 	andeq	r0, r0, fp, lsl r1
  68:	9f4c0134 	svcls	0x004c0134
  6c:	06000000 	streq	r0, [r0], -r0
  70:	0000020d 	andeq	r0, r0, sp, lsl #4
  74:	009f4d01 	addseq	r4, pc, r1, lsl #26
  78:	06000000 	streq	r0, [r0], -r0
  7c:	000000b2 	strheq	r0, [r0], -r2
  80:	009f4e01 	addseq	r4, pc, r1, lsl #28
  84:	06040000 	streq	r0, [r4], -r0
  88:	000000b8 	strheq	r0, [r0], -r8
  8c:	009f4f01 	addseq	r4, pc, r1, lsl #30
  90:	05080000 	streq	r0, [r8, #-0]
  94:	01007870 	tsteq	r0, r0, ror r8
  98:	0000a650 	andeq	sl, r0, r0, asr r6
  9c:	07000c00 	streq	r0, [r0, -r0, lsl #24]
  a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  a4:	58080074 	stmdapl	r8, {r2, r4, r5, r6}
  a8:	b6000000 	strlt	r0, [r0], -r0
  ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  b0:	000000b6 	strheq	r0, [r0], -r6
  b4:	04030013 	streq	r0, [r3], #-19	; 0xffffffed
  b8:	00010e07 	andeq	r0, r1, r7, lsl #28
  bc:	00010200 	andeq	r0, r1, r0, lsl #4
  c0:	51010000 	mrspl	r0, (UNDEF: 1)
  c4:	00000063 	andeq	r0, r0, r3, rrx
  c8:	00000002 	andeq	r0, r0, r2
  cc:	d3510100 	cmple	r1, #0, 2
  d0:	0a000000 	beq	d8 <startup-0x1fffff28>
  d4:	00006304 	andeq	r6, r0, r4, lsl #6
  d8:	00960b00 	addseq	r0, r6, r0, lsl #22
  dc:	52010000 	andpl	r0, r1, #0
  e0:	000000bd 	strheq	r0, [r0], -sp
  e4:	07280305 	streq	r0, [r8, -r5, lsl #6]!
  e8:	7d042000 	stcvc	0, cr2, [r4, #-0]
  ec:	24000002 	strcs	r0, [r0], #-2
  f0:	01635701 	cmneq	r3, r1, lsl #14
  f4:	67050000 	strvs	r0, [r5, -r0]
  f8:	01006f65 	tsteq	r0, r5, ror #30
  fc:	0000c858 	andeq	ip, r0, r8, asr r8
 100:	2f060000 	svccs	0x00060000
 104:	01000000 	mrseq	r0, (UNDEF: 0)
 108:	00009f59 	andeq	r9, r0, r9, asr pc
 10c:	34060400 	strcc	r0, [r6], #-1024	; 0xfffffc00
 110:	01000000 	mrseq	r0, (UNDEF: 0)
 114:	00009f59 	andeq	r9, r0, r9, asr pc
 118:	8c060800 	stchi	8, cr0, [r6], {-0}
 11c:	01000000 	mrseq	r0, (UNDEF: 0)
 120:	00009f5a 	andeq	r9, r0, sl, asr pc
 124:	91060c00 	tstls	r6, r0, lsl #24
 128:	01000000 	mrseq	r0, (UNDEF: 0)
 12c:	00009f5a 	andeq	r9, r0, sl, asr pc
 130:	42061000 	andmi	r1, r6, #0
 134:	01000001 	tsteq	r0, r1
 138:	0001745b 	andeq	r7, r1, fp, asr r4
 13c:	f3061400 	vshl.u8	d1, d0, d6
 140:	01000000 	mrseq	r0, (UNDEF: 0)
 144:	0001745c 	andeq	r7, r1, ip, asr r4
 148:	18061800 	stmdane	r6, {fp, ip}
 14c:	01000000 	mrseq	r0, (UNDEF: 0)
 150:	0001745d 	andeq	r7, r1, sp, asr r4
 154:	82061c00 	andhi	r1, r6, #0, 24
 158:	01000000 	mrseq	r0, (UNDEF: 0)
 15c:	00018f5e 	andeq	r8, r1, lr, asr pc
 160:	0c002000 	stceq	0, cr2, [r0], {-0}
 164:	0000016e 	andeq	r0, r0, lr, ror #2
 168:	00016e0d 	andeq	r6, r1, sp, lsl #28
 16c:	040a0000 	streq	r0, [sl], #-0
 170:	000000ea 	andeq	r0, r0, sl, ror #1
 174:	0163040a 	cmneq	r3, sl, lsl #8
 178:	8f0c0000 	svchi	0x000c0000
 17c:	0d000001 	stceq	0, cr0, [r0, #-4]
 180:	0000016e 	andeq	r0, r0, lr, ror #2
 184:	00009f0d 	andeq	r9, r0, sp, lsl #30
 188:	009f0d00 	addseq	r0, pc, r0, lsl #26
 18c:	0a000000 	beq	194 <startup-0x1ffffe6c>
 190:	00017a04 	andeq	r7, r1, r4, lsl #20
 194:	02ec0200 	rsceq	r0, ip, #0, 4
 198:	5f010000 	svcpl	0x00010000
 19c:	0000016e 	andeq	r0, r0, lr, ror #2
 1a0:	0000be0e 	andeq	fp, r0, lr, lsl #28
 1a4:	01260100 			; <UNDEFINED> instruction: 0x01260100
 1a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 1ac:	20000688 	andcs	r0, r0, r8, lsl #13
 1b0:	0000009e 	muleq	r0, lr, r0
 1b4:	01c89c01 	biceq	r9, r8, r1, lsl #24
 1b8:	690f0000 	stmdbvs	pc, {}	; <UNPREDICTABLE>
 1bc:	01270100 			; <UNDEFINED> instruction: 0x01270100
 1c0:	000000b6 	strheq	r0, [r0], -r6
 1c4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 1c8:	00012510 	andeq	r2, r1, r0, lsl r5
 1cc:	01200100 			; <UNDEFINED> instruction: 0x01200100
 1d0:	2000065a 	andcs	r0, r0, sl, asr r6
 1d4:	0000002e 	andeq	r0, r0, lr, lsr #32
 1d8:	cf119c01 	svcgt	0x00119c01
 1dc:	01000000 	mrseq	r0, (UNDEF: 0)
 1e0:	05fe0110 	ldrbeq	r0, [lr, #272]!	; 0x110
 1e4:	005c2000 	subseq	r2, ip, r0
 1e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 1ec:	00026412 	andeq	r6, r2, r2, lsl r4
 1f0:	010d0100 	mrseq	r0, (UNDEF: 29)
 1f4:	200005ee 	andcs	r0, r0, lr, ror #11
 1f8:	00000010 	andeq	r0, r0, r0, lsl r0
 1fc:	02129c01 	andseq	r9, r2, #256	; 0x100
 200:	6a130000 	bvs	4c0208 <startup-0x1fb3fdf8>
 204:	01000002 	tsteq	r0, r2
 208:	0195010d 	orrseq	r0, r5, sp, lsl #2
 20c:	91020000 	mrsls	r0, (UNDEF: 2)
 210:	82140074 	andshi	r0, r4, #116	; 0x74
 214:	01000002 	tsteq	r0, r2
 218:	059c0105 	ldreq	r0, [ip, #261]	; 0x105
 21c:	00522000 	subseq	r2, r2, r0
 220:	9c010000 	stcls	0, cr0, [r1], {-0}
 224:	00000252 	andeq	r0, r0, r2, asr r2
 228:	00026a13 	andeq	r6, r2, r3, lsl sl
 22c:	01050100 	mrseq	r0, (UNDEF: 21)
 230:	00000195 	muleq	r0, r5, r1
 234:	0f6c9102 	svceq	0x006c9102
 238:	06010069 	streq	r0, [r1], -r9, rrx
 23c:	00009f01 	andeq	r9, r0, r1, lsl #30
 240:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 244:	01006a0f 	tsteq	r0, pc, lsl #20
 248:	009f0106 	addseq	r0, pc, r6, lsl #2
 24c:	91020000 	mrsls	r0, (UNDEF: 2)
 250:	71120070 	tstvc	r2, r0, ror r0
 254:	01000001 	tsteq	r0, r1
 258:	05880102 	streq	r0, [r8, #258]	; 0x102
 25c:	00142000 	andseq	r2, r4, r0
 260:	9c010000 	stcls	0, cr0, [r1], {-0}
 264:	00000296 	muleq	r0, r6, r2
 268:	00026a13 	andeq	r6, r2, r3, lsl sl
 26c:	01020100 	mrseq	r0, (UNDEF: 18)
 270:	00000195 	muleq	r0, r5, r1
 274:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 278:	000002de 	ldrdeq	r0, [r0], -lr
 27c:	9f010201 	svcls	0x00010201
 280:	02000000 	andeq	r0, r0, #0
 284:	e5137091 	ldr	r7, [r3, #-145]	; 0xffffff6f
 288:	01000002 	tsteq	r0, r2
 28c:	009f0102 	addseq	r0, pc, r2, lsl #2
 290:	91020000 	mrsls	r0, (UNDEF: 2)
 294:	6115006c 	tstvs	r5, ip, rrx
 298:	01000000 	mrseq	r0, (UNDEF: 0)
 29c:	00040edd 	ldrdeq	r0, [r4], -sp
 2a0:	00017a20 	andeq	r7, r1, r0, lsr #20
 2a4:	089c0100 	ldmeq	ip, {r8}
 2a8:	16000003 	strne	r0, [r0], -r3
 2ac:	dd010078 	stcle	0, cr0, [r1, #-480]	; 0xfffffe20
 2b0:	000000b6 	strheq	r0, [r0], -r6
 2b4:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
 2b8:	dd010079 	stcle	0, cr0, [r1, #-484]	; 0xfffffe1c
 2bc:	000000b6 	strheq	r0, [r0], -r6
 2c0:	16589102 	ldrbne	r9, [r8], -r2, lsl #2
 2c4:	00746573 	rsbseq	r6, r4, r3, ror r5
 2c8:	00b6dd01 	adcseq	sp, r6, r1, lsl #26
 2cc:	91020000 	mrsls	r0, (UNDEF: 2)
 2d0:	01471754 	cmpeq	r7, r4, asr r7
 2d4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
 2d8:	00000025 	andeq	r0, r0, r5, lsr #32
 2dc:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 2e0:	de010063 	cdple	0, 0, cr0, cr1, cr3, {3}
 2e4:	00000025 	andeq	r0, r0, r5, lsr #32
 2e8:	17679102 	strbne	r9, [r7, -r2, lsl #2]!
 2ec:	00000024 	andeq	r0, r0, r4, lsr #32
 2f0:	0025de01 	eoreq	sp, r5, r1, lsl #28
 2f4:	91020000 	mrsls	r0, (UNDEF: 2)
 2f8:	014c176e 	cmpeq	ip, lr, ror #14
 2fc:	df010000 	svcle	0x00010000
 300:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 304:	00689102 	rsbeq	r9, r8, r2, lsl #2
 308:	0002f415 	andeq	pc, r2, r5, lsl r4	; <UNPREDICTABLE>
 30c:	b6d40100 	ldrblt	r0, [r4], r0, lsl #2
 310:	58200003 	stmdapl	r0!, {r0, r1}
 314:	01000000 	mrseq	r0, (UNDEF: 0)
 318:	00034a9c 	muleq	r3, ip, sl
 31c:	03bc1900 			; <UNDEFINED> instruction: 0x03bc1900
 320:	004a2000 	subeq	r2, sl, r0
 324:	69180000 	ldmdbvs	r8, {}	; <UNPREDICTABLE>
 328:	9fd50100 	svcls	0x00d50100
 32c:	02000000 	andeq	r0, r0, #0
 330:	e0197491 	muls	r9, r1, r4
 334:	1a200003 	bne	800348 <startup-0x1f7ffcb8>
 338:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 33c:	d801006b 	stmdale	r1, {r0, r1, r3, r5, r6}
 340:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 344:	00709102 	rsbseq	r9, r0, r2, lsl #2
 348:	5e150000 	cdppl	0, 1, cr0, cr5, cr0, {0}
 34c:	01000001 	tsteq	r0, r1
 350:	000370cd 	andeq	r7, r3, sp, asr #1
 354:	00004620 	andeq	r4, r0, r0, lsr #12
 358:	7c9c0100 	ldfvcs	f0, [ip], {0}
 35c:	1a000003 	bne	370 <startup-0x1ffffc90>
 360:	0000005c 	andeq	r0, r0, ip, asr r0
 364:	0025cd01 	eoreq	ip, r5, r1, lsl #26
 368:	91020000 	mrsls	r0, (UNDEF: 2)
 36c:	00241a77 	eoreq	r1, r4, r7, ror sl
 370:	cd010000 	stcgt	0, cr0, [r1, #-0]
 374:	00000025 	andeq	r0, r0, r5, lsr #32
 378:	00769102 	rsbseq	r9, r6, r2, lsl #2
 37c:	00003915 	andeq	r3, r0, r5, lsl r9
 380:	30c70100 	sbccc	r0, r7, r0, lsl #2
 384:	40200003 	eormi	r0, r0, r3
 388:	01000000 	mrseq	r0, (UNDEF: 0)
 38c:	0003ae9c 	muleq	r3, ip, lr
 390:	00471a00 	subeq	r1, r7, r0, lsl #20
 394:	c7010000 	strgt	r0, [r1, -r0]
 398:	00000025 	andeq	r0, r0, r5, lsr #32
 39c:	1a779102 	bne	1de47ac <startup-0x1e21b854>
 3a0:	00000024 	andeq	r0, r0, r4, lsr #32
 3a4:	0025c701 	eoreq	ip, r5, r1, lsl #14
 3a8:	91020000 	mrsls	r0, (UNDEF: 2)
 3ac:	a4150076 	ldrge	r0, [r5], #-118	; 0xffffff8a
 3b0:	01000000 	mrseq	r0, (UNDEF: 0)
 3b4:	0002b2b3 			; <UNDEFINED> instruction: 0x0002b2b3
 3b8:	00007e20 	andeq	r7, r0, r0, lsr #28
 3bc:	e09c0100 	adds	r0, ip, r0, lsl #2
 3c0:	1a000003 	bne	3d4 <startup-0x1ffffc2c>
 3c4:	00000012 	andeq	r0, r0, r2, lsl r0
 3c8:	0025b301 	eoreq	fp, r5, r1, lsl #6
 3cc:	91020000 	mrsls	r0, (UNDEF: 2)
 3d0:	00241a77 	eoreq	r1, r4, r7, ror sl
 3d4:	b3010000 	movwlt	r0, #4096	; 0x1000
 3d8:	00000025 	andeq	r0, r0, r5, lsr #32
 3dc:	00769102 	rsbseq	r9, r6, r2, lsl #2
 3e0:	00004f1b 	andeq	r4, r0, fp, lsl pc
 3e4:	25ae0100 	strcs	r0, [lr, #256]!	; 0x100
 3e8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
 3ec:	2a200002 	bcs	8003fc <startup-0x1f7ffc04>
 3f0:	01000000 	mrseq	r0, (UNDEF: 0)
 3f4:	0004089c 	muleq	r4, ip, r8
 3f8:	00241a00 	eoreq	r1, r4, r0, lsl #20
 3fc:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
 400:	00000030 	andeq	r0, r0, r0, lsr r0
 404:	00779102 	rsbseq	r9, r7, r2, lsl #2
 408:	00028e1b 	andeq	r8, r2, fp, lsl lr
 40c:	25930100 	ldrcs	r0, [r3, #256]	; 0x100
 410:	f4000000 	vst4.8	{d0-d3}, [r0], r0
 414:	94200001 	strtls	r0, [r0], #-1
 418:	01000000 	mrseq	r0, (UNDEF: 0)
 41c:	00043d9c 	muleq	r4, ip, sp
 420:	00241a00 	eoreq	r1, r4, r0, lsl #20
 424:	93010000 	movwls	r0, #4096	; 0x1000
 428:	00000025 	andeq	r0, r0, r5, lsr #32
 42c:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 430:	01005652 	tsteq	r0, r2, asr r6
 434:	00002594 	muleq	r0, r4, r5
 438:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 43c:	01821500 	orreq	r1, r2, r0, lsl #10
 440:	7f010000 	svcvc	0x00010000
 444:	2000017e 	andcs	r0, r0, lr, ror r1
 448:	00000076 	andeq	r0, r0, r6, ror r0
 44c:	045f9c01 	ldrbeq	r9, [pc], #-3073	; 454 <startup-0x1ffffbac>
 450:	63180000 	tstvs	r8, #0
 454:	25800100 	strcs	r0, [r0, #256]	; 0x100
 458:	02000000 	andeq	r0, r0, #0
 45c:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 460:	0000001d 	andeq	r0, r0, sp, lsl r0
 464:	01246b01 			; <UNDEFINED> instruction: 0x01246b01
 468:	005a2000 	subseq	r2, sl, r0
 46c:	9c010000 	stcls	0, cr0, [r1], {-0}
 470:	00000483 	andeq	r0, r0, r3, lsl #9
 474:	0000241a 	andeq	r2, r0, sl, lsl r4
 478:	256b0100 	strbcs	r0, [fp, #-256]!	; 0xffffff00
 47c:	02000000 	andeq	r0, r0, #0
 480:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 484:	000000e2 	andeq	r0, r0, r2, ror #1
 488:	00f06701 	rscseq	r6, r0, r1, lsl #14
 48c:	00342000 	eorseq	r2, r4, r0
 490:	9c010000 	stcls	0, cr0, [r1], {-0}
 494:	000004a5 	andeq	r0, r0, r5, lsr #9
 498:	01007816 	tsteq	r0, r6, lsl r8
 49c:	00002567 	andeq	r2, r0, r7, ror #10
 4a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4a4:	00f91c00 	rscseq	r1, r9, r0, lsl #24
 4a8:	62010000 	andvs	r0, r1, #0
 4ac:	200000b4 	strhcs	r0, [r0], -r4
 4b0:	0000003c 	andeq	r0, r0, ip, lsr r0
 4b4:	04c79c01 	strbeq	r9, [r7], #3073	; 0xc01
 4b8:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
 4bc:	25620100 	strbcs	r0, [r2, #-256]!	; 0xffffff00
 4c0:	02000000 	andeq	r0, r0, #0
 4c4:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 4c8:	00000152 	andeq	r0, r0, r2, asr r1
 4cc:	00924001 	addseq	r4, r2, r1
 4d0:	00222000 	eoreq	r2, r2, r0
 4d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 4d8:	000004ea 	andeq	r0, r0, sl, ror #9
 4dc:	00736d16 	rsbseq	r6, r3, r6, lsl sp
 4e0:	00b64001 	adcseq	r4, r6, r1
 4e4:	91020000 	mrsls	r0, (UNDEF: 2)
 4e8:	c3150074 	tstgt	r5, #116	; 0x74
 4ec:	01000000 	mrseq	r0, (UNDEF: 0)
 4f0:	00006638 	andeq	r6, r0, r8, lsr r6
 4f4:	00002c20 	andeq	r2, r0, r0, lsr #24
 4f8:	0d9c0100 	ldfeqs	f0, [ip]
 4fc:	16000005 	strne	r0, [r0], -r5
 500:	01007375 	tsteq	r0, r5, ror r3
 504:	0000b638 	andeq	fp, r0, r8, lsr r6
 508:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 50c:	02711d00 	rsbseq	r1, r1, #0, 26
 510:	34010000 	strcc	r0, [r1], #-0
 514:	20000054 	andcs	r0, r0, r4, asr r0
 518:	00000012 	andeq	r0, r0, r2, lsl r0
 51c:	361e9c01 	ldrcc	r9, [lr], -r1, lsl #24
 520:	01000001 	tsteq	r0, r1
 524:	0000102c 	andeq	r1, r0, ip, lsr #32
 528:	00004420 	andeq	r4, r0, r0, lsr #8
 52c:	1e9c0100 	fmlnee	f0, f4, f0
 530:	0000000a 	andeq	r0, r0, sl
 534:	00002401 	andeq	r2, r0, r1, lsl #8
 538:	000c2000 	andeq	r2, ip, r0
 53c:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  30:	0b3a0b0b 	bleq	e82c64 <startup-0x1f17d39c>
  34:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  38:	0d050000 	stceq	0, cr0, [r5, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	000b3813 	andeq	r3, fp, r3, lsl r8
  48:	000d0600 	andeq	r0, sp, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  54:	00000b38 	andeq	r0, r0, r8, lsr fp
  58:	0b002407 	bleq	907c <startup-0x1fff6f84>
  5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  60:	08000008 	stmdaeq	r0, {r3}
  64:	13490101 	movtne	r0, #37121	; 0x9101
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  70:	000b2f13 	andeq	r2, fp, r3, lsl pc
  74:	000f0a00 	andeq	r0, pc, r0, lsl #20
  78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  7c:	340b0000 	strcc	r0, [fp], #-0
  80:	3a0e0300 	bcc	380c88 <startup-0x1fc7f378>
  84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  88:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  8c:	0c000018 	stceq	0, cr0, [r0], {24}
  90:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  94:	00001301 	andeq	r1, r0, r1, lsl #6
  98:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  a4:	0b3a0e03 	bleq	e838b8 <startup-0x1f17c748>
  a8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  ac:	01111349 	tsteq	r1, r9, asr #6
  b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b8:	0f000013 	svceq	0x00000013
  bc:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  c4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c8:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
  cc:	03193f00 	tsteq	r9, #0, 30
  d0:	3b0b3a0e 	blcc	2ce910 <startup-0x1fd316f0>
  d4:	11192705 	tstne	r9, r5, lsl #14
  d8:	40061201 	andmi	r1, r6, r1, lsl #4
  dc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  e0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
  e4:	03193f00 	tsteq	r9, #0, 30
  e8:	3b0b3a0e 	blcc	2ce928 <startup-0x1fd316d8>
  ec:	11192705 	tstne	r9, r5, lsl #14
  f0:	40061201 	andmi	r1, r6, r1, lsl #4
  f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f8:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
  fc:	03193f01 	tsteq	r9, #1, 30
 100:	3b0b3a0e 	blcc	2ce940 <startup-0x1fd316c0>
 104:	11192705 	tstne	r9, r5, lsl #14
 108:	40061201 	andmi	r1, r6, r1, lsl #4
 10c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 110:	00001301 	andeq	r1, r0, r1, lsl #6
 114:	03000513 	movweq	r0, #1299	; 0x513
 118:	3b0b3a0e 	blcc	2ce958 <startup-0x1fd316a8>
 11c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 120:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 124:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 128:	0b3a0e03 	bleq	e8393c <startup-0x1f17c6c4>
 12c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 130:	06120111 			; <UNDEFINED> instruction: 0x06120111
 134:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 138:	00130119 	andseq	r0, r3, r9, lsl r1
 13c:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 140:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	01111927 	tsteq	r1, r7, lsr #18
 14c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 150:	01194296 			; <UNDEFINED> instruction: 0x01194296
 154:	16000013 			; <UNDEFINED> instruction: 0x16000013
 158:	08030005 	stmdaeq	r3, {r0, r2}
 15c:	0b3b0b3a 	bleq	ec2e4c <startup-0x1f13d1b4>
 160:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 164:	34170000 	ldrcc	r0, [r7], #-0
 168:	3a0e0300 	bcc	380d70 <startup-0x1fc7f290>
 16c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 170:	00180213 	andseq	r0, r8, r3, lsl r2
 174:	00341800 	eorseq	r1, r4, r0, lsl #16
 178:	0b3a0803 	bleq	e8218c <startup-0x1f17de74>
 17c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 180:	00001802 	andeq	r1, r0, r2, lsl #16
 184:	11010b19 	tstne	r1, r9, lsl fp
 188:	00061201 	andeq	r1, r6, r1, lsl #4
 18c:	00051a00 	andeq	r1, r5, r0, lsl #20
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 198:	00001802 	andeq	r1, r0, r2, lsl #16
 19c:	3f012e1b 	svccc	0x00012e1b
 1a0:	3a0e0319 	bcc	380e0c <startup-0x1fc7f1f4>
 1a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1a8:	11134919 	tstne	r3, r9, lsl r9
 1ac:	40061201 	andmi	r1, r6, r1, lsl #4
 1b0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1b4:	00001301 	andeq	r1, r0, r1, lsl #6
 1b8:	3f012e1c 	svccc	0x00012e1c
 1bc:	3a0e0319 	bcc	380e28 <startup-0x1fc7f1d8>
 1c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1c8:	97184006 	ldrls	r4, [r8, -r6]
 1cc:	13011942 	movwne	r1, #6466	; 0x1942
 1d0:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 1d4:	03193f00 	tsteq	r9, #0, 30
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	1119270b 	tstne	r9, fp, lsl #14
 1e0:	40061201 	andmi	r1, r6, r1, lsl #4
 1e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1e8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 1ec:	03193f00 	tsteq	r9, #0, 30
 1f0:	3b0b3a0e 	blcc	2cea30 <startup-0x1fd315d0>
 1f4:	1119270b 	tstne	r9, fp, lsl #14
 1f8:	40061201 	andmi	r1, r6, r1, lsl #4
 1fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 200:	Address 0x0000000000000200 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000716 	andeq	r0, r0, r6, lsl r7
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000726 	andcs	r0, r0, r6, lsr #14
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001eb 	andeq	r0, r0, fp, ror #3
   4:	00630002 	rsbeq	r0, r3, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	6d6f742f 	cfstrdvs	mvd7, [pc, #-188]!	; ffffff6c <ball_geometry+0xdffff844>
  24:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  28:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  2c:	572f7374 			; <UNDEFINED> instruction: 0x572f7374
  30:	2f4b524f 	svccs	0x004b524f
  34:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
  38:	4f656e69 	svcmi	0x00656e69
  3c:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
  40:	50646574 	rsbpl	r6, r4, r4, ror r5
  44:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  48:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
  4c:	672f676e 	strvs	r6, [pc, -lr, ror #14]!
  50:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  54:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  58:	616c7073 	smcvs	50947	; 0xc703
  5c:	73000079 	movwvc	r0, #121	; 0x79
  60:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  64:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  68:	00000100 	andeq	r0, r0, r0, lsl #2
  6c:	02050000 	andeq	r0, r5, #0
  70:	20000000 	andcs	r0, r0, r0
  74:	13012303 	movwne	r2, #4867	; 0x1303
  78:	0003025e 	andeq	r0, r3, lr, asr r2
  7c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
  80:	00001002 	andeq	r1, r0, r2
  84:	012b0320 			; <UNDEFINED> instruction: 0x012b0320
  88:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
  8c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  90:	06200601 	strteq	r0, [r0], -r1, lsl #12
  94:	2f9f3d67 	svccs	0x009f3d67
  98:	4b3d2f2f 	blmi	f4bd5c <startup-0x1f0b42a4>
  9c:	2f2f2f21 	svccs	0x002f2f21
  a0:	4b4b5e2a 	blmi	12d7950 <startup-0x1ed286b0>
  a4:	035c3b21 	cmpeq	ip, #33792	; 0x8400
  a8:	91674a1d 	cmnls	r7, sp, lsl sl
  ac:	d8677584 	stmdale	r7!, {r2, r7, r8, sl, ip, sp, lr}^
  b0:	12036767 	andne	r6, r3, #27000832	; 0x19c0000
  b4:	206e0374 	rsbcs	r0, lr, r4, ror r3
  b8:	034a1203 	movteq	r1, #41475	; 0xa203
  bc:	223d2070 	eorscs	r2, sp, #112	; 0x70
  c0:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
  c4:	243d223d 	ldrtcs	r2, [sp], #-573	; 0xfffffdc3
  c8:	3d3d3e4b 	ldccc	14, cr3, [sp, #-300]!	; 0xfffffed4
  cc:	3d303d3d 	ldccc	13, cr3, [r0, #-244]!	; 0xffffff0c
  d0:	2f3d752f 	svccs	0x003d752f
  d4:	3d232645 	stccc	6, cr2, [r3, #-276]!	; 0xfffffeec
  d8:	3d68c93d 			; <UNDEFINED> instruction: 0x3d68c93d
  dc:	30593e3e 	subscc	r3, r9, lr, lsr lr
  e0:	3e59303d 	mrccc	0, 2, r3, cr9, cr13, {1}
  e4:	303d593d 	eorscc	r5, sp, sp, lsr r9
  e8:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
  ec:	685967c9 	ldmdavs	r9, {r0, r3, r6, r7, r8, r9, sl, sp, lr}^
  f0:	594b914b 	stmdbpl	fp, {r0, r1, r3, r6, r8, ip, pc}^
  f4:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
  f8:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
  fc:	3d3d303d 	ldccc	0, cr3, [sp, #-244]!	; 0xffffff0c
 100:	3d91673d 	ldccc	7, cr6, [r1, #244]	; 0xf4
 104:	4b833d59 	blmi	fe0cf670 <ball_geometry+0xde0cef48>
 108:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 10c:	3d4b833d 	stclcc	3, cr8, [fp, #-244]	; 0xffffff0c
 110:	004bad3d 	subeq	sl, fp, sp, lsr sp
 114:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 118:	03040200 	movweq	r0, #16896	; 0x4200
 11c:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 120:	003c0601 	eorseq	r0, ip, r1, lsl #12
 124:	06020402 	streq	r0, [r2], -r2, lsl #8
 128:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 12c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 130:	006a4b43 	rsbeq	r4, sl, r3, asr #22
 134:	06010402 	streq	r0, [r1], -r2, lsl #8
 138:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 13c:	02004a02 	andeq	r4, r0, #8192	; 0x2000
 140:	064a0304 	strbeq	r0, [sl], -r4, lsl #6
 144:	59ad4b4c 	stmibpl	sp!, {r2, r3, r6, r8, r9, fp, lr}
 148:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 14c:	3d5a5959 	vldrcc.16	s11, [sl, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
 150:	4c4b3d67 	mcrrmi	13, 6, r3, fp, cr7
 154:	c9bb3e4b 	ldmibgt	fp!, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
 158:	a03dad91 	mlasge	sp, r1, sp, sl
 15c:	ac620392 	stclge	3, cr0, [r2], #-584	; 0xfffffdb8
 160:	67201f03 	strvs	r1, [r0, -r3, lsl #30]!
 164:	3d4c4b68 	vstrcc	d20, [ip, #-416]	; 0xfffffe60
 168:	03040200 	movweq	r0, #16896	; 0x4200
 16c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 170:	02008f03 	andeq	r8, r0, #3, 30
 174:	3c060104 	stfccs	f0, [r6], {4}
 178:	02040200 	andeq	r0, r4, #0, 4
 17c:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
 180:	3c060104 	stfccs	f0, [r6], {4}
 184:	4c4b6b06 	mcrrmi	11, 0, r6, fp, cr6
 188:	3e3d2f4b 	cdpcc	15, 3, cr2, cr13, cr11, {2}
 18c:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 190:	4b4b4b4b 	blmi	12d2ec4 <startup-0x1ed2d13c>
 194:	2f3d3d4b 	svccs	0x003d3d4b
 198:	bc3d3d3d 	ldclt	13, cr3, [sp], #-244	; 0xffffff0c
 19c:	2f2f2f3e 	svccs	0x002f2f3e
 1a0:	03040200 	movweq	r0, #16896	; 0x4200
 1a4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 1a8:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
 1ac:	3c060104 	stfccs	f0, [r6], {4}
 1b0:	02003f06 	andeq	r3, r0, #6, 30
 1b4:	003d0304 	eorseq	r0, sp, r4, lsl #6
 1b8:	65030402 	strvs	r0, [r3, #-1026]	; 0xfffffbfe
 1bc:	01040200 	mrseq	r0, R12_usr
 1c0:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
 1c4:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 1c8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 1cc:	00650304 	rsbeq	r0, r5, r4, lsl #6
 1d0:	06010402 	streq	r0, [r1], -r2, lsl #8
 1d4:	003e063c 	eorseq	r0, lr, ip, lsr r6
 1d8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 1dc:	03040200 	movweq	r0, #16896	; 0x4200
 1e0:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 1e4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 1e8:	0402223e 	streq	r2, [r2], #-574	; 0xfffffdc2
 1ec:	Address 0x00000000000001ec is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	74730059 	ldrbtvc	r0, [r3], #-89	; 0xffffffa7
   c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  10:	61760070 	cmnvs	r6, r0, ror r0
  14:	0065756c 	rsbeq	r7, r5, ip, ror #10
  18:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  1c:	6c657300 	stclvs	3, cr7, [r5], #-0
  20:	5f746365 	svcpl	0x00746365
  24:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  28:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  2c:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
  30:	00787269 	rsbseq	r7, r8, r9, ror #4
  34:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  38:	61726700 	cmnvs	r2, r0, lsl #14
  3c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  40:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  44:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  48:	616d6d6f 	cmnvs	sp, pc, ror #26
  4c:	6700646e 	strvs	r6, [r0, -lr, ror #8]
  50:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  54:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
  58:	5f646165 	svcpl	0x00646165
  5c:	61746164 	cmnvs	r4, r4, ror #2
  60:	78697000 	stmdavc	r9!, {ip, sp, lr}^
  64:	74006c65 	strvc	r6, [r0], #-3173	; 0xfffff39b
  68:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
  6c:	4f500074 	svcmi	0x00500074
  70:	00544e49 	subseq	r4, r4, r9, asr #28
  74:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  78:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  7c:	61686320 	cmnvs	r8, r0, lsr #6
  80:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
  84:	70735f74 	rsbsvc	r5, r3, r4, ror pc
  88:	00646565 	rsbeq	r6, r4, r5, ror #10
  8c:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  90:	736f7000 	cmnvc	pc, #0
  94:	61620079 	smcvs	8201	; 0x2009
  98:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
  9c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  a0:	00797274 	rsbseq	r7, r9, r4, ror r2
  a4:	70617267 	rsbvc	r7, r1, r7, ror #4
  a8:	5f636968 	svcpl	0x00636968
  ac:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  b0:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
  b4:	0058657a 	subseq	r6, r8, sl, ror r5
  b8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  bc:	616d0059 	qdsubvs	r0, r9, sp
  c0:	64006e69 	strvs	r6, [r0], #-3689	; 0xfffff197
  c4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  c8:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
  cc:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
  d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  d4:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
  d8:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
  dc:	7a696c61 	bvc	1a5b268 <startup-0x1e5a4d98>
  e0:	72670065 	rsbvc	r0, r7, #101	; 0x65
  e4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  e8:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
  ec:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  f0:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
  f4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  f8:	61726700 	cmnvs	r2, r0, lsl #14
  fc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 100:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 104:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 108:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 10c:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
 110:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 114:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 118:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
 11c:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 8 <startup-0x1ffffff8>
 120:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 124:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 128:	70615f74 	rsbvc	r5, r1, r4, ror pc
 12c:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
 130:	5f38746e 	svcpl	0x0038746e
 134:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 138:	5f79616c 	svcpl	0x0079616c
 13c:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 140:	72640073 	rsbvc	r0, r4, #115	; 0x73
 144:	6d007761 	stcvs	7, cr7, [r0, #-388]	; 0xfffffe7c
 148:	006b7361 	rsbeq	r7, fp, r1, ror #6
 14c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 150:	65640078 	strbvs	r0, [r4, #-120]!	; 0xffffff88
 154:	5f79616c 	svcpl	0x0079616c
 158:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 15c:	72670069 	rsbvc	r0, r7, #105	; 0x69
 160:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 164:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 168:	5f657469 	svcpl	0x00657469
 16c:	61746164 	cmnvs	r4, r4, ror #2
 170:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 174:	6a626f5f 	bvs	189bef8 <startup-0x1e764108>
 178:	5f746365 	svcpl	0x00746365
 17c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 180:	72670064 	rsbvc	r0, r7, #100	; 0x64
 184:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 188:	61775f63 	cmnvs	r7, r3, ror #30
 18c:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 190:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 194:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 198:	31314320 	teqcc	r1, r0, lsr #6
 19c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
 1a0:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 1a4:	30373130 	eorscc	r3, r7, r0, lsr r1
 1a8:	20343039 	eorscs	r3, r4, r9, lsr r0
 1ac:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 1b0:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 1b4:	415b2029 	cmpmi	fp, r9, lsr #32
 1b8:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff46e <ball_geometry+0xdfffed46>
 1bc:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 1c0:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
 1c4:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
 1c8:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 1cc:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 1d0:	6f697369 	svcvs	0x00697369
 1d4:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
 1d8:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
 1dc:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 1e0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 1e4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 1e8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 1ec:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 1f0:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 1f4:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 1f8:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 1fc:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 200:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 204:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
 208:	304f2d20 	subcc	r2, pc, r0, lsr #26
 20c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 210:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 214:	2f007374 	svccs	0x00007374
 218:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 21c:	6d6f742f 	cfstrdvs	mvd7, [pc, #-188]!	; 168 <startup-0x1ffffe98>
 220:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 224:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 228:	572f7374 			; <UNDEFINED> instruction: 0x572f7374
 22c:	2f4b524f 	svccs	0x004b524f
 230:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
 234:	4f656e69 	svcmi	0x00656e69
 238:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 23c:	50646574 	rsbpl	r6, r4, r4, ror r5
 240:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 244:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
 248:	672f676e 	strvs	r6, [pc, -lr, ror #14]!
 24c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 250:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 254:	616c7073 	smcvs	50947	; 0xc703
 258:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 25c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 260:	00632e70 	rsbeq	r2, r3, r0, ror lr
 264:	61656c63 	cmnvs	r5, r3, ror #24
 268:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 26c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 270:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 274:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff91b <ball_geometry+0xdffff1f3>
 278:	736e3030 	cmnvc	lr, #48	; 0x30
 27c:	624f7400 	subvs	r7, pc, #0, 8
 280:	7264006a 	rsbvc	r0, r4, #106	; 0x6a
 284:	6f5f7761 	svcvs	0x005f7761
 288:	63656a62 	cmnvs	r5, #401408	; 0x62000
 28c:	72670074 	rsbvc	r0, r7, #116	; 0x74
 290:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 294:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 298:	2f006461 	svccs	0x00006461
 29c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 2a0:	6d6f742f 	cfstrdvs	mvd7, [pc, #-188]!	; 1ec <startup-0x1ffffe14>
 2a4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 2a8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 2ac:	572f7374 			; <UNDEFINED> instruction: 0x572f7374
 2b0:	2f4b524f 	svccs	0x004b524f
 2b4:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
 2b8:	4f656e69 	svcmi	0x00656e69
 2bc:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 2c0:	50646574 	rsbpl	r6, r4, r4, ror r5
 2c4:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 2c8:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
 2cc:	672f676e 	strvs	r6, [pc, -lr, ror #14]!
 2d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2d4:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 2d8:	616c7073 	smcvs	50947	; 0xc703
 2dc:	70730079 	rsbsvc	r0, r3, r9, ror r0
 2e0:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 2e4:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 2e8:	00796465 	rsbseq	r6, r9, r5, ror #8
 2ec:	4a424f50 	bmi	1094034 <startup-0x1ef6bfcc>
 2f0:	00544345 	subseq	r4, r4, r5, asr #6
 2f4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2f8:	5f636968 	svcpl	0x00636968
 2fc:	61656c63 	cmnvs	r5, r3, ror #24
 300:	63735f72 	cmnvs	r3, #456	; 0x1c8
 304:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball_geometry+0xdfffebe6>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x000000000000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000012 	andeq	r0, r0, r2, lsl r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000066 	andcs	r0, r0, r6, rrx
  64:	0000002c 	andeq	r0, r0, ip, lsr #32
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	100e4101 	andne	r4, lr, r1, lsl #2
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	20000092 	mulcs	r0, r2, r0
  84:	00000022 	andeq	r0, r0, r2, lsr #32
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	100e4101 	andne	r4, lr, r1, lsl #2
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000b4 	strhcs	r0, [r0], -r4
  a4:	0000003c 	andeq	r0, r0, ip, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c4:	00000034 	andeq	r0, r0, r4, lsr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000124 	andcs	r0, r0, r4, lsr #2
  e4:	0000005a 	andeq	r0, r0, sl, asr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	2000017e 	andcs	r0, r0, lr, ror r1
 104:	00000076 	andeq	r0, r0, r6, ror r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001f4 	strdcs	r0, [r0], -r4
 124:	00000094 	muleq	r0, r4, r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	20000288 	andcs	r0, r0, r8, lsl #5
 144:	0000002a 	andeq	r0, r0, sl, lsr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	200002b2 			; <UNDEFINED> instruction: 0x200002b2
 164:	0000007e 	andeq	r0, r0, lr, ror r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000330 	andcs	r0, r0, r0, lsr r3
 184:	00000040 	andeq	r0, r0, r0, asr #32
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	20000370 	andcs	r0, r0, r0, ror r3
 1a4:	00000046 	andeq	r0, r0, r6, asr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
 1c4:	00000058 	andeq	r0, r0, r8, asr r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	100e4101 	andne	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	00000024 	andeq	r0, r0, r4, lsr #32
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	2000040e 	andcs	r0, r0, lr, lsl #8
 1e4:	0000017a 	andeq	r0, r0, sl, ror r1
 1e8:	40100e41 	andsmi	r0, r0, r1, asr #28
 1ec:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 1f0:	02874003 	addeq	r4, r7, #3
 1f4:	41018e40 	tstmi	r1, r0, asr #28
 1f8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 1fc:	00000007 	andeq	r0, r0, r7
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	00000000 	andeq	r0, r0, r0
 208:	20000588 	andcs	r0, r0, r8, lsl #11
 20c:	00000014 	andeq	r0, r0, r4, lsl r0
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	180e4101 	stmdane	lr, {r0, r8, lr}
 21c:	00070d41 	andeq	r0, r7, r1, asr #26
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	00000000 	andeq	r0, r0, r0
 228:	2000059c 	mulcs	r0, ip, r5
 22c:	00000052 	andeq	r0, r0, r2, asr r0
 230:	40080e41 	andmi	r0, r8, r1, asr #28
 234:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 238:	180e4101 	stmdane	lr, {r0, r8, lr}
 23c:	00070d41 	andeq	r0, r7, r1, asr #26
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	00000000 	andeq	r0, r0, r0
 248:	200005ee 	andcs	r0, r0, lr, ror #11
 24c:	00000010 	andeq	r0, r0, r0, lsl r0
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	100e4101 	andne	r4, lr, r1, lsl #2
 25c:	00070d41 	andeq	r0, r7, r1, asr #26
 260:	00000018 	andeq	r0, r0, r8, lsl r0
 264:	00000000 	andeq	r0, r0, r0
 268:	200005fe 	strdcs	r0, [r0], -lr
 26c:	0000005c 	andeq	r0, r0, ip, asr r0
 270:	40080e41 	andmi	r0, r8, r1, asr #28
 274:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 278:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 27c:	00000018 	andeq	r0, r0, r8, lsl r0
 280:	00000000 	andeq	r0, r0, r0
 284:	2000065a 	andcs	r0, r0, sl, asr r6
 288:	0000002e 	andeq	r0, r0, lr, lsr #32
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	20000688 	andcs	r0, r0, r8, lsl #13
 2a4:	0000009e 	muleq	r0, lr, r0
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	100e4101 	andne	r4, lr, r1, lsl #2
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
