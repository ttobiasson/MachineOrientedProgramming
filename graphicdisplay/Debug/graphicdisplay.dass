
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define STK_VAL  ((volatile unsigned int*)(0xE000E018))
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f9e4 	bl	200003d0 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168/4)-1);
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL  = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000)== 0){}
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    *STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_500ns>:
void delay_500ns(void){
20000054:	b580      	push	{r7, lr}
20000056:	af00      	add	r7, sp, #0
	delay_250ns();
20000058:	f7ff ffda 	bl	20000010 <delay_250ns>
	delay_250ns();
2000005c:	f7ff ffd8 	bl	20000010 <delay_250ns>
}
20000060:	46c0      	nop			; (mov r8, r8)
20000062:	46bd      	mov	sp, r7
20000064:	bd80      	pop	{r7, pc}

20000066 <delay_micro>:
void delay_micro(unsigned int us){
20000066:	b580      	push	{r7, lr}
20000068:	b082      	sub	sp, #8
2000006a:	af00      	add	r7, sp, #0
2000006c:	6078      	str	r0, [r7, #4]
    while(us--){
2000006e:	e007      	b.n	20000080 <delay_micro+0x1a>
        delay_250ns();
20000070:	f7ff ffce 	bl	20000010 <delay_250ns>
        delay_250ns();
20000074:	f7ff ffcc 	bl	20000010 <delay_250ns>
        delay_250ns();
20000078:	f7ff ffca 	bl	20000010 <delay_250ns>
        delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
    while(us--){
20000080:	687b      	ldr	r3, [r7, #4]
20000082:	1e5a      	subs	r2, r3, #1
20000084:	607a      	str	r2, [r7, #4]
20000086:	2b00      	cmp	r3, #0
20000088:	d1f2      	bne.n	20000070 <delay_micro+0xa>
    }
}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b002      	add	sp, #8
20000090:	bd80      	pop	{r7, pc}

20000092 <delay_milli>:
void delay_milli(unsigned int ms){
20000092:	b580      	push	{r7, lr}
20000094:	b082      	sub	sp, #8
20000096:	af00      	add	r7, sp, #0
20000098:	6078      	str	r0, [r7, #4]
    while(ms--){
2000009a:	e002      	b.n	200000a2 <delay_milli+0x10>
        delay_micro(10);
2000009c:	200a      	movs	r0, #10
2000009e:	f7ff ffe2 	bl	20000066 <delay_micro>
    while(ms--){
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	1e5a      	subs	r2, r3, #1
200000a6:	607a      	str	r2, [r7, #4]
200000a8:	2b00      	cmp	r3, #0
200000aa:	d1f7      	bne.n	2000009c <delay_milli+0xa>
    }
    
}
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	b002      	add	sp, #8
200000b2:	bd80      	pop	{r7, pc}

200000b4 <graphic_ctrl_bit_set>:
typedef unsigned char uint8_t;

void graphic_ctrl_bit_set(uint8_t x){
200000b4:	b580      	push	{r7, lr}
200000b6:	b082      	sub	sp, #8
200000b8:	af00      	add	r7, sp, #0
200000ba:	0002      	movs	r2, r0
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	701a      	strb	r2, [r3, #0]
	*PORT_ODR_LOW |= x;
200000c0:	4b0a      	ldr	r3, [pc, #40]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000c2:	781b      	ldrb	r3, [r3, #0]
200000c4:	b2da      	uxtb	r2, r3
200000c6:	4909      	ldr	r1, [pc, #36]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000c8:	1dfb      	adds	r3, r7, #7
200000ca:	781b      	ldrb	r3, [r3, #0]
200000cc:	4313      	orrs	r3, r2
200000ce:	b2db      	uxtb	r3, r3
200000d0:	700b      	strb	r3, [r1, #0]
	*PORT_ODR_LOW &= ~(1UL << 2);
200000d2:	4b06      	ldr	r3, [pc, #24]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	b2db      	uxtb	r3, r3
200000d8:	4a04      	ldr	r2, [pc, #16]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000da:	2104      	movs	r1, #4
200000dc:	438b      	bics	r3, r1
200000de:	b2db      	uxtb	r3, r3
200000e0:	7013      	strb	r3, [r2, #0]

}
200000e2:	46c0      	nop			; (mov r8, r8)
200000e4:	46bd      	mov	sp, r7
200000e6:	b002      	add	sp, #8
200000e8:	bd80      	pop	{r7, pc}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	40021014 	andmi	r1, r2, r4, lsl r0

200000f0 <graphic_ctrl_bit_clear>:
void graphic_ctrl_bit_clear(uint8_t x){
200000f0:	b580      	push	{r7, lr}
200000f2:	b082      	sub	sp, #8
200000f4:	af00      	add	r7, sp, #0
200000f6:	0002      	movs	r2, r0
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	701a      	strb	r2, [r3, #0]
	*PORT_ODR_LOW &= ~x;
200000fc:	4b0c      	ldr	r3, [pc, #48]	; (20000130 <graphic_ctrl_bit_clear+0x40>)
200000fe:	781b      	ldrb	r3, [r3, #0]
20000100:	b2db      	uxtb	r3, r3
20000102:	b25b      	sxtb	r3, r3
20000104:	1dfa      	adds	r2, r7, #7
20000106:	7812      	ldrb	r2, [r2, #0]
20000108:	b252      	sxtb	r2, r2
2000010a:	43d2      	mvns	r2, r2
2000010c:	b252      	sxtb	r2, r2
2000010e:	4013      	ands	r3, r2
20000110:	b25a      	sxtb	r2, r3
20000112:	4b07      	ldr	r3, [pc, #28]	; (20000130 <graphic_ctrl_bit_clear+0x40>)
20000114:	b2d2      	uxtb	r2, r2
20000116:	701a      	strb	r2, [r3, #0]
	*PORT_ODR_LOW &= ~(1UL << 2);
20000118:	4b05      	ldr	r3, [pc, #20]	; (20000130 <graphic_ctrl_bit_clear+0x40>)
2000011a:	781b      	ldrb	r3, [r3, #0]
2000011c:	b2db      	uxtb	r3, r3
2000011e:	4a04      	ldr	r2, [pc, #16]	; (20000130 <graphic_ctrl_bit_clear+0x40>)
20000120:	2104      	movs	r1, #4
20000122:	438b      	bics	r3, r1
20000124:	b2db      	uxtb	r3, r3
20000126:	7013      	strb	r3, [r2, #0]


}
20000128:	46c0      	nop			; (mov r8, r8)
2000012a:	46bd      	mov	sp, r7
2000012c:	b002      	add	sp, #8
2000012e:	bd80      	pop	{r7, pc}
20000130:	40021014 	andmi	r1, r2, r4, lsl r0

20000134 <select_controller>:
void select_controller(uint8_t controller){
20000134:	b580      	push	{r7, lr}
20000136:	b082      	sub	sp, #8
20000138:	af00      	add	r7, sp, #0
2000013a:	0002      	movs	r2, r0
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000140:	1dfb      	adds	r3, r7, #7
20000142:	781b      	ldrb	r3, [r3, #0]
20000144:	2b01      	cmp	r3, #1
20000146:	d01d      	beq.n	20000184 <select_controller+0x50>
20000148:	dc02      	bgt.n	20000150 <select_controller+0x1c>
2000014a:	2b00      	cmp	r3, #0
2000014c:	d005      	beq.n	2000015a <select_controller+0x26>
		graphic_ctrl_bit_set(B_CS2);
		break;
	}
		
	
}
2000014e:	e020      	b.n	20000192 <select_controller+0x5e>
	switch(controller){
20000150:	2b08      	cmp	r3, #8
20000152:	d009      	beq.n	20000168 <select_controller+0x34>
20000154:	2b10      	cmp	r3, #16
20000156:	d00e      	beq.n	20000176 <select_controller+0x42>
}
20000158:	e01b      	b.n	20000192 <select_controller+0x5e>
		graphic_ctrl_bit_clear(B_CS1);
2000015a:	2008      	movs	r0, #8
2000015c:	f7ff ffc8 	bl	200000f0 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
20000160:	2010      	movs	r0, #16
20000162:	f7ff ffc5 	bl	200000f0 <graphic_ctrl_bit_clear>
		break;
20000166:	e014      	b.n	20000192 <select_controller+0x5e>
		graphic_ctrl_bit_set(B_CS1);
20000168:	2008      	movs	r0, #8
2000016a:	f7ff ffa3 	bl	200000b4 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS2);
2000016e:	2010      	movs	r0, #16
20000170:	f7ff ffbe 	bl	200000f0 <graphic_ctrl_bit_clear>
		break;
20000174:	e00d      	b.n	20000192 <select_controller+0x5e>
		graphic_ctrl_bit_clear(B_CS1);
20000176:	2008      	movs	r0, #8
20000178:	f7ff ffba 	bl	200000f0 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_set(B_CS2);
2000017c:	2010      	movs	r0, #16
2000017e:	f7ff ff99 	bl	200000b4 <graphic_ctrl_bit_set>
		break;
20000182:	e006      	b.n	20000192 <select_controller+0x5e>
		graphic_ctrl_bit_set(B_CS1);
20000184:	2008      	movs	r0, #8
20000186:	f7ff ff95 	bl	200000b4 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_set(B_CS2);
2000018a:	2010      	movs	r0, #16
2000018c:	f7ff ff92 	bl	200000b4 <graphic_ctrl_bit_set>
		break;
20000190:	46c0      	nop			; (mov r8, r8)
}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	46bd      	mov	sp, r7
20000196:	b002      	add	sp, #8
20000198:	bd80      	pop	{r7, pc}

2000019a <graphic_wait_ready>:
void graphic_wait_ready(void){
2000019a:	b580      	push	{r7, lr}
2000019c:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
2000019e:	2040      	movs	r0, #64	; 0x40
200001a0:	f7ff ffa6 	bl	200000f0 <graphic_ctrl_bit_clear>
	*PORT_MODER_LOW = 0x0055;
200001a4:	4b13      	ldr	r3, [pc, #76]	; (200001f4 <graphic_wait_ready+0x5a>)
200001a6:	2255      	movs	r2, #85	; 0x55
200001a8:	801a      	strh	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200001aa:	2001      	movs	r0, #1
200001ac:	f7ff ffa0 	bl	200000f0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200001b0:	2002      	movs	r0, #2
200001b2:	f7ff ff7f 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
200001b6:	f7ff ff4d 	bl	20000054 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001ba:	2040      	movs	r0, #64	; 0x40
200001bc:	f7ff ff7a 	bl	200000b4 <graphic_ctrl_bit_set>
		delay_500ns();
200001c0:	f7ff ff48 	bl	20000054 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
200001c4:	2040      	movs	r0, #64	; 0x40
200001c6:	f7ff ff93 	bl	200000f0 <graphic_ctrl_bit_clear>
		delay_500ns();
200001ca:	f7ff ff43 	bl	20000054 <delay_500ns>
		if( (*LCD_BUSY & 0x80) == 0x80)
200001ce:	4b0a      	ldr	r3, [pc, #40]	; (200001f8 <graphic_wait_ready+0x5e>)
200001d0:	781b      	ldrb	r3, [r3, #0]
200001d2:	b2db      	uxtb	r3, r3
200001d4:	001a      	movs	r2, r3
200001d6:	2380      	movs	r3, #128	; 0x80
200001d8:	4013      	ands	r3, r2
200001da:	2b80      	cmp	r3, #128	; 0x80
200001dc:	d000      	beq.n	200001e0 <graphic_wait_ready+0x46>
		graphic_ctrl_bit_set(B_E);
200001de:	e7ec      	b.n	200001ba <graphic_wait_ready+0x20>
			break;
200001e0:	46c0      	nop			; (mov r8, r8)
		
	}
	graphic_ctrl_bit_set(B_E);
200001e2:	2040      	movs	r0, #64	; 0x40
200001e4:	f7ff ff66 	bl	200000b4 <graphic_ctrl_bit_set>
	*PORT_MODER_LOW = 0x5555;
200001e8:	4b02      	ldr	r3, [pc, #8]	; (200001f4 <graphic_wait_ready+0x5a>)
200001ea:	4a04      	ldr	r2, [pc, #16]	; (200001fc <graphic_wait_ready+0x62>)
200001ec:	801a      	strh	r2, [r3, #0]
}
200001ee:	46c0      	nop			; (mov r8, r8)
200001f0:	46bd      	mov	sp, r7
200001f2:	bd80      	pop	{r7, pc}
200001f4:	40021000 	andmi	r1, r2, r0
200001f8:	40021001 	andmi	r1, r2, r1
200001fc:	00005555 	andeq	r5, r0, r5, asr r5

20000200 <graphic_read>:
unsigned char graphic_read(unsigned char controller ){
20000200:	b580      	push	{r7, lr}
20000202:	b084      	sub	sp, #16
20000204:	af00      	add	r7, sp, #0
20000206:	0002      	movs	r2, r0
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	701a      	strb	r2, [r3, #0]
	unsigned char RV;
	graphic_ctrl_bit_clear( B_E );
2000020c:	2040      	movs	r0, #64	; 0x40
2000020e:	f7ff ff6f 	bl	200000f0 <graphic_ctrl_bit_clear>
	*PORT_MODER_LOW = 0055;
20000212:	4b1d      	ldr	r3, [pc, #116]	; (20000288 <graphic_read+0x88>)
20000214:	222d      	movs	r2, #45	; 0x2d
20000216:	801a      	strh	r2, [r3, #0]
	
	graphic_ctrl_bit_set( B_RS );
20000218:	2001      	movs	r0, #1
2000021a:	f7ff ff4b 	bl	200000b4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set( B_RW );
2000021e:	2002      	movs	r0, #2
20000220:	f7ff ff48 	bl	200000b4 <graphic_ctrl_bit_set>
	
	select_controller( controller );
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	0018      	movs	r0, r3
2000022a:	f7ff ff83 	bl	20000134 <select_controller>
	delay_500ns();
2000022e:	f7ff ff11 	bl	20000054 <delay_500ns>
	
	graphic_ctrl_bit_set( B_E );
20000232:	2040      	movs	r0, #64	; 0x40
20000234:	f7ff ff3e 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
20000238:	f7ff ff0c 	bl	20000054 <delay_500ns>
	
	RV = *PORT_MODER_LH;
2000023c:	4a13      	ldr	r2, [pc, #76]	; (2000028c <graphic_read+0x8c>)
2000023e:	230f      	movs	r3, #15
20000240:	18fb      	adds	r3, r7, r3
20000242:	7812      	ldrb	r2, [r2, #0]
20000244:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear( B_E );
20000246:	2040      	movs	r0, #64	; 0x40
20000248:	f7ff ff52 	bl	200000f0 <graphic_ctrl_bit_clear>
	
	*PORT_MODER_LOW = 0x5555;
2000024c:	4b0e      	ldr	r3, [pc, #56]	; (20000288 <graphic_read+0x88>)
2000024e:	4a10      	ldr	r2, [pc, #64]	; (20000290 <graphic_read+0x90>)
20000250:	801a      	strh	r2, [r3, #0]
	if( (controller & B_CS1) == B_CS1 ){
20000252:	1dfb      	adds	r3, r7, #7
20000254:	781b      	ldrb	r3, [r3, #0]
20000256:	2208      	movs	r2, #8
20000258:	4013      	ands	r3, r2
2000025a:	d004      	beq.n	20000266 <graphic_read+0x66>
		select_controller(B_CS1);
2000025c:	2008      	movs	r0, #8
2000025e:	f7ff ff69 	bl	20000134 <select_controller>
		graphic_wait_ready();
20000262:	f7ff ff9a 	bl	2000019a <graphic_wait_ready>
	}
	if((controller & B_CS2) == B_CS2 ){
20000266:	1dfb      	adds	r3, r7, #7
20000268:	781b      	ldrb	r3, [r3, #0]
2000026a:	2210      	movs	r2, #16
2000026c:	4013      	ands	r3, r2
2000026e:	d004      	beq.n	2000027a <graphic_read+0x7a>
		select_controller(B_CS2);
20000270:	2010      	movs	r0, #16
20000272:	f7ff ff5f 	bl	20000134 <select_controller>
		graphic_wait_ready();
20000276:	f7ff ff90 	bl	2000019a <graphic_wait_ready>
	}
	return RV;
2000027a:	230f      	movs	r3, #15
2000027c:	18fb      	adds	r3, r7, r3
2000027e:	781b      	ldrb	r3, [r3, #0]
}
20000280:	0018      	movs	r0, r3
20000282:	46bd      	mov	sp, r7
20000284:	b004      	add	sp, #16
20000286:	bd80      	pop	{r7, pc}
20000288:	40021000 	andmi	r1, r2, r0
2000028c:	40021001 	andmi	r1, r2, r1
20000290:	00005555 	andeq	r5, r0, r5, asr r5

20000294 <graphic_write>:
void graphic_write(uint8_t value, uint8_t controller){
20000294:	b580      	push	{r7, lr}
20000296:	b082      	sub	sp, #8
20000298:	af00      	add	r7, sp, #0
2000029a:	0002      	movs	r2, r0
2000029c:	1dfb      	adds	r3, r7, #7
2000029e:	701a      	strb	r2, [r3, #0]
200002a0:	1dbb      	adds	r3, r7, #6
200002a2:	1c0a      	adds	r2, r1, #0
200002a4:	701a      	strb	r2, [r3, #0]
	*PORT_MODER_LH = value;
200002a6:	4a1a      	ldr	r2, [pc, #104]	; (20000310 <graphic_write+0x7c>)
200002a8:	1dfb      	adds	r3, r7, #7
200002aa:	781b      	ldrb	r3, [r3, #0]
200002ac:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002ae:	1dbb      	adds	r3, r7, #6
200002b0:	781b      	ldrb	r3, [r3, #0]
200002b2:	0018      	movs	r0, r3
200002b4:	f7ff ff3e 	bl	20000134 <select_controller>
	delay_500ns();
200002b8:	f7ff fecc 	bl	20000054 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002bc:	2040      	movs	r0, #64	; 0x40
200002be:	f7ff fef9 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
200002c2:	f7ff fec7 	bl	20000054 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002c6:	2040      	movs	r0, #64	; 0x40
200002c8:	f7ff ff12 	bl	200000f0 <graphic_ctrl_bit_clear>
	
	if( (controller & B_CS1 ) == B_CS1 ){
200002cc:	1dbb      	adds	r3, r7, #6
200002ce:	781b      	ldrb	r3, [r3, #0]
200002d0:	2208      	movs	r2, #8
200002d2:	4013      	ands	r3, r2
200002d4:	d004      	beq.n	200002e0 <graphic_write+0x4c>
		select_controller( B_CS1 );
200002d6:	2008      	movs	r0, #8
200002d8:	f7ff ff2c 	bl	20000134 <select_controller>
		graphic_wait_ready();
200002dc:	f7ff ff5d 	bl	2000019a <graphic_wait_ready>
	}
	if( (controller & B_CS2 ) == B_CS2 ){
200002e0:	1dbb      	adds	r3, r7, #6
200002e2:	781b      	ldrb	r3, [r3, #0]
200002e4:	2210      	movs	r2, #16
200002e6:	4013      	ands	r3, r2
200002e8:	d004      	beq.n	200002f4 <graphic_write+0x60>
		select_controller( B_CS2 );
200002ea:	2010      	movs	r0, #16
200002ec:	f7ff ff22 	bl	20000134 <select_controller>
		graphic_wait_ready();
200002f0:	f7ff ff53 	bl	2000019a <graphic_wait_ready>
	}
	*PORT_MODER_LH = 0;
200002f4:	4b06      	ldr	r3, [pc, #24]	; (20000310 <graphic_write+0x7c>)
200002f6:	2200      	movs	r2, #0
200002f8:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
200002fa:	2040      	movs	r0, #64	; 0x40
200002fc:	f7ff feda 	bl	200000b4 <graphic_ctrl_bit_set>
	select_controller(0);
20000300:	2000      	movs	r0, #0
20000302:	f7ff ff17 	bl	20000134 <select_controller>
}
20000306:	46c0      	nop			; (mov r8, r8)
20000308:	46bd      	mov	sp, r7
2000030a:	b002      	add	sp, #8
2000030c:	bd80      	pop	{r7, pc}
2000030e:	46c0      	nop			; (mov r8, r8)
20000310:	40021001 	andmi	r1, r2, r1

20000314 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller){
20000314:	b580      	push	{r7, lr}
20000316:	b082      	sub	sp, #8
20000318:	af00      	add	r7, sp, #0
2000031a:	0002      	movs	r2, r0
2000031c:	1dfb      	adds	r3, r7, #7
2000031e:	701a      	strb	r2, [r3, #0]
20000320:	1dbb      	adds	r3, r7, #6
20000322:	1c0a      	adds	r2, r1, #0
20000324:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear( B_E );
20000326:	2040      	movs	r0, #64	; 0x40
20000328:	f7ff fee2 	bl	200000f0 <graphic_ctrl_bit_clear>
	select_controller( controller );
2000032c:	1dbb      	adds	r3, r7, #6
2000032e:	781b      	ldrb	r3, [r3, #0]
20000330:	0018      	movs	r0, r3
20000332:	f7ff feff 	bl	20000134 <select_controller>
	graphic_ctrl_bit_clear( B_RS );
20000336:	2001      	movs	r0, #1
20000338:	f7ff feda 	bl	200000f0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear( B_RW );
2000033c:	2002      	movs	r0, #2
2000033e:	f7ff fed7 	bl	200000f0 <graphic_ctrl_bit_clear>
	graphic_write( command, controller );
20000342:	1dbb      	adds	r3, r7, #6
20000344:	781a      	ldrb	r2, [r3, #0]
20000346:	1dfb      	adds	r3, r7, #7
20000348:	781b      	ldrb	r3, [r3, #0]
2000034a:	0011      	movs	r1, r2
2000034c:	0018      	movs	r0, r3
2000034e:	f7ff ffa1 	bl	20000294 <graphic_write>
}
20000352:	46c0      	nop			; (mov r8, r8)
20000354:	46bd      	mov	sp, r7
20000356:	b002      	add	sp, #8
20000358:	bd80      	pop	{r7, pc}

2000035a <graphics_write_data>:
void graphics_write_data( uint8_t data, uint8_t controller ){
2000035a:	b580      	push	{r7, lr}
2000035c:	b082      	sub	sp, #8
2000035e:	af00      	add	r7, sp, #0
20000360:	0002      	movs	r2, r0
20000362:	1dfb      	adds	r3, r7, #7
20000364:	701a      	strb	r2, [r3, #0]
20000366:	1dbb      	adds	r3, r7, #6
20000368:	1c0a      	adds	r2, r1, #0
2000036a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear( B_E );
2000036c:	2040      	movs	r0, #64	; 0x40
2000036e:	f7ff febf 	bl	200000f0 <graphic_ctrl_bit_clear>
	select_controller( controller );
20000372:	1dbb      	adds	r3, r7, #6
20000374:	781b      	ldrb	r3, [r3, #0]
20000376:	0018      	movs	r0, r3
20000378:	f7ff fedc 	bl	20000134 <select_controller>
	graphic_ctrl_bit_set( B_RS );
2000037c:	2001      	movs	r0, #1
2000037e:	f7ff fe99 	bl	200000b4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear( B_RW );
20000382:	2002      	movs	r0, #2
20000384:	f7ff feb4 	bl	200000f0 <graphic_ctrl_bit_clear>
	graphic_write( data, controller );
20000388:	1dbb      	adds	r3, r7, #6
2000038a:	781a      	ldrb	r2, [r3, #0]
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	781b      	ldrb	r3, [r3, #0]
20000390:	0011      	movs	r1, r2
20000392:	0018      	movs	r0, r3
20000394:	f7ff ff7e 	bl	20000294 <graphic_write>
}
20000398:	46c0      	nop			; (mov r8, r8)
2000039a:	46bd      	mov	sp, r7
2000039c:	b002      	add	sp, #8
2000039e:	bd80      	pop	{r7, pc}

200003a0 <graphic_initialize>:
void graphic_initialize(void){
200003a0:	b580      	push	{r7, lr}
200003a2:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003a4:	2040      	movs	r0, #64	; 0x40
200003a6:	f7ff fe85 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_micro(10);
200003aa:	200a      	movs	r0, #10
200003ac:	f7ff fe5b 	bl	20000066 <delay_micro>
	
}
200003b0:	46c0      	nop			; (mov r8, r8)
200003b2:	46bd      	mov	sp, r7
200003b4:	bd80      	pop	{r7, pc}

200003b6 <init_app>:
void init_app(void){
200003b6:	b580      	push	{r7, lr}
200003b8:	af00      	add	r7, sp, #0
	*PORT_MODER = 0x55555555;
200003ba:	4b03      	ldr	r3, [pc, #12]	; (200003c8 <init_app+0x12>)
200003bc:	4a03      	ldr	r2, [pc, #12]	; (200003cc <init_app+0x16>)
200003be:	601a      	str	r2, [r3, #0]
}
200003c0:	46c0      	nop			; (mov r8, r8)
200003c2:	46bd      	mov	sp, r7
200003c4:	bd80      	pop	{r7, pc}
200003c6:	46c0      	nop			; (mov r8, r8)
200003c8:	40021000 	andmi	r1, r2, r0
200003cc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003d0 <main>:

int main(void){
200003d0:	b580      	push	{r7, lr}
200003d2:	af00      	add	r7, sp, #0
	return 0;
200003d4:	2300      	movs	r3, #0
	
}
200003d6:	0018      	movs	r0, r3
200003d8:	46bd      	mov	sp, r7
200003da:	bd80      	pop	{r7, pc}

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000236 	andeq	r0, r0, r6, lsr r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000001a8 	andeq	r0, r0, r8, lsr #3
  10:	0001230c 	andeq	r2, r1, ip, lsl #6
  14:	0000c100 	andeq	ip, r0, r0, lsl #2
	...
  24:	00ab0200 	adceq	r0, fp, r0, lsl #4
  28:	44010000 	strmi	r0, [r1], #-0
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	b3080103 	movwlt	r0, #33027	; 0x8103
  34:	04000000 	streq	r0, [r0], #-0
  38:	00000037 	andeq	r0, r0, r7, lsr r0
  3c:	004cc001 	subeq	ip, ip, r1
  40:	03d00000 	bicseq	r0, r0, #0
  44:	000c2000 	andeq	r2, ip, r0
  48:	9c010000 	stcls	0, cr0, [r1], {-0}
  4c:	69050405 	stmdbvs	r5, {r0, r2, sl}
  50:	0600746e 	streq	r7, [r0], -lr, ror #8
  54:	00000112 	andeq	r0, r0, r2, lsl r1
  58:	03b6bc01 			; <UNDEFINED> instruction: 0x03b6bc01
  5c:	001a2000 	andseq	r2, sl, r0
  60:	9c010000 	stcls	0, cr0, [r1], {-0}
  64:	00019507 	andeq	r9, r1, r7, lsl #10
  68:	a0b70100 	adcsge	r0, r7, r0, lsl #2
  6c:	16200003 	strtne	r0, [r0], -r3
  70:	01000000 	mrseq	r0, (UNDEF: 0)
  74:	0060089c 	mlseq	r0, ip, r8, r0
  78:	b0010000 	andlt	r0, r1, r0
  7c:	2000035a 	andcs	r0, r0, sl, asr r3
  80:	00000046 	andeq	r0, r0, r6, asr #32
  84:	00a79c01 	adceq	r9, r7, r1, lsl #24
  88:	6f090000 	svcvs	0x00090000
  8c:	01000000 	mrseq	r0, (UNDEF: 0)
  90:	000025b0 			; <UNDEFINED> instruction: 0x000025b0
  94:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  98:	00017709 	andeq	r7, r1, r9, lsl #14
  9c:	25b00100 	ldrcs	r0, [r0, #256]!	; 0x100
  a0:	02000000 	andeq	r0, r0, #0
  a4:	08007691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
  a8:	00000021 	andeq	r0, r0, r1, lsr #32
  ac:	0314a901 	tsteq	r4, #16384	; 0x4000
  b0:	00462000 	subeq	r2, r6, r0
  b4:	9c010000 	stcls	0, cr0, [r1], {-0}
  b8:	000000d9 	ldrdeq	r0, [r0], -r9
  bc:	00002f09 	andeq	r2, r0, r9, lsl #30
  c0:	25a90100 	strcs	r0, [r9, #256]!	; 0x100
  c4:	02000000 	andeq	r0, r0, #0
  c8:	77097791 			; <UNDEFINED> instruction: 0x77097791
  cc:	01000001 	tsteq	r0, r1
  d0:	000025a9 	andeq	r2, r0, r9, lsr #11
  d4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
  d8:	01040800 	tsteq	r4, r0, lsl #16
  dc:	95010000 	strls	r0, [r1, #-0]
  e0:	20000294 	mulcs	r0, r4, r2
  e4:	00000080 	andeq	r0, r0, r0, lsl #1
  e8:	010b9c01 	tsteq	fp, r1, lsl #24
  ec:	82090000 	andhi	r0, r9, #0
  f0:	01000001 	tsteq	r0, r1
  f4:	00002595 	muleq	r0, r5, r5
  f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  fc:	00017709 	andeq	r7, r1, r9, lsl #14
 100:	25950100 	ldrcs	r0, [r5, #256]	; 0x100
 104:	02000000 	andeq	r0, r0, #0
 108:	0a007691 	beq	1db54 <startup-0x1ffe24ac>
 10c:	0000003c 	andeq	r0, r0, ip, lsr r0
 110:	00307901 	eorseq	r7, r0, r1, lsl #18
 114:	02000000 	andeq	r0, r0, #0
 118:	00942000 	addseq	r2, r4, r0
 11c:	9c010000 	stcls	0, cr0, [r1], {-0}
 120:	00000140 	andeq	r0, r0, r0, asr #2
 124:	00017709 	andeq	r7, r1, r9, lsl #14
 128:	30790100 	rsbscc	r0, r9, r0, lsl #2
 12c:	02000000 	andeq	r0, r0, #0
 130:	520b6f91 	andpl	r6, fp, #580	; 0x244
 134:	7a010056 	bvc	40294 <startup-0x1ffbfd6c>
 138:	00000030 	andeq	r0, r0, r0, lsr r0
 13c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 140:	00008007 	andeq	r8, r0, r7
 144:	9a670100 	bls	19c054c <startup-0x1e63fab4>
 148:	66200001 	strtvs	r0, [r0], -r1
 14c:	01000000 	mrseq	r0, (UNDEF: 0)
 150:	0170089c 			; <UNDEFINED> instruction: 0x0170089c
 154:	51010000 	mrspl	r0, (UNDEF: 1)
 158:	20000134 	andcs	r0, r0, r4, lsr r1
 15c:	00000066 	andeq	r0, r0, r6, rrx
 160:	01759c01 	cmneq	r5, r1, lsl #24
 164:	77090000 	strvc	r0, [r9, -r0]
 168:	01000001 	tsteq	r0, r1
 16c:	00002551 	andeq	r2, r0, r1, asr r5
 170:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 174:	00490c00 	subeq	r0, r9, r0, lsl #24
 178:	4b010000 	blmi	40180 <startup-0x1ffbfe80>
 17c:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 180:	00000044 	andeq	r0, r0, r4, asr #32
 184:	01979c01 	orrseq	r9, r7, r1, lsl #24
 188:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
 18c:	254b0100 	strbcs	r0, [fp, #-256]	; 0xffffff00
 190:	02000000 	andeq	r0, r0, #0
 194:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
 198:	0000000c 	andeq	r0, r0, ip
 19c:	00b44601 	adcseq	r4, r4, r1, lsl #12
 1a0:	003c2000 	eorseq	r2, ip, r0
 1a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 1a8:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
 1ac:	0100780d 	tsteq	r0, sp, lsl #16
 1b0:	00002546 	andeq	r2, r0, r6, asr #10
 1b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1b8:	00000800 	andeq	r0, r0, r0, lsl #16
 1bc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 1c0:	20000092 	mulcs	r0, r2, r0
 1c4:	00000022 	andeq	r0, r0, r2, lsr #32
 1c8:	01dc9c01 	bicseq	r9, ip, r1, lsl #24
 1cc:	6d0d0000 	stcvs	0, cr0, [sp, #-0]
 1d0:	3e010073 	mcrcc	0, 0, r0, cr1, cr3, {3}
 1d4:	000001dc 	ldrdeq	r0, [r0], -ip
 1d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 1dc:	88070403 	stmdahi	r7, {r0, r1, sl}
 1e0:	08000001 	stmdaeq	r0, {r0}
 1e4:	00000093 	muleq	r0, r3, r0
 1e8:	00663601 	rsbeq	r3, r6, r1, lsl #12
 1ec:	002c2000 	eoreq	r2, ip, r0
 1f0:	9c010000 	stcls	0, cr0, [r1], {-0}
 1f4:	00000206 	andeq	r0, r0, r6, lsl #4
 1f8:	0073750d 	rsbseq	r7, r3, sp, lsl #10
 1fc:	01dc3601 	bicseq	r3, ip, r1, lsl #12
 200:	91020000 	mrsls	r0, (UNDEF: 2)
 204:	74070074 	strvc	r0, [r7], #-116	; 0xffffff8c
 208:	01000000 	mrseq	r0, (UNDEF: 0)
 20c:	00005432 	andeq	r5, r0, r2, lsr r4
 210:	00001220 	andeq	r1, r0, r0, lsr #4
 214:	069c0100 	ldreq	r0, [ip], r0, lsl #2
 218:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 21c:	00102a01 	andseq	r2, r0, r1, lsl #20
 220:	00442000 	subeq	r2, r4, r0
 224:	9c010000 	stcls	0, cr0, [r1], {-0}
 228:	00011b06 	andeq	r1, r1, r6, lsl #22
 22c:	00210100 	eoreq	r0, r1, r0, lsl #2
 230:	0c200000 	stceq	0, cr0, [r0], #-0
 234:	01000000 	mrseq	r0, (UNDEF: 0)
 238:	Address 0x0000000000000238 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  30:	0b3a0e03 	bleq	e83844 <startup-0x1f17c7bc>
  34:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  38:	01111349 	tsteq	r1, r9, asr #6
  3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  40:	00194297 	mulseq	r9, r7, r2
  44:	00240500 	eoreq	r0, r4, r0, lsl #10
  48:	0b3e0b0b 	bleq	f82c7c <startup-0x1f07d384>
  4c:	00000803 	andeq	r0, r0, r3, lsl #16
  50:	3f002e06 	svccc	0x00002e06
  54:	3a0e0319 	bcc	380cc0 <startup-0x1fc7f340>
  58:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  5c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  60:	97184006 	ldrls	r4, [r8, -r6]
  64:	00001942 	andeq	r1, r0, r2, asr #18
  68:	3f002e07 	svccc	0x00002e07
  6c:	3a0e0319 	bcc	380cd8 <startup-0x1fc7f328>
  70:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  74:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  78:	96184006 	ldrls	r4, [r8], -r6
  7c:	00001942 	andeq	r1, r0, r2, asr #18
  80:	3f012e08 	svccc	0x00012e08
  84:	3a0e0319 	bcc	380cf0 <startup-0x1fc7f310>
  88:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  8c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  90:	96184006 	ldrls	r4, [r8], -r6
  94:	13011942 	movwne	r1, #6466	; 0x1942
  98:	05090000 	streq	r0, [r9, #-0]
  9c:	3a0e0300 	bcc	380ca4 <startup-0x1fc7f35c>
  a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a4:	00180213 	andseq	r0, r8, r3, lsl r2
  a8:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
  ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  b0:	0b3b0b3a 	bleq	ec2da0 <startup-0x1f13d260>
  b4:	13491927 	movtne	r1, #39207	; 0x9927
  b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  c0:	00130119 	andseq	r0, r3, r9, lsl r1
  c4:	00340b00 	eorseq	r0, r4, r0, lsl #22
  c8:	0b3a0803 	bleq	e820dc <startup-0x1f17df24>
  cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	3f012e0c 	svccc	0x00012e0c
  d8:	3a0e0319 	bcc	380d44 <startup-0x1fc7f2bc>
  dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  e4:	97184006 	ldrls	r4, [r8, -r6]
  e8:	13011942 	movwne	r1, #6466	; 0x1942
  ec:	050d0000 	streq	r0, [sp, #-0]
  f0:	3a080300 	bcc	200cf8 <startup-0x1fdff308>
  f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f8:	00180213 	andseq	r0, r8, r3, lsl r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000003cc 	andeq	r0, r0, ip, asr #7
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200003dc 	ldrdcs	r0, [r0], -ip
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000117 	andeq	r0, r0, r7, lsl r1
   4:	00630002 	rsbeq	r0, r3, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	6d6f742f 	cfstrdvs	mvd7, [pc, #-188]!	; ffffff6c <main+0xdffffb9c>
  24:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  28:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  2c:	572f7374 			; <UNDEFINED> instruction: 0x572f7374
  30:	2f4b524f 	svccs	0x004b524f
  34:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
  38:	4f656e69 	svcmi	0x00656e69
  3c:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
  40:	50646574 	rsbpl	r6, r4, r4, ror r5
  44:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  48:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
  4c:	672f676e 	strvs	r6, [pc, -lr, ror #14]!
  50:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  54:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  58:	616c7073 	smcvs	50947	; 0xc703
  5c:	73000079 	movwvc	r0, #121	; 0x79
  60:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  64:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  68:	00000100 	andeq	r0, r0, r0, lsl #2
  6c:	02050000 	andeq	r0, r5, #0
  70:	20000000 	andcs	r0, r0, r0
  74:	13012103 	movwne	r2, #4355	; 0x1103
  78:	0003025e 	andeq	r0, r3, lr, asr r2
  7c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
  80:	00001002 	andeq	r1, r0, r2
  84:	01290320 			; <UNDEFINED> instruction: 0x01290320
  88:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
  8c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  90:	06200601 	strteq	r0, [r0], -r1, lsl #12
  94:	2f9f3d67 	svccs	0x009f3d67
  98:	4b3d2f2f 	blmi	f4bd5c <startup-0x1f0b42a4>
  9c:	2f2f2f21 	svccs	0x002f2f21
  a0:	4b4b5e2a 	blmi	12d7950 <startup-0x1ed286b0>
  a4:	4d5c3b21 	vldrmi	d19, [ip, #-132]	; 0xffffff7c
  a8:	75849167 	strvc	r9, [r4, #359]	; 0x167
  ac:	6785d767 	strvs	sp, [r5, r7, ror #14]
  b0:	74140367 	ldrvc	r0, [r4], #-871	; 0xfffffc99
  b4:	03206c03 			; <UNDEFINED> instruction: 0x03206c03
  b8:	6e034a14 			; <UNDEFINED> instruction: 0x6e034a14
  bc:	223d3d20 	eorscs	r3, sp, #32, 26	; 0x800
  c0:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
  c4:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
  c8:	3d2f4b24 	vstmdbcc	pc!, {d4-d21}
  cc:	303d3d3d 	eorscc	r3, sp, sp, lsr sp
  d0:	2f3d2f3d 	svccs	0x003d2f3d
  d4:	3d23257e 	cfstr32cc	mvfx2, [r3, #-504]!	; 0xfffffe08
  d8:	3d68913d 	stfccp	f1, [r8, #-244]!	; 0xffffff0c
  dc:	593e3d3e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
  e0:	59303d30 	ldmdbpl	r0!, {r4, r5, r8, sl, fp, ip, sp}
  e4:	3d593d3e 	ldclcc	13, cr3, [r9, #-248]	; 0xffffff08
  e8:	303d5930 	eorscc	r5, sp, r0, lsr r9
  ec:	4b919f3d 	blmi	fe467de8 <main+0xde467a18>
  f0:	2f3d2f59 	svccs	0x003d2f59
  f4:	303d593e 	eorscc	r5, sp, lr, lsr r9
  f8:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
  fc:	91753d3d 	cmnls	r5, sp, lsr sp
 100:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 104:	3d914b83 	vldrcc	d4, [r1, #524]	; 0x20c
 108:	833d3d59 	teqhi	sp, #5696	; 0x1640
 10c:	3e3d2f4b 	cdpcc	15, 3, cr2, cr13, cr11, {2}
 110:	843d2f3d 	ldrthi	r2, [sp], #-3901	; 0xfffff0c3
 114:	0302222f 	movweq	r2, #8751	; 0x222f
 118:	Address 0x0000000000000118 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	70617267 	rsbvc	r7, r1, r7, ror #4
  10:	5f636968 	svcpl	0x00636968
  14:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  18:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  1c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
  20:	61726700 	cmnvs	r2, r0, lsl #14
  24:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  28:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  2c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  30:	616d6d6f 	cmnvs	sp, pc, ror #26
  34:	6d00646e 	cfstrsvs	mvf6, [r0, #-440]	; 0xfffffe48
  38:	006e6961 	rsbeq	r6, lr, r1, ror #18
  3c:	70617267 	rsbvc	r7, r1, r7, ror #4
  40:	5f636968 	svcpl	0x00636968
  44:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  48:	61726700 	cmnvs	r2, r0, lsl #14
  4c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  50:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
  54:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  58:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
  5c:	00726165 	rsbseq	r6, r2, r5, ror #2
  60:	70617267 	rsbvc	r7, r1, r7, ror #4
  64:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
  68:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  6c:	645f6574 	ldrbvs	r6, [pc], #-1396	; 74 <startup-0x1fffff8c>
  70:	00617461 	rsbeq	r7, r1, r1, ror #8
  74:	616c6564 	cmnvs	ip, r4, ror #10
  78:	30355f79 	eorscc	r5, r5, r9, ror pc
  7c:	00736e30 	rsbseq	r6, r3, r0, lsr lr
  80:	70617267 	rsbvc	r7, r1, r7, ror #4
  84:	5f636968 	svcpl	0x00636968
  88:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
  8c:	6165725f 	cmnvs	r5, pc, asr r2
  90:	64007964 	strvs	r7, [r0], #-2404	; 0xfffff69c
  94:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  98:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
  9c:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
  a0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  a4:	3035325f 	eorscc	r3, r5, pc, asr r2
  a8:	7500736e 	strvc	r7, [r0, #-878]	; 0xfffffc92
  ac:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
  b0:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
  b4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  b8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  bc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  c0:	6f682f00 	svcvs	0x00682f00
  c4:	742f656d 	strtvc	r6, [pc], #-1389	; cc <startup-0x1fffff34>
  c8:	442f6d6f 	strtmi	r6, [pc], #-3439	; d0 <startup-0x1fffff30>
  cc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  d0:	73746e65 	cmnvc	r4, #1616	; 0x650
  d4:	524f572f 	subpl	r5, pc, #12320768	; 0xbc0000
  d8:	614d2f4b 	cmpvs	sp, fp, asr #30
  dc:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  e0:	69724f65 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, lr}^
  e4:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
  e8:	6f725064 	svcvs	0x00725064
  ec:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
  f0:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
  f4:	6172672f 	cmnvs	r2, pc, lsr #14
  f8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  fc:	70736964 	rsbsvc	r6, r3, r4, ror #18
 100:	0079616c 	rsbseq	r6, r9, ip, ror #2
 104:	70617267 	rsbvc	r7, r1, r7, ror #4
 108:	5f636968 	svcpl	0x00636968
 10c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 110:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
 114:	615f7469 	cmpvs	pc, r9, ror #8
 118:	73007070 	movwvc	r7, #112	; 0x70
 11c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 120:	2f007075 	svccs	0x00007075
 124:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 128:	6d6f742f 	cfstrdvs	mvd7, [pc, #-188]!	; 74 <startup-0x1fffff8c>
 12c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 130:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 134:	572f7374 			; <UNDEFINED> instruction: 0x572f7374
 138:	2f4b524f 	svccs	0x004b524f
 13c:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
 140:	4f656e69 	svcmi	0x00656e69
 144:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 148:	50646574 	rsbpl	r6, r4, r4, ror r5
 14c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 150:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
 154:	672f676e 	strvs	r6, [pc, -lr, ror #14]!
 158:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 15c:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 160:	616c7073 	smcvs	50947	; 0xc703
 164:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 168:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 16c:	00632e70 	rsbeq	r2, r3, r0, ror lr
 170:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 174:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 178:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 17c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 180:	61760072 	cmnvs	r6, r2, ror r0
 184:	0065756c 	rsbeq	r7, r5, ip, ror #10
 188:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 18c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 190:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 194:	61726700 	cmnvs	r2, r0, lsl #14
 198:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 19c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 1a0:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 1a4:	00657a69 	rsbeq	r7, r5, r9, ror #20
 1a8:	20554e47 	subscs	r4, r5, r7, asr #28
 1ac:	20313143 	eorscs	r3, r1, r3, asr #2
 1b0:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
 1b4:	30322031 	eorscc	r2, r2, r1, lsr r0
 1b8:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
 1bc:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
 1c0:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 1c4:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1c8:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 1cc:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
 1d0:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 1d4:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
 1d8:	6172622d 	cmnvs	r2, sp, lsr #4
 1dc:	2068636e 	rsbcs	r6, r8, lr, ror #6
 1e0:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 1e4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 1e8:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 1ec:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
 1f0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 1f4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 1f8:	616d2d20 	cmnvs	sp, r0, lsr #26
 1fc:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 200:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 204:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 208:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 20c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 210:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 214:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 218:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 21c:	00304f2d 	eorseq	r4, r0, sp, lsr #30

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <main+0xdfffef3e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x000000000000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000012 	andeq	r0, r0, r2, lsl r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000066 	andcs	r0, r0, r6, rrx
  64:	0000002c 	andeq	r0, r0, ip, lsr #32
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	100e4101 	andne	r4, lr, r1, lsl #2
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	20000092 	mulcs	r0, r2, r0
  84:	00000022 	andeq	r0, r0, r2, lsr #32
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	100e4101 	andne	r4, lr, r1, lsl #2
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000b4 	strhcs	r0, [r0], -r4
  a4:	0000003c 	andeq	r0, r0, ip, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c4:	00000044 	andeq	r0, r0, r4, asr #32
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000134 	andcs	r0, r0, r4, lsr r1
  e4:	00000066 	andeq	r0, r0, r6, rrx
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	00000018 	andeq	r0, r0, r8, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	2000019a 	mulcs	r0, sl, r1
 104:	00000066 	andeq	r0, r0, r6, rrx
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	20000200 	andcs	r0, r0, r0, lsl #4
 120:	00000094 	muleq	r0, r4, r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	180e4101 	stmdane	lr, {r0, r8, lr}
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	20000294 	mulcs	r0, r4, r2
 140:	00000080 	andeq	r0, r0, r0, lsl #1
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000000 	andeq	r0, r0, r0
 15c:	20000314 	andcs	r0, r0, r4, lsl r3
 160:	00000046 	andeq	r0, r0, r6, asr #32
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	2000035a 	andcs	r0, r0, sl, asr r3
 180:	00000046 	andeq	r0, r0, r6, asr #32
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	100e4101 	andne	r4, lr, r1, lsl #2
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	00000018 	andeq	r0, r0, r8, lsl r0
 198:	00000000 	andeq	r0, r0, r0
 19c:	200003a0 	andcs	r0, r0, r0, lsr #7
 1a0:	00000016 	andeq	r0, r0, r6, lsl r0
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1b0:	00000018 	andeq	r0, r0, r8, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
 1bc:	0000001a 	andeq	r0, r0, sl, lsl r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1cc:	00000018 	andeq	r0, r0, r8, lsl r0
 1d0:	00000000 	andeq	r0, r0, r0
 1d4:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1d8:	0000000c 	andeq	r0, r0, ip
 1dc:	40080e41 	andmi	r0, r8, r1, asr #28
 1e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
