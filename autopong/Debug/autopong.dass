
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define STK_LOAD ((volatile unsigned int*)(0xE000E014))
#define STK_VAL  ((volatile unsigned int*)(0xE000E018))
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void ){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fbc2 	bl	2000078c <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168/4)-1);
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL  = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000)== 0){}
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    *STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_500ns>:
void delay_500ns(void){
20000054:	b580      	push	{r7, lr}
20000056:	af00      	add	r7, sp, #0
	delay_250ns();
20000058:	f7ff ffda 	bl	20000010 <delay_250ns>
	delay_250ns();
2000005c:	f7ff ffd8 	bl	20000010 <delay_250ns>
}
20000060:	46c0      	nop			; (mov r8, r8)
20000062:	46bd      	mov	sp, r7
20000064:	bd80      	pop	{r7, pc}

20000066 <delay_micro>:
void delay_micro(unsigned int us){
20000066:	b580      	push	{r7, lr}
20000068:	b082      	sub	sp, #8
2000006a:	af00      	add	r7, sp, #0
2000006c:	6078      	str	r0, [r7, #4]
    while(us--){
2000006e:	e007      	b.n	20000080 <delay_micro+0x1a>
        delay_250ns();
20000070:	f7ff ffce 	bl	20000010 <delay_250ns>
        delay_250ns();
20000074:	f7ff ffcc 	bl	20000010 <delay_250ns>
        delay_250ns();
20000078:	f7ff ffca 	bl	20000010 <delay_250ns>
        delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
    while(us--){
20000080:	687b      	ldr	r3, [r7, #4]
20000082:	1e5a      	subs	r2, r3, #1
20000084:	607a      	str	r2, [r7, #4]
20000086:	2b00      	cmp	r3, #0
20000088:	d1f2      	bne.n	20000070 <delay_micro+0xa>
    }
}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	46bd      	mov	sp, r7
2000008e:	b002      	add	sp, #8
20000090:	bd80      	pop	{r7, pc}

20000092 <delay_milli>:
void delay_milli(unsigned int ms){
20000092:	b580      	push	{r7, lr}
20000094:	b082      	sub	sp, #8
20000096:	af00      	add	r7, sp, #0
20000098:	6078      	str	r0, [r7, #4]
    while(ms--){
2000009a:	e002      	b.n	200000a2 <delay_milli+0x10>
        delay_micro(10);
2000009c:	200a      	movs	r0, #10
2000009e:	f7ff ffe2 	bl	20000066 <delay_micro>
    while(ms--){
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	1e5a      	subs	r2, r3, #1
200000a6:	607a      	str	r2, [r7, #4]
200000a8:	2b00      	cmp	r3, #0
200000aa:	d1f7      	bne.n	2000009c <delay_milli+0xa>
    }
    
}
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	b002      	add	sp, #8
200000b2:	bd80      	pop	{r7, pc}

200000b4 <graphic_ctrl_bit_set>:
	void (* move ) (struct tObj *);
	void (* set_speed ) (struct tObj *, int, int);
}OBJECT, *POBJECT;


void graphic_ctrl_bit_set(uint8_t x){
200000b4:	b580      	push	{r7, lr}
200000b6:	b082      	sub	sp, #8
200000b8:	af00      	add	r7, sp, #0
200000ba:	0002      	movs	r2, r0
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	701a      	strb	r2, [r3, #0]
	*PORT_ODR_LOW |= x;
200000c0:	4b0a      	ldr	r3, [pc, #40]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000c2:	781b      	ldrb	r3, [r3, #0]
200000c4:	b2da      	uxtb	r2, r3
200000c6:	4909      	ldr	r1, [pc, #36]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000c8:	1dfb      	adds	r3, r7, #7
200000ca:	781b      	ldrb	r3, [r3, #0]
200000cc:	4313      	orrs	r3, r2
200000ce:	b2db      	uxtb	r3, r3
200000d0:	700b      	strb	r3, [r1, #0]
	*PORT_ODR_LOW &= ~(1UL << 2);
200000d2:	4b06      	ldr	r3, [pc, #24]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	b2db      	uxtb	r3, r3
200000d8:	4a04      	ldr	r2, [pc, #16]	; (200000ec <graphic_ctrl_bit_set+0x38>)
200000da:	2104      	movs	r1, #4
200000dc:	438b      	bics	r3, r1
200000de:	b2db      	uxtb	r3, r3
200000e0:	7013      	strb	r3, [r2, #0]

}
200000e2:	46c0      	nop			; (mov r8, r8)
200000e4:	46bd      	mov	sp, r7
200000e6:	b002      	add	sp, #8
200000e8:	bd80      	pop	{r7, pc}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	40021014 	andmi	r1, r2, r4, lsl r0

200000f0 <graphic_ctrl_bit_clear>:
void graphic_ctrl_bit_clear(uint8_t x){
200000f0:	b580      	push	{r7, lr}
200000f2:	b082      	sub	sp, #8
200000f4:	af00      	add	r7, sp, #0
200000f6:	0002      	movs	r2, r0
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	701a      	strb	r2, [r3, #0]
	*PORT_ODR_LOW &= ~((1UL << 2) | x);
200000fc:	4b08      	ldr	r3, [pc, #32]	; (20000120 <graphic_ctrl_bit_clear+0x30>)
200000fe:	781b      	ldrb	r3, [r3, #0]
20000100:	b2db      	uxtb	r3, r3
20000102:	1dfa      	adds	r2, r7, #7
20000104:	7812      	ldrb	r2, [r2, #0]
20000106:	2104      	movs	r1, #4
20000108:	430a      	orrs	r2, r1
2000010a:	b2d2      	uxtb	r2, r2
2000010c:	43d2      	mvns	r2, r2
2000010e:	b2d2      	uxtb	r2, r2
20000110:	4903      	ldr	r1, [pc, #12]	; (20000120 <graphic_ctrl_bit_clear+0x30>)
20000112:	4013      	ands	r3, r2
20000114:	b2db      	uxtb	r3, r3
20000116:	700b      	strb	r3, [r1, #0]

}
20000118:	46c0      	nop			; (mov r8, r8)
2000011a:	46bd      	mov	sp, r7
2000011c:	b002      	add	sp, #8
2000011e:	bd80      	pop	{r7, pc}
20000120:	40021014 	andmi	r1, r2, r4, lsl r0

20000124 <select_controller>:
void select_controller(uint8_t controller){
20000124:	b580      	push	{r7, lr}
20000126:	b082      	sub	sp, #8
20000128:	af00      	add	r7, sp, #0
2000012a:	0002      	movs	r2, r0
2000012c:	1dfb      	adds	r3, r7, #7
2000012e:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000130:	1dfb      	adds	r3, r7, #7
20000132:	781b      	ldrb	r3, [r3, #0]
20000134:	2b08      	cmp	r3, #8
20000136:	d00c      	beq.n	20000152 <select_controller+0x2e>
20000138:	dc02      	bgt.n	20000140 <select_controller+0x1c>
2000013a:	2b00      	cmp	r3, #0
2000013c:	d005      	beq.n	2000014a <select_controller+0x26>
		graphic_ctrl_bit_set(B_CS1 | B_CS2);
		break;
	}
		
	
}
2000013e:	e01a      	b.n	20000176 <select_controller+0x52>
	switch(controller){
20000140:	2b10      	cmp	r3, #16
20000142:	d00d      	beq.n	20000160 <select_controller+0x3c>
20000144:	2b18      	cmp	r3, #24
20000146:	d012      	beq.n	2000016e <select_controller+0x4a>
}
20000148:	e015      	b.n	20000176 <select_controller+0x52>
		graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000014a:	2018      	movs	r0, #24
2000014c:	f7ff ffd0 	bl	200000f0 <graphic_ctrl_bit_clear>
		break;
20000150:	e011      	b.n	20000176 <select_controller+0x52>
		graphic_ctrl_bit_set(B_CS1);
20000152:	2008      	movs	r0, #8
20000154:	f7ff ffae 	bl	200000b4 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS2);
20000158:	2010      	movs	r0, #16
2000015a:	f7ff ffc9 	bl	200000f0 <graphic_ctrl_bit_clear>
		break;
2000015e:	e00a      	b.n	20000176 <select_controller+0x52>
		graphic_ctrl_bit_set(B_CS2);
20000160:	2010      	movs	r0, #16
20000162:	f7ff ffa7 	bl	200000b4 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS1);
20000166:	2008      	movs	r0, #8
20000168:	f7ff ffc2 	bl	200000f0 <graphic_ctrl_bit_clear>
		break;
2000016c:	e003      	b.n	20000176 <select_controller+0x52>
		graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000016e:	2018      	movs	r0, #24
20000170:	f7ff ffa0 	bl	200000b4 <graphic_ctrl_bit_set>
		break;
20000174:	46c0      	nop			; (mov r8, r8)
}
20000176:	46c0      	nop			; (mov r8, r8)
20000178:	46bd      	mov	sp, r7
2000017a:	b002      	add	sp, #8
2000017c:	bd80      	pop	{r7, pc}

2000017e <graphic_wait_ready>:
void graphic_wait_ready(void){
2000017e:	b580      	push	{r7, lr}
20000180:	b082      	sub	sp, #8
20000182:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000184:	2040      	movs	r0, #64	; 0x40
20000186:	f7ff ffb3 	bl	200000f0 <graphic_ctrl_bit_clear>
	*PORT_MODER = 0x00005555;
2000018a:	4b16      	ldr	r3, [pc, #88]	; (200001e4 <graphic_wait_ready+0x66>)
2000018c:	4a16      	ldr	r2, [pc, #88]	; (200001e8 <graphic_wait_ready+0x6a>)
2000018e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000190:	2001      	movs	r0, #1
20000192:	f7ff ffad 	bl	200000f0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000196:	2002      	movs	r0, #2
20000198:	f7ff ff8c 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
2000019c:	f7ff ff5a 	bl	20000054 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff87 	bl	200000b4 <graphic_ctrl_bit_set>
		delay_500ns();
200001a6:	f7ff ff55 	bl	20000054 <delay_500ns>
		c = *PORT_IDR_HIGH & LCD_BUSY;
200001aa:	4b10      	ldr	r3, [pc, #64]	; (200001ec <graphic_wait_ready+0x6e>)
200001ac:	781b      	ldrb	r3, [r3, #0]
200001ae:	b2da      	uxtb	r2, r3
200001b0:	1dfb      	adds	r3, r7, #7
200001b2:	217f      	movs	r1, #127	; 0x7f
200001b4:	438a      	bics	r2, r1
200001b6:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200001b8:	2040      	movs	r0, #64	; 0x40
200001ba:	f7ff ff99 	bl	200000f0 <graphic_ctrl_bit_clear>
		delay_500ns();
200001be:	f7ff ff49 	bl	20000054 <delay_500ns>
		if( c == 0)
200001c2:	1dfb      	adds	r3, r7, #7
200001c4:	781b      	ldrb	r3, [r3, #0]
200001c6:	2b00      	cmp	r3, #0
200001c8:	d000      	beq.n	200001cc <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
200001ca:	e7e9      	b.n	200001a0 <graphic_wait_ready+0x22>
			break;
200001cc:	46c0      	nop			; (mov r8, r8)
		
	}
	graphic_ctrl_bit_set(B_E);
200001ce:	2040      	movs	r0, #64	; 0x40
200001d0:	f7ff ff70 	bl	200000b4 <graphic_ctrl_bit_set>
	*PORT_MODER = 0x55555555;
200001d4:	4b03      	ldr	r3, [pc, #12]	; (200001e4 <graphic_wait_ready+0x66>)
200001d6:	4a06      	ldr	r2, [pc, #24]	; (200001f0 <graphic_wait_ready+0x72>)
200001d8:	601a      	str	r2, [r3, #0]
}
200001da:	46c0      	nop			; (mov r8, r8)
200001dc:	46bd      	mov	sp, r7
200001de:	b002      	add	sp, #8
200001e0:	bd80      	pop	{r7, pc}
200001e2:	46c0      	nop			; (mov r8, r8)
200001e4:	40021000 	andmi	r1, r2, r0
200001e8:	00005555 	andeq	r5, r0, r5, asr r5
200001ec:	40021011 	andmi	r1, r2, r1, lsl r0
200001f0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001f4 <graphic_read>:
uint8_t graphic_read(uint8_t controller ){
200001f4:	b580      	push	{r7, lr}
200001f6:	b084      	sub	sp, #16
200001f8:	af00      	add	r7, sp, #0
200001fa:	0002      	movs	r2, r0
200001fc:	1dfb      	adds	r3, r7, #7
200001fe:	701a      	strb	r2, [r3, #0]
	uint8_t RV;
	graphic_ctrl_bit_clear( B_E );
20000200:	2040      	movs	r0, #64	; 0x40
20000202:	f7ff ff75 	bl	200000f0 <graphic_ctrl_bit_clear>
	*PORT_MODER = 0x00005555;
20000206:	4b1c      	ldr	r3, [pc, #112]	; (20000278 <graphic_read+0x84>)
20000208:	4a1c      	ldr	r2, [pc, #112]	; (2000027c <graphic_read+0x88>)
2000020a:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set( B_RS | B_RW);
2000020c:	2003      	movs	r0, #3
2000020e:	f7ff ff51 	bl	200000b4 <graphic_ctrl_bit_set>
	
	select_controller( controller );
20000212:	1dfb      	adds	r3, r7, #7
20000214:	781b      	ldrb	r3, [r3, #0]
20000216:	0018      	movs	r0, r3
20000218:	f7ff ff84 	bl	20000124 <select_controller>
	delay_500ns();
2000021c:	f7ff ff1a 	bl	20000054 <delay_500ns>
	
	graphic_ctrl_bit_set( B_E );
20000220:	2040      	movs	r0, #64	; 0x40
20000222:	f7ff ff47 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
20000226:	f7ff ff15 	bl	20000054 <delay_500ns>
	
	RV = *PORT_IDR_HIGH;
2000022a:	4a15      	ldr	r2, [pc, #84]	; (20000280 <graphic_read+0x8c>)
2000022c:	230f      	movs	r3, #15
2000022e:	18fb      	adds	r3, r7, r3
20000230:	7812      	ldrb	r2, [r2, #0]
20000232:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear( B_E );
20000234:	2040      	movs	r0, #64	; 0x40
20000236:	f7ff ff5b 	bl	200000f0 <graphic_ctrl_bit_clear>
	
	*PORT_MODER = 0x55555555;
2000023a:	4b0f      	ldr	r3, [pc, #60]	; (20000278 <graphic_read+0x84>)
2000023c:	4a11      	ldr	r2, [pc, #68]	; (20000284 <graphic_read+0x90>)
2000023e:	601a      	str	r2, [r3, #0]
	if( controller & B_CS1 ){
20000240:	1dfb      	adds	r3, r7, #7
20000242:	781b      	ldrb	r3, [r3, #0]
20000244:	2208      	movs	r2, #8
20000246:	4013      	ands	r3, r2
20000248:	d004      	beq.n	20000254 <graphic_read+0x60>
		select_controller(B_CS1);
2000024a:	2008      	movs	r0, #8
2000024c:	f7ff ff6a 	bl	20000124 <select_controller>
		graphic_wait_ready();
20000250:	f7ff ff95 	bl	2000017e <graphic_wait_ready>
	}
	if( controller & B_CS2 ){
20000254:	1dfb      	adds	r3, r7, #7
20000256:	781b      	ldrb	r3, [r3, #0]
20000258:	2210      	movs	r2, #16
2000025a:	4013      	ands	r3, r2
2000025c:	d004      	beq.n	20000268 <graphic_read+0x74>
		select_controller(B_CS2);
2000025e:	2010      	movs	r0, #16
20000260:	f7ff ff60 	bl	20000124 <select_controller>
		graphic_wait_ready();
20000264:	f7ff ff8b 	bl	2000017e <graphic_wait_ready>
	}
	return RV;
20000268:	230f      	movs	r3, #15
2000026a:	18fb      	adds	r3, r7, r3
2000026c:	781b      	ldrb	r3, [r3, #0]
}
2000026e:	0018      	movs	r0, r3
20000270:	46bd      	mov	sp, r7
20000272:	b004      	add	sp, #16
20000274:	bd80      	pop	{r7, pc}
20000276:	46c0      	nop			; (mov r8, r8)
20000278:	40021000 	andmi	r1, r2, r0
2000027c:	00005555 	andeq	r5, r0, r5, asr r5
20000280:	40021011 	andmi	r1, r2, r1, lsl r0
20000284:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000288 <graphic_read_data>:
uint8_t graphic_read_data(unsigned char controller){
20000288:	b580      	push	{r7, lr}
2000028a:	b082      	sub	sp, #8
2000028c:	af00      	add	r7, sp, #0
2000028e:	0002      	movs	r2, r0
20000290:	1dfb      	adds	r3, r7, #7
20000292:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000294:	1dfb      	adds	r3, r7, #7
20000296:	781b      	ldrb	r3, [r3, #0]
20000298:	0018      	movs	r0, r3
2000029a:	f7ff ffab 	bl	200001f4 <graphic_read>
	return graphic_read(controller);
2000029e:	1dfb      	adds	r3, r7, #7
200002a0:	781b      	ldrb	r3, [r3, #0]
200002a2:	0018      	movs	r0, r3
200002a4:	f7ff ffa6 	bl	200001f4 <graphic_read>
200002a8:	0003      	movs	r3, r0
	
}
200002aa:	0018      	movs	r0, r3
200002ac:	46bd      	mov	sp, r7
200002ae:	b002      	add	sp, #8
200002b0:	bd80      	pop	{r7, pc}

200002b2 <graphic_write>:
void graphic_write(uint8_t value, uint8_t controller){
200002b2:	b580      	push	{r7, lr}
200002b4:	b082      	sub	sp, #8
200002b6:	af00      	add	r7, sp, #0
200002b8:	0002      	movs	r2, r0
200002ba:	1dfb      	adds	r3, r7, #7
200002bc:	701a      	strb	r2, [r3, #0]
200002be:	1dbb      	adds	r3, r7, #6
200002c0:	1c0a      	adds	r2, r1, #0
200002c2:	701a      	strb	r2, [r3, #0]
	*PORT_ODR_HIGH = value;
200002c4:	4a19      	ldr	r2, [pc, #100]	; (2000032c <graphic_write+0x7a>)
200002c6:	1dfb      	adds	r3, r7, #7
200002c8:	781b      	ldrb	r3, [r3, #0]
200002ca:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002cc:	1dbb      	adds	r3, r7, #6
200002ce:	781b      	ldrb	r3, [r3, #0]
200002d0:	0018      	movs	r0, r3
200002d2:	f7ff ff27 	bl	20000124 <select_controller>
	delay_500ns();
200002d6:	f7ff febd 	bl	20000054 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002da:	2040      	movs	r0, #64	; 0x40
200002dc:	f7ff feea 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
200002e0:	f7ff feb8 	bl	20000054 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002e4:	2040      	movs	r0, #64	; 0x40
200002e6:	f7ff ff03 	bl	200000f0 <graphic_ctrl_bit_clear>
	
	if( controller & B_CS1 ){
200002ea:	1dbb      	adds	r3, r7, #6
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	2208      	movs	r2, #8
200002f0:	4013      	ands	r3, r2
200002f2:	d004      	beq.n	200002fe <graphic_write+0x4c>
		select_controller( B_CS1 );
200002f4:	2008      	movs	r0, #8
200002f6:	f7ff ff15 	bl	20000124 <select_controller>
		graphic_wait_ready();
200002fa:	f7ff ff40 	bl	2000017e <graphic_wait_ready>
	}
	if( controller & B_CS2 ){
200002fe:	1dbb      	adds	r3, r7, #6
20000300:	781b      	ldrb	r3, [r3, #0]
20000302:	2210      	movs	r2, #16
20000304:	4013      	ands	r3, r2
20000306:	d004      	beq.n	20000312 <graphic_write+0x60>
		select_controller( B_CS2 );
20000308:	2010      	movs	r0, #16
2000030a:	f7ff ff0b 	bl	20000124 <select_controller>
		graphic_wait_ready();
2000030e:	f7ff ff36 	bl	2000017e <graphic_wait_ready>
	}
	*PORT_ODR_HIGH = 0x0;
20000312:	4b06      	ldr	r3, [pc, #24]	; (2000032c <graphic_write+0x7a>)
20000314:	2200      	movs	r2, #0
20000316:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000318:	2040      	movs	r0, #64	; 0x40
2000031a:	f7ff fecb 	bl	200000b4 <graphic_ctrl_bit_set>
	select_controller(0);
2000031e:	2000      	movs	r0, #0
20000320:	f7ff ff00 	bl	20000124 <select_controller>
}
20000324:	46c0      	nop			; (mov r8, r8)
20000326:	46bd      	mov	sp, r7
20000328:	b002      	add	sp, #8
2000032a:	bd80      	pop	{r7, pc}
2000032c:	40021015 	andmi	r1, r2, r5, lsl r0

20000330 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller){
20000330:	b580      	push	{r7, lr}
20000332:	b082      	sub	sp, #8
20000334:	af00      	add	r7, sp, #0
20000336:	0002      	movs	r2, r0
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	701a      	strb	r2, [r3, #0]
2000033c:	1dbb      	adds	r3, r7, #6
2000033e:	1c0a      	adds	r2, r1, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear( B_E );
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fed4 	bl	200000f0 <graphic_ctrl_bit_clear>
	select_controller( controller );
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	0018      	movs	r0, r3
2000034e:	f7ff fee9 	bl	20000124 <select_controller>
	graphic_ctrl_bit_clear( B_RS | B_RW );
20000352:	2003      	movs	r0, #3
20000354:	f7ff fecc 	bl	200000f0 <graphic_ctrl_bit_clear>
	graphic_write( command, controller );
20000358:	1dbb      	adds	r3, r7, #6
2000035a:	781a      	ldrb	r2, [r3, #0]
2000035c:	1dfb      	adds	r3, r7, #7
2000035e:	781b      	ldrb	r3, [r3, #0]
20000360:	0011      	movs	r1, r2
20000362:	0018      	movs	r0, r3
20000364:	f7ff ffa5 	bl	200002b2 <graphic_write>
}
20000368:	46c0      	nop			; (mov r8, r8)
2000036a:	46bd      	mov	sp, r7
2000036c:	b002      	add	sp, #8
2000036e:	bd80      	pop	{r7, pc}

20000370 <graphic_write_data>:
void graphic_write_data( uint8_t data, uint8_t controller ){
20000370:	b580      	push	{r7, lr}
20000372:	b082      	sub	sp, #8
20000374:	af00      	add	r7, sp, #0
20000376:	0002      	movs	r2, r0
20000378:	1dfb      	adds	r3, r7, #7
2000037a:	701a      	strb	r2, [r3, #0]
2000037c:	1dbb      	adds	r3, r7, #6
2000037e:	1c0a      	adds	r2, r1, #0
20000380:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear( B_E );
20000382:	2040      	movs	r0, #64	; 0x40
20000384:	f7ff feb4 	bl	200000f0 <graphic_ctrl_bit_clear>
	select_controller( controller );
20000388:	1dbb      	adds	r3, r7, #6
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0018      	movs	r0, r3
2000038e:	f7ff fec9 	bl	20000124 <select_controller>
	graphic_ctrl_bit_set( B_RS );
20000392:	2001      	movs	r0, #1
20000394:	f7ff fe8e 	bl	200000b4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear( B_RW );
20000398:	2002      	movs	r0, #2
2000039a:	f7ff fea9 	bl	200000f0 <graphic_ctrl_bit_clear>
	graphic_write( data, controller );
2000039e:	1dbb      	adds	r3, r7, #6
200003a0:	781a      	ldrb	r2, [r3, #0]
200003a2:	1dfb      	adds	r3, r7, #7
200003a4:	781b      	ldrb	r3, [r3, #0]
200003a6:	0011      	movs	r1, r2
200003a8:	0018      	movs	r0, r3
200003aa:	f7ff ff82 	bl	200002b2 <graphic_write>
}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	46bd      	mov	sp, r7
200003b2:	b002      	add	sp, #8
200003b4:	bd80      	pop	{r7, pc}

200003b6 <graphic_clear_screen>:
void graphic_clear_screen(void){
200003b6:	b580      	push	{r7, lr}
200003b8:	b082      	sub	sp, #8
200003ba:	af00      	add	r7, sp, #0
	for( int i = 0; i < 7; i++){											//KAN SKAPA PROBLEM DÅ I ALDRiG ÄR 7, SAMMA MED K
200003bc:	2300      	movs	r3, #0
200003be:	607b      	str	r3, [r7, #4]
200003c0:	e01e      	b.n	20000400 <graphic_clear_screen+0x4a>
		graphic_write_command( LCD_SET_PAGE | i, B_CS1 | B_CS2 );
200003c2:	687b      	ldr	r3, [r7, #4]
200003c4:	b25b      	sxtb	r3, r3
200003c6:	2248      	movs	r2, #72	; 0x48
200003c8:	4252      	negs	r2, r2
200003ca:	4313      	orrs	r3, r2
200003cc:	b25b      	sxtb	r3, r3
200003ce:	b2db      	uxtb	r3, r3
200003d0:	2118      	movs	r1, #24
200003d2:	0018      	movs	r0, r3
200003d4:	f7ff ffac 	bl	20000330 <graphic_write_command>
		graphic_write_command( LCD_SET_ADD	| 0, B_CS1 | B_CS2 );
200003d8:	2118      	movs	r1, #24
200003da:	2040      	movs	r0, #64	; 0x40
200003dc:	f7ff ffa8 	bl	20000330 <graphic_write_command>
		for(int k = 0; k < 63; k++){
200003e0:	2300      	movs	r3, #0
200003e2:	603b      	str	r3, [r7, #0]
200003e4:	e006      	b.n	200003f4 <graphic_clear_screen+0x3e>
			graphic_write_data( 0, B_CS1 | B_CS2 );
200003e6:	2118      	movs	r1, #24
200003e8:	2000      	movs	r0, #0
200003ea:	f7ff ffc1 	bl	20000370 <graphic_write_data>
		for(int k = 0; k < 63; k++){
200003ee:	683b      	ldr	r3, [r7, #0]
200003f0:	3301      	adds	r3, #1
200003f2:	603b      	str	r3, [r7, #0]
200003f4:	683b      	ldr	r3, [r7, #0]
200003f6:	2b3e      	cmp	r3, #62	; 0x3e
200003f8:	ddf5      	ble.n	200003e6 <graphic_clear_screen+0x30>
	for( int i = 0; i < 7; i++){											//KAN SKAPA PROBLEM DÅ I ALDRiG ÄR 7, SAMMA MED K
200003fa:	687b      	ldr	r3, [r7, #4]
200003fc:	3301      	adds	r3, #1
200003fe:	607b      	str	r3, [r7, #4]
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	2b06      	cmp	r3, #6
20000404:	dddd      	ble.n	200003c2 <graphic_clear_screen+0xc>
		}
	}
}
20000406:	46c0      	nop			; (mov r8, r8)
20000408:	46bd      	mov	sp, r7
2000040a:	b002      	add	sp, #8
2000040c:	bd80      	pop	{r7, pc}

2000040e <pixel>:
void pixel(unsigned x, unsigned y, unsigned set){
2000040e:	b5b0      	push	{r4, r5, r7, lr}
20000410:	b088      	sub	sp, #32
20000412:	af00      	add	r7, sp, #0
20000414:	60f8      	str	r0, [r7, #12]
20000416:	60b9      	str	r1, [r7, #8]
20000418:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if(x < 1 || y < 1 || x > 128 || y > 64)
2000041a:	68fb      	ldr	r3, [r7, #12]
2000041c:	2b00      	cmp	r3, #0
2000041e:	d100      	bne.n	20000422 <pixel+0x14>
20000420:	e0ab      	b.n	2000057a <pixel+0x16c>
20000422:	68bb      	ldr	r3, [r7, #8]
20000424:	2b00      	cmp	r3, #0
20000426:	d100      	bne.n	2000042a <pixel+0x1c>
20000428:	e0a7      	b.n	2000057a <pixel+0x16c>
2000042a:	68fb      	ldr	r3, [r7, #12]
2000042c:	2b80      	cmp	r3, #128	; 0x80
2000042e:	d900      	bls.n	20000432 <pixel+0x24>
20000430:	e0a3      	b.n	2000057a <pixel+0x16c>
20000432:	68bb      	ldr	r3, [r7, #8]
20000434:	2b40      	cmp	r3, #64	; 0x40
20000436:	d900      	bls.n	2000043a <pixel+0x2c>
20000438:	e09f      	b.n	2000057a <pixel+0x16c>
		return;
	index = (y-1)/8;
2000043a:	68bb      	ldr	r3, [r7, #8]
2000043c:	3b01      	subs	r3, #1
2000043e:	08db      	lsrs	r3, r3, #3
20000440:	61bb      	str	r3, [r7, #24]
	switch((y-1)%8){
20000442:	68bb      	ldr	r3, [r7, #8]
20000444:	3b01      	subs	r3, #1
20000446:	2207      	movs	r2, #7
20000448:	4013      	ands	r3, r2
2000044a:	2b07      	cmp	r3, #7
2000044c:	d82c      	bhi.n	200004a8 <pixel+0x9a>
2000044e:	009a      	lsls	r2, r3, #2
20000450:	4b4c      	ldr	r3, [pc, #304]	; (20000584 <pixel+0x176>)
20000452:	18d3      	adds	r3, r2, r3
20000454:	681b      	ldr	r3, [r3, #0]
20000456:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000458:	231f      	movs	r3, #31
2000045a:	18fb      	adds	r3, r7, r3
2000045c:	2201      	movs	r2, #1
2000045e:	701a      	strb	r2, [r3, #0]
20000460:	e022      	b.n	200004a8 <pixel+0x9a>
		case 1:	mask = 2; break;
20000462:	231f      	movs	r3, #31
20000464:	18fb      	adds	r3, r7, r3
20000466:	2202      	movs	r2, #2
20000468:	701a      	strb	r2, [r3, #0]
2000046a:	e01d      	b.n	200004a8 <pixel+0x9a>
		case 2: mask = 4; break;
2000046c:	231f      	movs	r3, #31
2000046e:	18fb      	adds	r3, r7, r3
20000470:	2204      	movs	r2, #4
20000472:	701a      	strb	r2, [r3, #0]
20000474:	e018      	b.n	200004a8 <pixel+0x9a>
		case 3: mask = 8; break;
20000476:	231f      	movs	r3, #31
20000478:	18fb      	adds	r3, r7, r3
2000047a:	2208      	movs	r2, #8
2000047c:	701a      	strb	r2, [r3, #0]
2000047e:	e013      	b.n	200004a8 <pixel+0x9a>
		case 4: mask = 0x10; break;
20000480:	231f      	movs	r3, #31
20000482:	18fb      	adds	r3, r7, r3
20000484:	2210      	movs	r2, #16
20000486:	701a      	strb	r2, [r3, #0]
20000488:	e00e      	b.n	200004a8 <pixel+0x9a>
		case 5: mask = 0x20; break;
2000048a:	231f      	movs	r3, #31
2000048c:	18fb      	adds	r3, r7, r3
2000048e:	2220      	movs	r2, #32
20000490:	701a      	strb	r2, [r3, #0]
20000492:	e009      	b.n	200004a8 <pixel+0x9a>
		case 6: mask = 0x40; break;
20000494:	231f      	movs	r3, #31
20000496:	18fb      	adds	r3, r7, r3
20000498:	2240      	movs	r2, #64	; 0x40
2000049a:	701a      	strb	r2, [r3, #0]
2000049c:	e004      	b.n	200004a8 <pixel+0x9a>
		case 7: mask = 0x80; break;
2000049e:	231f      	movs	r3, #31
200004a0:	18fb      	adds	r3, r7, r3
200004a2:	2280      	movs	r2, #128	; 0x80
200004a4:	701a      	strb	r2, [r3, #0]
200004a6:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0)
200004a8:	687b      	ldr	r3, [r7, #4]
200004aa:	2b00      	cmp	r3, #0
200004ac:	d105      	bne.n	200004ba <pixel+0xac>
		mask = ~mask;
200004ae:	221f      	movs	r2, #31
200004b0:	18bb      	adds	r3, r7, r2
200004b2:	18ba      	adds	r2, r7, r2
200004b4:	7812      	ldrb	r2, [r2, #0]
200004b6:	43d2      	mvns	r2, r2
200004b8:	701a      	strb	r2, [r3, #0]
	if(x > 64){
200004ba:	68fb      	ldr	r3, [r7, #12]
200004bc:	2b40      	cmp	r3, #64	; 0x40
200004be:	d907      	bls.n	200004d0 <pixel+0xc2>
		controller = B_CS2;
200004c0:	231e      	movs	r3, #30
200004c2:	18fb      	adds	r3, r7, r3
200004c4:	2210      	movs	r2, #16
200004c6:	701a      	strb	r2, [r3, #0]
		x = x-65;
200004c8:	68fb      	ldr	r3, [r7, #12]
200004ca:	3b41      	subs	r3, #65	; 0x41
200004cc:	60fb      	str	r3, [r7, #12]
200004ce:	e006      	b.n	200004de <pixel+0xd0>
	}else{ 
		controller = B_CS1;
200004d0:	231e      	movs	r3, #30
200004d2:	18fb      	adds	r3, r7, r3
200004d4:	2208      	movs	r2, #8
200004d6:	701a      	strb	r2, [r3, #0]
		x = x-1;	
200004d8:	68fb      	ldr	r3, [r7, #12]
200004da:	3b01      	subs	r3, #1
200004dc:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller);
200004de:	68fb      	ldr	r3, [r7, #12]
200004e0:	b2db      	uxtb	r3, r3
200004e2:	2240      	movs	r2, #64	; 0x40
200004e4:	4313      	orrs	r3, r2
200004e6:	b2da      	uxtb	r2, r3
200004e8:	251e      	movs	r5, #30
200004ea:	197b      	adds	r3, r7, r5
200004ec:	781b      	ldrb	r3, [r3, #0]
200004ee:	0019      	movs	r1, r3
200004f0:	0010      	movs	r0, r2
200004f2:	f7ff ff1d 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200004f6:	69bb      	ldr	r3, [r7, #24]
200004f8:	b25b      	sxtb	r3, r3
200004fa:	2248      	movs	r2, #72	; 0x48
200004fc:	4252      	negs	r2, r2
200004fe:	4313      	orrs	r3, r2
20000500:	b25b      	sxtb	r3, r3
20000502:	b2da      	uxtb	r2, r3
20000504:	197b      	adds	r3, r7, r5
20000506:	781b      	ldrb	r3, [r3, #0]
20000508:	0019      	movs	r1, r3
2000050a:	0010      	movs	r0, r2
2000050c:	f7ff ff10 	bl	20000330 <graphic_write_command>
	c = graphic_read_data(controller);
20000510:	2317      	movs	r3, #23
20000512:	18fc      	adds	r4, r7, r3
20000514:	197b      	adds	r3, r7, r5
20000516:	781b      	ldrb	r3, [r3, #0]
20000518:	0018      	movs	r0, r3
2000051a:	f7ff feb5 	bl	20000288 <graphic_read_data>
2000051e:	0003      	movs	r3, r0
20000520:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000522:	68fb      	ldr	r3, [r7, #12]
20000524:	b2db      	uxtb	r3, r3
20000526:	2240      	movs	r2, #64	; 0x40
20000528:	4313      	orrs	r3, r2
2000052a:	b2da      	uxtb	r2, r3
2000052c:	197b      	adds	r3, r7, r5
2000052e:	781b      	ldrb	r3, [r3, #0]
20000530:	0019      	movs	r1, r3
20000532:	0010      	movs	r0, r2
20000534:	f7ff fefc 	bl	20000330 <graphic_write_command>
	if(set == 1){
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	2b01      	cmp	r3, #1
2000053c:	d109      	bne.n	20000552 <pixel+0x144>
		mask = mask | c;
2000053e:	221f      	movs	r2, #31
20000540:	18bb      	adds	r3, r7, r2
20000542:	18b9      	adds	r1, r7, r2
20000544:	2217      	movs	r2, #23
20000546:	18ba      	adds	r2, r7, r2
20000548:	7809      	ldrb	r1, [r1, #0]
2000054a:	7812      	ldrb	r2, [r2, #0]
2000054c:	430a      	orrs	r2, r1
2000054e:	701a      	strb	r2, [r3, #0]
20000550:	e008      	b.n	20000564 <pixel+0x156>
	}else{
		mask = mask & c;
20000552:	221f      	movs	r2, #31
20000554:	18bb      	adds	r3, r7, r2
20000556:	18ba      	adds	r2, r7, r2
20000558:	2117      	movs	r1, #23
2000055a:	1879      	adds	r1, r7, r1
2000055c:	7812      	ldrb	r2, [r2, #0]
2000055e:	7809      	ldrb	r1, [r1, #0]
20000560:	400a      	ands	r2, r1
20000562:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000564:	231e      	movs	r3, #30
20000566:	18fb      	adds	r3, r7, r3
20000568:	781a      	ldrb	r2, [r3, #0]
2000056a:	231f      	movs	r3, #31
2000056c:	18fb      	adds	r3, r7, r3
2000056e:	781b      	ldrb	r3, [r3, #0]
20000570:	0011      	movs	r1, r2
20000572:	0018      	movs	r0, r3
20000574:	f7ff fefc 	bl	20000370 <graphic_write_data>
20000578:	e000      	b.n	2000057c <pixel+0x16e>
		return;
2000057a:	46c0      	nop			; (mov r8, r8)
}
2000057c:	46bd      	mov	sp, r7
2000057e:	b008      	add	sp, #32
20000580:	bdb0      	pop	{r4, r5, r7, pc}
20000582:	46c0      	nop			; (mov r8, r8)
20000584:	20000818 	andcs	r0, r0, r8, lsl r8

20000588 <set_object_speed>:
void set_object_speed(POBJECT object, int speedx, int speedy){
20000588:	b580      	push	{r7, lr}
2000058a:	b084      	sub	sp, #16
2000058c:	af00      	add	r7, sp, #0
2000058e:	60f8      	str	r0, [r7, #12]
20000590:	60b9      	str	r1, [r7, #8]
20000592:	607a      	str	r2, [r7, #4]
	object->dirx = speedx;
20000594:	68fb      	ldr	r3, [r7, #12]
20000596:	68ba      	ldr	r2, [r7, #8]
20000598:	605a      	str	r2, [r3, #4]
	object->diry = speedy;
2000059a:	68fb      	ldr	r3, [r7, #12]
2000059c:	687a      	ldr	r2, [r7, #4]
2000059e:	609a      	str	r2, [r3, #8]
}
200005a0:	46c0      	nop			; (mov r8, r8)
200005a2:	46bd      	mov	sp, r7
200005a4:	b004      	add	sp, #16
200005a6:	bd80      	pop	{r7, pc}

200005a8 <draw_object>:
void draw_object(POBJECT object){
200005a8:	b580      	push	{r7, lr}
200005aa:	b084      	sub	sp, #16
200005ac:	af00      	add	r7, sp, #0
200005ae:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numPoints; i++){
200005b0:	2300      	movs	r3, #0
200005b2:	60fb      	str	r3, [r7, #12]
200005b4:	e01f      	b.n	200005f6 <draw_object+0x4e>
			pixel( object->geo->px[i].x+object->posx, object->geo->px[i].y+object->posy,1 );
200005b6:	687b      	ldr	r3, [r7, #4]
200005b8:	681a      	ldr	r2, [r3, #0]
200005ba:	68fb      	ldr	r3, [r7, #12]
200005bc:	3304      	adds	r3, #4
200005be:	005b      	lsls	r3, r3, #1
200005c0:	18d3      	adds	r3, r2, r3
200005c2:	3304      	adds	r3, #4
200005c4:	781b      	ldrb	r3, [r3, #0]
200005c6:	001a      	movs	r2, r3
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	68db      	ldr	r3, [r3, #12]
200005cc:	18d3      	adds	r3, r2, r3
200005ce:	0018      	movs	r0, r3
200005d0:	687b      	ldr	r3, [r7, #4]
200005d2:	681a      	ldr	r2, [r3, #0]
200005d4:	68fb      	ldr	r3, [r7, #12]
200005d6:	3304      	adds	r3, #4
200005d8:	005b      	lsls	r3, r3, #1
200005da:	18d3      	adds	r3, r2, r3
200005dc:	3305      	adds	r3, #5
200005de:	781b      	ldrb	r3, [r3, #0]
200005e0:	001a      	movs	r2, r3
200005e2:	687b      	ldr	r3, [r7, #4]
200005e4:	691b      	ldr	r3, [r3, #16]
200005e6:	18d3      	adds	r3, r2, r3
200005e8:	2201      	movs	r2, #1
200005ea:	0019      	movs	r1, r3
200005ec:	f7ff ff0f 	bl	2000040e <pixel>
	for(int i = 0; i < object->geo->numPoints; i++){
200005f0:	68fb      	ldr	r3, [r7, #12]
200005f2:	3301      	adds	r3, #1
200005f4:	60fb      	str	r3, [r7, #12]
200005f6:	687b      	ldr	r3, [r7, #4]
200005f8:	681b      	ldr	r3, [r3, #0]
200005fa:	681b      	ldr	r3, [r3, #0]
200005fc:	68fa      	ldr	r2, [r7, #12]
200005fe:	429a      	cmp	r2, r3
20000600:	dbd9      	blt.n	200005b6 <draw_object+0xe>
	}
}
20000602:	46c0      	nop			; (mov r8, r8)
20000604:	46bd      	mov	sp, r7
20000606:	b004      	add	sp, #16
20000608:	bd80      	pop	{r7, pc}

2000060a <clear_object>:
void clear_object(POBJECT object){
2000060a:	b580      	push	{r7, lr}
2000060c:	b084      	sub	sp, #16
2000060e:	af00      	add	r7, sp, #0
20000610:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numPoints; i++){
20000612:	2300      	movs	r3, #0
20000614:	60fb      	str	r3, [r7, #12]
20000616:	e01f      	b.n	20000658 <clear_object+0x4e>
			pixel( object->geo->px[i].x+object->posx, object->geo->px[i].y+object->posy,0 );
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	681a      	ldr	r2, [r3, #0]
2000061c:	68fb      	ldr	r3, [r7, #12]
2000061e:	3304      	adds	r3, #4
20000620:	005b      	lsls	r3, r3, #1
20000622:	18d3      	adds	r3, r2, r3
20000624:	3304      	adds	r3, #4
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	001a      	movs	r2, r3
2000062a:	687b      	ldr	r3, [r7, #4]
2000062c:	68db      	ldr	r3, [r3, #12]
2000062e:	18d3      	adds	r3, r2, r3
20000630:	0018      	movs	r0, r3
20000632:	687b      	ldr	r3, [r7, #4]
20000634:	681a      	ldr	r2, [r3, #0]
20000636:	68fb      	ldr	r3, [r7, #12]
20000638:	3304      	adds	r3, #4
2000063a:	005b      	lsls	r3, r3, #1
2000063c:	18d3      	adds	r3, r2, r3
2000063e:	3305      	adds	r3, #5
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	001a      	movs	r2, r3
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	691b      	ldr	r3, [r3, #16]
20000648:	18d3      	adds	r3, r2, r3
2000064a:	2200      	movs	r2, #0
2000064c:	0019      	movs	r1, r3
2000064e:	f7ff fede 	bl	2000040e <pixel>
	for(int i = 0; i < object->geo->numPoints; i++){
20000652:	68fb      	ldr	r3, [r7, #12]
20000654:	3301      	adds	r3, #1
20000656:	60fb      	str	r3, [r7, #12]
20000658:	687b      	ldr	r3, [r7, #4]
2000065a:	681b      	ldr	r3, [r3, #0]
2000065c:	681b      	ldr	r3, [r3, #0]
2000065e:	68fa      	ldr	r2, [r7, #12]
20000660:	429a      	cmp	r2, r3
20000662:	dbd9      	blt.n	20000618 <clear_object+0xe>
	}
}
20000664:	46c0      	nop			; (mov r8, r8)
20000666:	46bd      	mov	sp, r7
20000668:	b004      	add	sp, #16
2000066a:	bd80      	pop	{r7, pc}

2000066c <move_object>:
void move_object(POBJECT object){
2000066c:	b580      	push	{r7, lr}
2000066e:	b082      	sub	sp, #8
20000670:	af00      	add	r7, sp, #0
20000672:	6078      	str	r0, [r7, #4]
	clear_object(object);
20000674:	687b      	ldr	r3, [r7, #4]
20000676:	0018      	movs	r0, r3
20000678:	f7ff ffc7 	bl	2000060a <clear_object>
	object->posx = object->dirx + object->posx;
2000067c:	687b      	ldr	r3, [r7, #4]
2000067e:	685a      	ldr	r2, [r3, #4]
20000680:	687b      	ldr	r3, [r7, #4]
20000682:	68db      	ldr	r3, [r3, #12]
20000684:	18d2      	adds	r2, r2, r3
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	60da      	str	r2, [r3, #12]
	object->posy = object->diry + object->posy;
2000068a:	687b      	ldr	r3, [r7, #4]
2000068c:	689a      	ldr	r2, [r3, #8]
2000068e:	687b      	ldr	r3, [r7, #4]
20000690:	691b      	ldr	r3, [r3, #16]
20000692:	18d2      	adds	r2, r2, r3
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	611a      	str	r2, [r3, #16]
	
	if( object->posx < 1)
20000698:	687b      	ldr	r3, [r7, #4]
2000069a:	68db      	ldr	r3, [r3, #12]
2000069c:	2b00      	cmp	r3, #0
2000069e:	dc04      	bgt.n	200006aa <move_object+0x3e>
		object->dirx = ~( object->dirx );
200006a0:	687b      	ldr	r3, [r7, #4]
200006a2:	685b      	ldr	r3, [r3, #4]
200006a4:	43da      	mvns	r2, r3
200006a6:	687b      	ldr	r3, [r7, #4]
200006a8:	605a      	str	r2, [r3, #4]
	if( object->posx > 128 || object->geo->sizeX > 128 )
200006aa:	687b      	ldr	r3, [r7, #4]
200006ac:	68db      	ldr	r3, [r3, #12]
200006ae:	2b80      	cmp	r3, #128	; 0x80
200006b0:	dc04      	bgt.n	200006bc <move_object+0x50>
200006b2:	687b      	ldr	r3, [r7, #4]
200006b4:	681b      	ldr	r3, [r3, #0]
200006b6:	685b      	ldr	r3, [r3, #4]
200006b8:	2b80      	cmp	r3, #128	; 0x80
200006ba:	dd04      	ble.n	200006c6 <move_object+0x5a>
		object->dirx = ~( object->dirx );
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	685b      	ldr	r3, [r3, #4]
200006c0:	43da      	mvns	r2, r3
200006c2:	687b      	ldr	r3, [r7, #4]
200006c4:	605a      	str	r2, [r3, #4]
	if( object->posy < 1)
200006c6:	687b      	ldr	r3, [r7, #4]
200006c8:	691b      	ldr	r3, [r3, #16]
200006ca:	2b00      	cmp	r3, #0
200006cc:	dc04      	bgt.n	200006d8 <move_object+0x6c>
		object->diry = ~( object->diry );
200006ce:	687b      	ldr	r3, [r7, #4]
200006d0:	689b      	ldr	r3, [r3, #8]
200006d2:	43da      	mvns	r2, r3
200006d4:	687b      	ldr	r3, [r7, #4]
200006d6:	609a      	str	r2, [r3, #8]
	if( object->posy > 64 || object->geo->sizeY > 64 )
200006d8:	687b      	ldr	r3, [r7, #4]
200006da:	691b      	ldr	r3, [r3, #16]
200006dc:	2b40      	cmp	r3, #64	; 0x40
200006de:	dc04      	bgt.n	200006ea <move_object+0x7e>
200006e0:	687b      	ldr	r3, [r7, #4]
200006e2:	681b      	ldr	r3, [r3, #0]
200006e4:	689b      	ldr	r3, [r3, #8]
200006e6:	2b40      	cmp	r3, #64	; 0x40
200006e8:	dd04      	ble.n	200006f4 <move_object+0x88>
		object->diry = ~( object->diry );
200006ea:	687b      	ldr	r3, [r7, #4]
200006ec:	689b      	ldr	r3, [r3, #8]
200006ee:	43da      	mvns	r2, r3
200006f0:	687b      	ldr	r3, [r7, #4]
200006f2:	609a      	str	r2, [r3, #8]
	draw_object(object);
200006f4:	687b      	ldr	r3, [r7, #4]
200006f6:	0018      	movs	r0, r3
200006f8:	f7ff ff56 	bl	200005a8 <draw_object>
}
200006fc:	46c0      	nop			; (mov r8, r8)
200006fe:	46bd      	mov	sp, r7
20000700:	b002      	add	sp, #8
20000702:	bd80      	pop	{r7, pc}

20000704 <graphic_initialize>:
	clear_object,
	move_object,
	set_object_speed
};

void graphic_initialize(void){
20000704:	b580      	push	{r7, lr}
20000706:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000708:	2040      	movs	r0, #64	; 0x40
2000070a:	f7ff fcd3 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_micro(10);
2000070e:	200a      	movs	r0, #10
20000710:	f7ff fca9 	bl	20000066 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E );
20000714:	2078      	movs	r0, #120	; 0x78
20000716:	f7ff fceb 	bl	200000f0 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000071a:	201e      	movs	r0, #30
2000071c:	f7ff fcb9 	bl	20000092 <delay_milli>
	
	graphic_ctrl_bit_set(B_RST);
20000720:	2020      	movs	r0, #32
20000722:	f7ff fcc7 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_milli(100);
20000726:	2064      	movs	r0, #100	; 0x64
20000728:	f7ff fcb3 	bl	20000092 <delay_milli>
	graphic_write_command(LCD_OFF,			B_CS1 | B_CS2);
2000072c:	2118      	movs	r1, #24
2000072e:	203e      	movs	r0, #62	; 0x3e
20000730:	f7ff fdfe 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_ON,			B_CS1 | B_CS2);
20000734:	2118      	movs	r1, #24
20000736:	203f      	movs	r0, #63	; 0x3f
20000738:	f7ff fdfa 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, 	B_CS1 | B_CS2);
2000073c:	2118      	movs	r1, #24
2000073e:	20c0      	movs	r0, #192	; 0xc0
20000740:	f7ff fdf6 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD,		B_CS1 | B_CS2);
20000744:	2118      	movs	r1, #24
20000746:	2040      	movs	r0, #64	; 0x40
20000748:	f7ff fdf2 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE,		B_CS1 | B_CS2);
2000074c:	2118      	movs	r1, #24
2000074e:	20b8      	movs	r0, #184	; 0xb8
20000750:	f7ff fdee 	bl	20000330 <graphic_write_command>
	select_controller(0);
20000754:	2000      	movs	r0, #0
20000756:	f7ff fce5 	bl	20000124 <select_controller>
}
2000075a:	46c0      	nop			; (mov r8, r8)
2000075c:	46bd      	mov	sp, r7
2000075e:	bd80      	pop	{r7, pc}

20000760 <init_app>:
void init_app(void){
20000760:	b580      	push	{r7, lr}
20000762:	af00      	add	r7, sp, #0
	*PORT_MODER 	=0x55555555;
20000764:	4b05      	ldr	r3, [pc, #20]	; (2000077c <init_app+0x1c>)
20000766:	4a06      	ldr	r2, [pc, #24]	; (20000780 <init_app+0x20>)
20000768:	601a      	str	r2, [r3, #0]
	*PORT_OTYPER 	=0x0000;
2000076a:	4b06      	ldr	r3, [pc, #24]	; (20000784 <init_app+0x24>)
2000076c:	2200      	movs	r2, #0
2000076e:	801a      	strh	r2, [r3, #0]
    *PORT_OSPEEDR   =0x55555555;
20000770:	4b05      	ldr	r3, [pc, #20]	; (20000788 <init_app+0x28>)
20000772:	4a03      	ldr	r2, [pc, #12]	; (20000780 <init_app+0x20>)
20000774:	601a      	str	r2, [r3, #0]
}
20000776:	46c0      	nop			; (mov r8, r8)
20000778:	46bd      	mov	sp, r7
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40021000 	andmi	r1, r2, r0
20000780:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000784:	40021008 	andmi	r1, r2, r8
20000788:	40021020 	andmi	r1, r2, r0, lsr #32

2000078c <main>:

int main(int argc, char **argv){
2000078c:	b580      	push	{r7, lr}
2000078e:	b084      	sub	sp, #16
20000790:	af00      	add	r7, sp, #0
20000792:	6078      	str	r0, [r7, #4]
20000794:	6039      	str	r1, [r7, #0]
	POBJECT p = &ball;
20000796:	4b09      	ldr	r3, [pc, #36]	; (200007bc <main+0x30>)
20000798:	60fb      	str	r3, [r7, #12]
	init_app();
2000079a:	f7ff ffe1 	bl	20000760 <init_app>
	graphic_initialize();
2000079e:	f7ff ffb1 	bl	20000704 <graphic_initialize>
	//graphic_clear_screen();
	p->set_speed( p, 15, 10 );
200007a2:	68fb      	ldr	r3, [r7, #12]
200007a4:	6a1b      	ldr	r3, [r3, #32]
200007a6:	68f8      	ldr	r0, [r7, #12]
200007a8:	220a      	movs	r2, #10
200007aa:	210f      	movs	r1, #15
200007ac:	4798      	blx	r3
	while(1){
		p->move( p );
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	69db      	ldr	r3, [r3, #28]
200007b2:	68fa      	ldr	r2, [r7, #12]
200007b4:	0010      	movs	r0, r2
200007b6:	4798      	blx	r3
200007b8:	e7f9      	b.n	200007ae <main+0x22>
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	200007f4 	strdcs	r0, [r0], -r4

200007c0 <ball_geometry>:
200007c0:	0000000c 	andeq	r0, r0, ip
200007c4:	00000004 	andeq	r0, r0, r4
200007c8:	00000004 	andeq	r0, r0, r4
200007cc:	02000100 	andeq	r0, r0, #0, 2
200007d0:	01010001 	tsteq	r1, r1
200007d4:	03010201 	movweq	r0, #4609	; 0x1201
200007d8:	01020002 	tsteq	r2, r2
200007dc:	03020202 	movweq	r0, #8706	; 0x2202
200007e0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200007f4 <ball>:
200007f4:	200007c0 	andcs	r0, r0, r0, asr #15
	...
20000800:	00000001 	andeq	r0, r0, r1
20000804:	00000001 	andeq	r0, r0, r1
20000808:	200005a9 	andcs	r0, r0, r9, lsr #11
2000080c:	2000060b 	andcs	r0, r0, fp, lsl #12
20000810:	2000066d 	andcs	r0, r0, sp, ror #12
20000814:	20000589 	andcs	r0, r0, r9, lsl #11
20000818:	20000458 	andcs	r0, r0, r8, asr r4
2000081c:	20000462 	andcs	r0, r0, r2, ror #8
20000820:	2000046c 	andcs	r0, r0, ip, ror #8
20000824:	20000476 	andcs	r0, r0, r6, ror r4
20000828:	20000480 	andcs	r0, r0, r0, lsl #9
2000082c:	2000048a 	andcs	r0, r0, sl, lsl #9
20000830:	20000494 	mulcs	r0, r4, r4
20000834:	2000049e 	mulcs	r0, lr, r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000005c5 	andeq	r0, r0, r5, asr #11
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000001dc 	ldrdeq	r0, [r0], -ip
  10:	0002af0c 	andeq	sl, r2, ip, lsl #30
	...
  24:	01530200 	cmpeq	r3, r0, lsl #4
  28:	46010000 	strmi	r0, [r1], -r0
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	99080103 	stmdbls	r8, {r0, r1, r8}
  34:	04000000 	streq	r0, [r0], #-0
  38:	0000008c 	andeq	r0, r0, ip, lsl #1
  3c:	58470102 	stmdapl	r7, {r1, r8}^
  40:	05000000 	streq	r0, [r0, #-0]
  44:	48010078 	stmdami	r1, {r3, r4, r5, r6}
  48:	00000030 	andeq	r0, r0, r0, lsr r0
  4c:	00790500 	rsbseq	r0, r9, r0, lsl #10
  50:	00304901 	eorseq	r4, r0, r1, lsl #18
  54:	00010000 	andeq	r0, r1, r0
  58:	00009302 	andeq	r9, r0, r2, lsl #6
  5c:	374a0100 	strbcc	r0, [sl, -r0, lsl #2]
  60:	04000000 	streq	r0, [r0], #-0
  64:	00000149 	andeq	r0, r0, r9, asr #2
  68:	9f4c0134 	svcls	0x004c0134
  6c:	06000000 	streq	r0, [r0], -r0
  70:	00000254 	andeq	r0, r0, r4, asr r2
  74:	009f4d01 	addseq	r4, pc, r1, lsl #26
  78:	06000000 	streq	r0, [r0], -r0
  7c:	000000d7 	ldrdeq	r0, [r0], -r7
  80:	009f4e01 	addseq	r4, pc, r1, lsl #28
  84:	06040000 	streq	r0, [r4], -r0
  88:	000000dd 	ldrdeq	r0, [r0], -sp
  8c:	009f4f01 	addseq	r4, pc, r1, lsl #30
  90:	05080000 	streq	r0, [r8, #-0]
  94:	01007870 	tsteq	r0, r0, ror r8
  98:	0000a650 	andeq	sl, r0, r0, asr r6
  9c:	07000c00 	streq	r0, [r0, -r0, lsl #24]
  a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  a4:	58080074 	stmdapl	r8, {r2, r4, r5, r6}
  a8:	b6000000 	strlt	r0, [r0], -r0
  ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  b0:	000000b6 	strheq	r0, [r0], -r6
  b4:	04030013 	streq	r0, [r3], #-19	; 0xffffffed
  b8:	00013c07 	andeq	r3, r1, r7, lsl #24
  bc:	028d0200 	addeq	r0, sp, #0, 4
  c0:	51010000 	mrspl	r0, (UNDEF: 1)
  c4:	00000063 	andeq	r0, r0, r3, rrx
  c8:	00028c02 	andeq	r8, r2, r2, lsl #24
  cc:	d3510100 	cmple	r1, #0, 2
  d0:	0a000000 	beq	d8 <startup-0x1fffff28>
  d4:	00006304 	andeq	r6, r0, r4, lsl #6
  d8:	00bb0b00 	adcseq	r0, fp, r0, lsl #22
  dc:	52010000 	andpl	r0, r1, #0
  e0:	000000bd 	strheq	r0, [r0], -sp
  e4:	07c00305 	strbeq	r0, [r0, r5, lsl #6]
  e8:	5b042000 	blpl	1080f0 <startup-0x1fef7f10>
  ec:	24000000 	strcs	r0, [r0], #-0
  f0:	01635701 	cmneq	r3, r1, lsl #14
  f4:	67050000 	strvs	r0, [r5, -r0]
  f8:	01006f65 	tsteq	r0, r5, ror #30
  fc:	0000c858 	andeq	ip, r0, r8, asr r8
 100:	6a060000 	bvs	180108 <startup-0x1fe7fef8>
 104:	01000000 	mrseq	r0, (UNDEF: 0)
 108:	00009f59 	andeq	r9, r0, r9, asr pc
 10c:	6f060400 	svcvs	0x00060400
 110:	01000000 	mrseq	r0, (UNDEF: 0)
 114:	00009f59 	andeq	r9, r0, r9, asr pc
 118:	b1060800 	tstlt	r6, r0, lsl #16
 11c:	01000000 	mrseq	r0, (UNDEF: 0)
 120:	00009f5a 	andeq	r9, r0, sl, asr pc
 124:	b6060c00 	strlt	r0, [r6], -r0, lsl #24
 128:	01000000 	mrseq	r0, (UNDEF: 0)
 12c:	00009f5a 	andeq	r9, r0, sl, asr pc
 130:	83061000 	movwhi	r1, #24576	; 0x6000
 134:	01000001 	tsteq	r0, r1
 138:	0001745b 	andeq	r7, r1, fp, asr r4
 13c:	18061400 	stmdane	r6, {sl, ip}
 140:	01000001 	tsteq	r0, r1
 144:	0001745c 	andeq	r7, r1, ip, asr r4
 148:	60061800 	andvs	r1, r6, r0, lsl #16
 14c:	01000000 	mrseq	r0, (UNDEF: 0)
 150:	0001745d 	andeq	r7, r1, sp, asr r4
 154:	a7061c00 	strge	r1, [r6, -r0, lsl #24]
 158:	01000000 	mrseq	r0, (UNDEF: 0)
 15c:	00018f5e 	andeq	r8, r1, lr, asr pc
 160:	0c002000 	stceq	0, cr2, [r0], {-0}
 164:	0000016e 	andeq	r0, r0, lr, ror #2
 168:	00016e0d 	andeq	r6, r1, sp, lsl #28
 16c:	040a0000 	streq	r0, [sl], #-0
 170:	000000ea 	andeq	r0, r0, sl, ror #1
 174:	0163040a 	cmneq	r3, sl, lsl #8
 178:	8f0c0000 	svchi	0x000c0000
 17c:	0d000001 	stceq	0, cr0, [r0, #-4]
 180:	0000016e 	andeq	r0, r0, lr, ror #2
 184:	00009f0d 	andeq	r9, r0, sp, lsl #30
 188:	009f0d00 	addseq	r0, pc, r0, lsl #26
 18c:	0a000000 	beq	194 <startup-0x1ffffe6c>
 190:	00017a04 	andeq	r7, r1, r4, lsl #20
 194:	03110200 	tsteq	r1, #0, 4
 198:	5f010000 	svcpl	0x00010000
 19c:	000000ea 	andeq	r0, r0, sl, ror #1
 1a0:	00031002 	andeq	r1, r3, r2
 1a4:	6e5f0100 	rdfvse	f0, f7, f0
 1a8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 1ac:	0000017e 	andeq	r0, r0, lr, ror r1
 1b0:	95011f01 	strls	r1, [r1, #-3841]	; 0xfffff0ff
 1b4:	05000001 	streq	r0, [r0, #-1]
 1b8:	0007f403 	andeq	pc, r7, r3, lsl #8
 1bc:	00e30f20 	rsceq	r0, r3, r0, lsr #30
 1c0:	3f010000 	svccc	0x00010000
 1c4:	00009f01 	andeq	r9, r0, r1, lsl #30
 1c8:	00078c00 	andeq	r8, r7, r0, lsl #24
 1cc:	00003420 	andeq	r3, r0, r0, lsr #8
 1d0:	039c0100 	orrseq	r0, ip, #0, 2
 1d4:	10000002 	andne	r0, r0, r2
 1d8:	00000179 	andeq	r0, r0, r9, ror r1
 1dc:	9f013f01 	svcls	0x00013f01
 1e0:	02000000 	andeq	r0, r0, #0
 1e4:	65106c91 	ldrvs	r6, [r0, #-3217]	; 0xfffff36f
 1e8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ec:	0203013f 	andeq	r0, r3, #-1073741809	; 0xc000000f
 1f0:	91020000 	mrsls	r0, (UNDEF: 2)
 1f4:	00701168 	rsbseq	r1, r0, r8, ror #2
 1f8:	a0014001 	andge	r4, r1, r1
 1fc:	02000001 	andeq	r0, r0, #1
 200:	0a007491 	beq	1d44c <startup-0x1ffe2bb4>
 204:	00020904 	andeq	r0, r2, r4, lsl #18
 208:	0f040a00 	svceq	0x00040a00
 20c:	03000002 	movweq	r0, #2
 210:	00a20801 	adceq	r0, r2, r1, lsl #16
 214:	33120000 	tstcc	r2, #0
 218:	01000001 	tsteq	r0, r1
 21c:	07600139 			; <UNDEFINED> instruction: 0x07600139
 220:	002c2000 	eoreq	r2, ip, r0
 224:	9c010000 	stcls	0, cr0, [r1], {-0}
 228:	0000f413 	andeq	pc, r0, r3, lsl r4	; <UNPREDICTABLE>
 22c:	01290100 			; <UNDEFINED> instruction: 0x01290100
 230:	20000704 	andcs	r0, r0, r4, lsl #14
 234:	0000005c 	andeq	r0, r0, ip, asr r0
 238:	f6149c01 			; <UNDEFINED> instruction: 0xf6149c01
 23c:	01000002 	tsteq	r0, r2
 240:	066c0110 			; <UNDEFINED> instruction: 0x066c0110
 244:	00982000 	addseq	r2, r8, r0
 248:	9c010000 	stcls	0, cr0, [r1], {-0}
 24c:	00000260 	andeq	r0, r0, r0, ror #4
 250:	0002fb10 	andeq	pc, r2, r0, lsl fp	; <UNPREDICTABLE>
 254:	01100100 	tsteq	r0, r0, lsl #2
 258:	000001a0 	andeq	r0, r0, r0, lsr #3
 25c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 260:	00027314 	andeq	r7, r2, r4, lsl r3
 264:	010b0100 	mrseq	r0, (UNDEF: 27)
 268:	2000060a 	andcs	r0, r0, sl, lsl #12
 26c:	00000062 	andeq	r0, r0, r2, rrx
 270:	029d9c01 	addseq	r9, sp, #256	; 0x100
 274:	fb100000 	blx	40027e <startup-0x1fbffd82>
 278:	01000002 	tsteq	r0, r2
 27c:	01a0010b 	lsleq	r0, fp, #2
 280:	91020000 	mrsls	r0, (UNDEF: 2)
 284:	0612156c 	ldreq	r1, [r2], -ip, ror #10
 288:	00522000 	subseq	r2, r2, r0
 28c:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
 290:	010c0100 	mrseq	r0, (UNDEF: 28)
 294:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 298:	00749102 	rsbseq	r9, r4, r2, lsl #2
 29c:	02961400 	addseq	r1, r6, #0, 8
 2a0:	06010000 	streq	r0, [r1], -r0
 2a4:	0005a801 	andeq	sl, r5, r1, lsl #16
 2a8:	00006220 	andeq	r6, r0, r0, lsr #4
 2ac:	da9c0100 	ble	fe7006b4 <ball+0xde6ffec0>
 2b0:	10000002 	andne	r0, r0, r2
 2b4:	000002fb 	strdeq	r0, [r0], -fp
 2b8:	a0010601 	andge	r0, r1, r1, lsl #12
 2bc:	02000001 	andeq	r0, r0, #1
 2c0:	b0156c91 	mulslt	r5, r1, ip
 2c4:	52200005 	eorpl	r0, r0, #5
 2c8:	11000000 	mrsne	r0, (UNDEF: 0)
 2cc:	07010069 	streq	r0, [r1, -r9, rrx]
 2d0:	00009f01 	andeq	r9, r0, r1, lsl #30
 2d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2d8:	b8160000 	ldmdalt	r6, {}	; <UNPREDICTABLE>
 2dc:	01000001 	tsteq	r0, r1
 2e0:	05880102 	streq	r0, [r8, #258]	; 0x102
 2e4:	00202000 	eoreq	r2, r0, r0
 2e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 2ec:	0000031e 	andeq	r0, r0, lr, lsl r3
 2f0:	0002fb10 	andeq	pc, r2, r0, lsl fp	; <UNPREDICTABLE>
 2f4:	01020100 	mrseq	r0, (UNDEF: 18)
 2f8:	000001a0 	andeq	r0, r0, r0, lsr #3
 2fc:	10749102 	rsbsne	r9, r4, r2, lsl #2
 300:	00000302 	andeq	r0, r0, r2, lsl #6
 304:	9f010201 	svcls	0x00010201
 308:	02000000 	andeq	r0, r0, #0
 30c:	09107091 	ldmdbeq	r0, {r0, r4, r7, ip, sp, lr}
 310:	01000003 	tsteq	r0, r3
 314:	009f0102 	addseq	r0, pc, r2, lsl #2
 318:	91020000 	mrsls	r0, (UNDEF: 2)
 31c:	8617006c 	ldrhi	r0, [r7], -ip, rrx
 320:	01000000 	mrseq	r0, (UNDEF: 0)
 324:	00040edd 	ldrdeq	r0, [r4], -sp
 328:	00017a20 	andeq	r7, r1, r0, lsr #20
 32c:	909c0100 	addsls	r0, ip, r0, lsl #2
 330:	18000003 	stmdane	r0, {r0, r1}
 334:	dd010078 	stcle	0, cr0, [r1, #-480]	; 0xfffffe20
 338:	000000b6 	strheq	r0, [r0], -r6
 33c:	185c9102 	ldmdane	ip, {r1, r8, ip, pc}^
 340:	dd010079 	stcle	0, cr0, [r1, #-484]	; 0xfffffe1c
 344:	000000b6 	strheq	r0, [r0], -r6
 348:	18589102 	ldmdane	r8, {r1, r8, ip, pc}^
 34c:	00746573 	rsbseq	r6, r4, r3, ror r5
 350:	00b6dd01 	adcseq	sp, r6, r1, lsl #26
 354:	91020000 	mrsls	r0, (UNDEF: 2)
 358:	01881954 	orreq	r1, r8, r4, asr r9
 35c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
 360:	00000025 	andeq	r0, r0, r5, lsr #32
 364:	1a6f9102 	bne	1be4774 <startup-0x1e41b88c>
 368:	de010063 	cdple	0, 0, cr0, cr1, cr3, {3}
 36c:	00000025 	andeq	r0, r0, r5, lsr #32
 370:	19679102 	stmdbne	r7!, {r1, r8, ip, pc}^
 374:	00000162 	andeq	r0, r0, r2, ror #2
 378:	0025de01 	eoreq	sp, r5, r1, lsl #28
 37c:	91020000 	mrsls	r0, (UNDEF: 2)
 380:	018d196e 	orreq	r1, sp, lr, ror #18
 384:	df010000 	svcle	0x00010000
 388:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 38c:	00689102 	rsbeq	r9, r8, r2, lsl #2
 390:	00025e17 	andeq	r5, r2, r7, lsl lr
 394:	b6d40100 	ldrblt	r0, [r4], r0, lsl #2
 398:	58200003 	stmdapl	r0!, {r0, r1}
 39c:	01000000 	mrseq	r0, (UNDEF: 0)
 3a0:	0003d29c 	muleq	r3, ip, r2
 3a4:	03bc1500 			; <UNDEFINED> instruction: 0x03bc1500
 3a8:	004a2000 	subeq	r2, sl, r0
 3ac:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
 3b0:	9fd50100 	svcls	0x00d50100
 3b4:	02000000 	andeq	r0, r0, #0
 3b8:	e0157491 	muls	r5, r1, r4
 3bc:	1a200003 	bne	8003d0 <startup-0x1f7ffc30>
 3c0:	1a000000 	bne	3c8 <startup-0x1ffffc38>
 3c4:	d801006b 	stmdale	r1, {r0, r1, r3, r5, r6}
 3c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 3cc:	00709102 	rsbseq	r9, r0, r2, lsl #2
 3d0:	a5170000 	ldrge	r0, [r7, #-0]
 3d4:	01000001 	tsteq	r0, r1
 3d8:	000370cd 	andeq	r7, r3, sp, asr #1
 3dc:	00004620 	andeq	r4, r0, r0, lsr #12
 3e0:	049c0100 	ldreq	r0, [ip], #256	; 0x100
 3e4:	1b000004 	blne	3fc <startup-0x1ffffc04>
 3e8:	00000081 	andeq	r0, r0, r1, lsl #1
 3ec:	0025cd01 	eoreq	ip, r5, r1, lsl #26
 3f0:	91020000 	mrsls	r0, (UNDEF: 2)
 3f4:	01621b77 	smceq	8631	; 0x21b7
 3f8:	cd010000 	stcgt	0, cr0, [r1, #-0]
 3fc:	00000025 	andeq	r0, r0, r5, lsr #32
 400:	00769102 	rsbseq	r9, r6, r2, lsl #2
 404:	00004517 	andeq	r4, r0, r7, lsl r5
 408:	30c70100 	sbccc	r0, r7, r0, lsl #2
 40c:	40200003 	eormi	r0, r0, r3
 410:	01000000 	mrseq	r0, (UNDEF: 0)
 414:	0004369c 	muleq	r4, ip, r6
 418:	00531b00 	subseq	r1, r3, r0, lsl #22
 41c:	c7010000 	strgt	r0, [r1, -r0]
 420:	00000025 	andeq	r0, r0, r5, lsr #32
 424:	1b779102 	blne	1de4834 <startup-0x1e21b7cc>
 428:	00000162 	andeq	r0, r0, r2, ror #2
 42c:	0025c701 	eoreq	ip, r5, r1, lsl #14
 430:	91020000 	mrsls	r0, (UNDEF: 2)
 434:	c9170076 	ldmdbgt	r7, {r1, r2, r4, r5, r6}
 438:	01000000 	mrseq	r0, (UNDEF: 0)
 43c:	0002b2b3 			; <UNDEFINED> instruction: 0x0002b2b3
 440:	00007e20 	andeq	r7, r0, r0, lsr #28
 444:	689c0100 	ldmvs	ip, {r8}
 448:	1b000004 	blne	460 <startup-0x1ffffba0>
 44c:	00000193 	muleq	r0, r3, r1
 450:	0025b301 	eoreq	fp, r5, r1, lsl #6
 454:	91020000 	mrsls	r0, (UNDEF: 2)
 458:	01621b77 	smceq	8631	; 0x21b7
 45c:	b3010000 	movwlt	r0, #4096	; 0x1000
 460:	00000025 	andeq	r0, r0, r5, lsr #32
 464:	00769102 	rsbseq	r9, r6, r2, lsl #2
 468:	0000741c 	andeq	r7, r0, ip, lsl r4
 46c:	25ae0100 	strcs	r0, [lr, #256]!	; 0x100
 470:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
 474:	2a200002 	bcs	800484 <startup-0x1f7ffb7c>
 478:	01000000 	mrseq	r0, (UNDEF: 0)
 47c:	0004909c 	muleq	r4, ip, r0
 480:	01621b00 	cmneq	r2, r0, lsl #22
 484:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
 488:	00000030 	andeq	r0, r0, r0, lsr r0
 48c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 490:	0002a21c 	andeq	sl, r2, ip, lsl r2
 494:	25930100 	ldrcs	r0, [r3, #256]	; 0x100
 498:	f4000000 	vst4.8	{d0-d3}, [r0], r0
 49c:	94200001 	strtls	r0, [r0], #-1
 4a0:	01000000 	mrseq	r0, (UNDEF: 0)
 4a4:	0004c59c 	muleq	r4, ip, r5
 4a8:	01621b00 	cmneq	r2, r0, lsl #22
 4ac:	93010000 	movwls	r0, #4096	; 0x1000
 4b0:	00000025 	andeq	r0, r0, r5, lsr #32
 4b4:	1a6f9102 	bne	1be48c4 <startup-0x1e41b73c>
 4b8:	01005652 	tsteq	r0, r2, asr r6
 4bc:	00002594 	muleq	r0, r4, r5
 4c0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4c4:	01c91700 	biceq	r1, r9, r0, lsl #14
 4c8:	7f010000 	svcvc	0x00010000
 4cc:	2000017e 	andcs	r0, r0, lr, ror r1
 4d0:	00000076 	andeq	r0, r0, r6, ror r0
 4d4:	04e79c01 	strbteq	r9, [r7], #3073	; 0xc01
 4d8:	631a0000 	tstvs	sl, #0
 4dc:	25800100 	strcs	r0, [r0, #256]	; 0x100
 4e0:	02000000 	andeq	r0, r0, #0
 4e4:	17007791 			; <UNDEFINED> instruction: 0x17007791
 4e8:	0000015b 	andeq	r0, r0, fp, asr r1
 4ec:	01246b01 			; <UNDEFINED> instruction: 0x01246b01
 4f0:	005a2000 	subseq	r2, sl, r0
 4f4:	9c010000 	stcls	0, cr0, [r1], {-0}
 4f8:	0000050b 	andeq	r0, r0, fp, lsl #10
 4fc:	0001621b 	andeq	r6, r1, fp, lsl r2
 500:	256b0100 	strbcs	r0, [fp, #-256]!	; 0xffffff00
 504:	02000000 	andeq	r0, r0, #0
 508:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
 50c:	00000107 	andeq	r0, r0, r7, lsl #2
 510:	00f06701 	rscseq	r6, r0, r1, lsl #14
 514:	00342000 	eorseq	r2, r4, r0
 518:	9c010000 	stcls	0, cr0, [r1], {-0}
 51c:	0000052d 	andeq	r0, r0, sp, lsr #10
 520:	01007818 	tsteq	r0, r8, lsl r8
 524:	00002567 	andeq	r2, r0, r7, ror #10
 528:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 52c:	011e1d00 	tsteq	lr, r0, lsl #26
 530:	62010000 	andvs	r0, r1, #0
 534:	200000b4 	strhcs	r0, [r0], -r4
 538:	0000003c 	andeq	r0, r0, ip, lsr r0
 53c:	054f9c01 	strbeq	r9, [pc, #-3073]	; fffff943 <ball+0xdffff14f>
 540:	78180000 	ldmdavc	r8, {}	; <UNPREDICTABLE>
 544:	25620100 	strbcs	r0, [r2, #-256]!	; 0xffffff00
 548:	02000000 	andeq	r0, r0, #0
 54c:	17007791 			; <UNDEFINED> instruction: 0x17007791
 550:	00000199 	muleq	r0, r9, r1
 554:	00924001 	addseq	r4, r2, r1
 558:	00222000 	eoreq	r2, r2, r0
 55c:	9c010000 	stcls	0, cr0, [r1], {-0}
 560:	00000572 	andeq	r0, r0, r2, ror r5
 564:	00736d18 	rsbseq	r6, r3, r8, lsl sp
 568:	00b64001 	adcseq	r4, r6, r1
 56c:	91020000 	mrsls	r0, (UNDEF: 2)
 570:	e8170074 	ldmda	r7, {r2, r4, r5, r6}
 574:	01000000 	mrseq	r0, (UNDEF: 0)
 578:	00006638 	andeq	r6, r0, r8, lsr r6
 57c:	00002c20 	andeq	r2, r0, r0, lsr #24
 580:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
 584:	18000005 	stmdane	r0, {r0, r2}
 588:	01007375 	tsteq	r0, r5, ror r3
 58c:	0000b638 	andeq	fp, r0, r8, lsr r6
 590:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 594:	02801e00 	addeq	r1, r0, #0, 28
 598:	34010000 	strcc	r0, [r1], #-0
 59c:	20000054 	andcs	r0, r0, r4, asr r0
 5a0:	00000012 	andeq	r0, r0, r2, lsl r0
 5a4:	6d1f9c01 	ldcvs	12, cr9, [pc, #-4]	; 5a8 <startup-0x1ffffa58>
 5a8:	01000001 	tsteq	r0, r1
 5ac:	0000102c 	andeq	r1, r0, ip, lsr #32
 5b0:	00004420 	andeq	r4, r0, r0, lsr #8
 5b4:	1f9c0100 	svcne	0x009c0100
 5b8:	0000003d 	andeq	r0, r0, sp, lsr r0
 5bc:	00002401 	andeq	r2, r0, r1, lsl #8
 5c0:	000c2000 	andeq	r2, ip, r0
 5c4:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  30:	0b3a0b0b 	bleq	e82c64 <startup-0x1f17d39c>
  34:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  38:	0d050000 	stceq	0, cr0, [r5, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	000b3813 	andeq	r3, fp, r3, lsl r8
  48:	000d0600 	andeq	r0, sp, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  54:	00000b38 	andeq	r0, r0, r8, lsr fp
  58:	0b002407 	bleq	907c <startup-0x1fff6f84>
  5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  60:	08000008 	stmdaeq	r0, {r3}
  64:	13490101 	movtne	r0, #37121	; 0x9101
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  70:	000b2f13 	andeq	r2, fp, r3, lsl pc
  74:	000f0a00 	andeq	r0, pc, r0, lsl #20
  78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  7c:	340b0000 	strcc	r0, [fp], #-0
  80:	3a0e0300 	bcc	380c88 <startup-0x1fc7f378>
  84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  88:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  8c:	0c000018 	stceq	0, cr0, [r0], {24}
  90:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  94:	00001301 	andeq	r1, r0, r1, lsl #6
  98:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  ac:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
  bc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  c0:	96184006 	ldrls	r4, [r8], -r6
  c4:	13011942 	movwne	r1, #6466	; 0x1942
  c8:	05100000 	ldreq	r0, [r0, #-0]
  cc:	3a0e0300 	bcc	380cd4 <startup-0x1fc7f32c>
  d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  d4:	00180213 	andseq	r0, r8, r3, lsl r2
  d8:	00341100 	eorseq	r1, r4, r0, lsl #2
  dc:	0b3a0803 	bleq	e820f0 <startup-0x1f17df10>
  e0:	1349053b 	movtne	r0, #38203	; 0x953b
  e4:	00001802 	andeq	r1, r0, r2, lsl #16
  e8:	3f002e12 	svccc	0x00002e12
  ec:	3a0e0319 	bcc	380d58 <startup-0x1fc7f2a8>
  f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  f8:	97184006 	ldrls	r4, [r8, -r6]
  fc:	00001942 	andeq	r1, r0, r2, asr #18
 100:	3f002e13 	svccc	0x00002e13
 104:	3a0e0319 	bcc	380d70 <startup-0x1fc7f290>
 108:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 10c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 110:	96184006 	ldrls	r4, [r8], -r6
 114:	00001942 	andeq	r1, r0, r2, asr #18
 118:	3f012e14 	svccc	0x00012e14
 11c:	3a0e0319 	bcc	380d88 <startup-0x1fc7f278>
 120:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 124:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 128:	96184006 	ldrls	r4, [r8], -r6
 12c:	13011942 	movwne	r1, #6466	; 0x1942
 130:	0b150000 	bleq	540138 <startup-0x1fabfec8>
 134:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 138:	16000006 	strne	r0, [r0], -r6
 13c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 140:	0b3a0e03 	bleq	e83954 <startup-0x1f17c6ac>
 144:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 148:	06120111 			; <UNDEFINED> instruction: 0x06120111
 14c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 150:	00130119 	andseq	r0, r3, r9, lsl r1
 154:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 158:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 15c:	0b3b0b3a 	bleq	ec2e4c <startup-0x1f13d1b4>
 160:	01111927 	tsteq	r1, r7, lsr #18
 164:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 168:	01194296 			; <UNDEFINED> instruction: 0x01194296
 16c:	18000013 	stmdane	r0, {r0, r1, r4}
 170:	08030005 	stmdaeq	r3, {r0, r2}
 174:	0b3b0b3a 	bleq	ec2e64 <startup-0x1f13d19c>
 178:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 17c:	34190000 	ldrcc	r0, [r9], #-0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	00180213 	andseq	r0, r8, r3, lsl r2
 18c:	00341a00 	eorseq	r1, r4, r0, lsl #20
 190:	0b3a0803 	bleq	e821a4 <startup-0x1f17de5c>
 194:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 198:	00001802 	andeq	r1, r0, r2, lsl #16
 19c:	0300051b 	movweq	r0, #1307	; 0x51b
 1a0:	3b0b3a0e 	blcc	2ce9e0 <startup-0x1fd31620>
 1a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1a8:	1c000018 	stcne	0, cr0, [r0], {24}
 1ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1b0:	0b3a0e03 	bleq	e839c4 <startup-0x1f17c63c>
 1b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1b8:	01111349 	tsteq	r1, r9, asr #6
 1bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1c0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1c4:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 1c8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1cc:	0b3a0e03 	bleq	e839e0 <startup-0x1f17c620>
 1d0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1dc:	00130119 	andseq	r0, r3, r9, lsl r1
 1e0:	002e1e00 	eoreq	r1, lr, r0, lsl #28
 1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	01111927 	tsteq	r1, r7, lsr #18
 1f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f4:	00194296 	mulseq	r9, r6, r2
 1f8:	002e1f00 	eoreq	r1, lr, r0, lsl #30
 1fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
 204:	01111927 	tsteq	r1, r7, lsr #18
 208:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 20c:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200007c0 	andcs	r0, r0, r0, asr #15
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001c7 	andeq	r0, r0, r7, asr #3
   4:	005d0002 	subseq	r0, sp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	6d6f742f 	cfstrdvs	mvd7, [pc, #-188]!	; ffffff6c <ball+0xdffff778>
  24:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  28:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  2c:	572f7374 			; <UNDEFINED> instruction: 0x572f7374
  30:	2f4b524f 	svccs	0x004b524f
  34:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
  38:	4f656e69 	svcmi	0x00656e69
  3c:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
  40:	50646574 	rsbpl	r6, r4, r4, ror r5
  44:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  48:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
  4c:	612f676e 			; <UNDEFINED> instruction: 0x612f676e
  50:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
  54:	00676e6f 	rsbeq	r6, r7, pc, ror #28
  58:	61747300 	cmnvs	r4, r0, lsl #6
  5c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  60:	0100632e 	tsteq	r0, lr, lsr #6
  64:	00000000 	andeq	r0, r0, r0
  68:	00000205 	andeq	r0, r0, r5, lsl #4
  6c:	23032000 	movwcs	r2, #12288	; 0x3000
  70:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  74:	01010003 	tsteq	r1, r3
  78:	10020500 	andne	r0, r2, r0, lsl #10
  7c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  80:	3d2f012b 	stfccs	f0, [pc, #-172]!	; ffffffdc <ball+0xdffff7e8>
  84:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
  88:	06010402 	streq	r0, [r1], -r2, lsl #8
  8c:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
  90:	2f2f2f9f 	svccs	0x002f2f9f
  94:	2f214b3d 	svccs	0x00214b3d
  98:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
  9c:	3b214b4b 	blcc	852dd0 <startup-0x1f7ad230>
  a0:	4a1d035c 	bmi	740e18 <startup-0x1f8bf1e8>
  a4:	75849167 	strvc	r9, [r4, #359]	; 0x167
  a8:	6767d867 	strbvs	sp, [r7, -r7, ror #16]!
  ac:	03741203 	cmneq	r4, #805306368	; 0x30000000
  b0:	1203206e 	andne	r2, r3, #110	; 0x6e
  b4:	2070034a 	rsbscs	r0, r0, sl, asr #6
  b8:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
  bc:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
  c0:	3e4b243d 	mcrcc	4, 2, r2, cr11, cr13, {1}
  c4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  c8:	752f3d30 	strvc	r3, [pc, #-3376]!	; fffff3a0 <ball+0xdfffebac>
  cc:	26452f3d 			; <UNDEFINED> instruction: 0x26452f3d
  d0:	c93d3d23 	ldmdbgt	sp!, {r0, r1, r5, r8, sl, fp, ip, sp}
  d4:	3e3e3d68 	cdpcc	13, 3, cr3, cr14, cr8, {3}
  d8:	303d3059 	eorscc	r3, sp, r9, asr r0
  dc:	593d3e59 	ldmdbpl	sp!, {r0, r3, r4, r6, r9, sl, fp, ip, sp}
  e0:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
  e4:	67c93d30 			; <UNDEFINED> instruction: 0x67c93d30
  e8:	914b6859 	cmpls	fp, r9, asr r8
  ec:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
  f0:	3d593e2f 	ldclcc	14, cr3, [r9, #-188]	; 0xffffff44
  f4:	303d5930 	eorscc	r5, sp, r0, lsr r9
  f8:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
  fc:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 100:	3d914b83 	vldrcc	d4, [r1, #524]	; 0x20c
 104:	833d3d59 	teqhi	sp, #5696	; 0x1640
 108:	ad3d3d4b 	ldcge	13, cr3, [sp, #-300]!	; 0xfffffed4
 10c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 110:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 114:	00490304 	subeq	r0, r9, r4, lsl #6
 118:	06010402 	streq	r0, [r1], -r2, lsl #8
 11c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 120:	00390602 	eorseq	r0, r9, r2, lsl #12
 124:	06010402 	streq	r0, [r1], -r2, lsl #8
 128:	4b43063c 	blmi	10c1a20 <startup-0x1ef3e5e0>
 12c:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
 130:	004a0601 	subeq	r0, sl, r1, lsl #12
 134:	4a020402 	bmi	81144 <startup-0x1ff7eebc>
 138:	03040200 	movweq	r0, #16896	; 0x4200
 13c:	4b4c064a 	blmi	1301a6c <startup-0x1ecfe594>
 140:	595959ad 	ldmdbpl	r9, {r0, r2, r3, r5, r7, r8, fp, ip, lr}^
 144:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 148:	3d673d5a 	stclcc	13, cr3, [r7, #-360]!	; 0xfffffe98
 14c:	3e4b4c4b 	cdpcc	12, 4, cr4, cr11, cr11, {2}
 150:	ad91c9bb 	vldrge.16	s24, [r1, #374]	; 0x176	; <UNPREDICTABLE>
 154:	0392a03d 	orrseq	sl, r2, #61	; 0x3d
 158:	1f03ac62 	svcne	0x0003ac62
 15c:	3d676720 	stclcc	7, cr6, [r7, #-128]!	; 0xffffff80
 160:	004b4b3d 	subeq	r4, fp, sp, lsr fp
 164:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 168:	03040200 	movweq	r0, #16896	; 0x4200
 16c:	0200b908 	andeq	fp, r0, #8, 18	; 0x20000
 170:	3c060104 	stfccs	f0, [r6], {4}
 174:	4b4b6906 	blmi	12da594 <startup-0x1ed25a6c>
 178:	03040200 	movweq	r0, #16896	; 0x4200
 17c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 180:	00b90803 	adcseq	r0, r9, r3, lsl #16
 184:	06010402 	streq	r0, [r1], -r2, lsl #8
 188:	4b69063c 	blmi	1a41a80 <startup-0x1e5be580>
 18c:	76754b4b 	ldrbtvc	r4, [r5], -fp, asr #22
 190:	0200594b 	andeq	r5, r0, #1228800	; 0x12c000
 194:	4a060104 	bmi	1805ac <startup-0x1fe7fa54>
 198:	4b595906 	blmi	16565b8 <startup-0x1e9a9a48>
 19c:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 1a0:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 1a4:	034b5959 	movteq	r5, #47449	; 0xb959
 1a8:	3d2f4a0b 	vstmdbcc	pc!, {s8-s18}
 1ac:	3d3e3d3e 	ldccc	13, cr3, [lr, #-248]!	; 0xffffff08
 1b0:	4b4b4b3d 	blmi	12d2eac <startup-0x1ed2d154>
 1b4:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 1b8:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 1bc:	2f2f59ae 	svccs	0x002f59ae
 1c0:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 1c4:	09026801 	stmdbeq	r2, {r0, fp, sp, lr}
 1c8:	Address 0x00000000000001c8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff4c <ball+0xdffff758>
   4:	6f742f65 	svcvs	0x00742f65
   8:	6f442f6d 	svcvs	0x00442f6d
   c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  10:	2f73746e 	svccs	0x0073746e
  14:	4b524f57 	blmi	1493d78 <startup-0x1eb6c288>
  18:	63614d2f 	cmnvs	r1, #3008	; 0xbc0
  1c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
  20:	6569724f 	strbvs	r7, [r9, #-591]!	; 0xfffffdb1
  24:	6465746e 	strbtvs	r7, [r5], #-1134	; 0xfffffb92
  28:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
  2c:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
  30:	2f676e69 	svccs	0x00676e69
  34:	6f747561 	svcvs	0x00747561
  38:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  3c:	61747300 	cmnvs	r4, r0, lsl #6
  40:	70757472 	rsbsvc	r7, r5, r2, ror r4
  44:	61726700 	cmnvs	r2, r0, lsl #14
  48:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  4c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  50:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  54:	616d6d6f 	cmnvs	sp, pc, ror #26
  58:	7400646e 	strvc	r6, [r0], #-1134	; 0xfffffb92
  5c:	006a624f 	rsbeq	r6, sl, pc, asr #4
  60:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  64:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
  68:	69640076 	stmdbvs	r4!, {r1, r2, r4, r5, r6}^
  6c:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
  70:	00797269 	rsbseq	r7, r9, r9, ror #4
  74:	70617267 	rsbvc	r7, r1, r7, ror #4
  78:	5f636968 	svcpl	0x00636968
  7c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  80:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  84:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
  88:	006c6578 	rsbeq	r6, ip, r8, ror r5
  8c:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
  90:	5000746e 	andpl	r7, r0, lr, ror #8
  94:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
  98:	736e7500 	cmnvc	lr, #0, 10
  9c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  a0:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  a4:	73007261 	movwvc	r7, #609	; 0x261
  a8:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  ac:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  b0:	736f7000 	cmnvc	pc, #0
  b4:	6f700078 	svcvs	0x00700078
  b8:	62007973 	andvs	r7, r0, #1884160	; 0x1cc000
  bc:	5f6c6c61 	svcpl	0x006c6c61
  c0:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff2c <ball+0xdffff738>
  c4:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  c8:	61726700 	cmnvs	r2, r0, lsl #14
  cc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  d0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  d4:	73006574 	movwvc	r6, #1396	; 0x574
  d8:	58657a69 	stmdapl	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
  dc:	7a697300 	bvc	1a5cce4 <startup-0x1e5a331c>
  e0:	6d005965 	vstrvs.16	s10, [r0, #-202]	; 0xffffff36	; <UNPREDICTABLE>
  e4:	006e6961 	rsbeq	r6, lr, r1, ror #18
  e8:	616c6564 	cmnvs	ip, r4, ror #10
  ec:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  f0:	006f7263 	rsbeq	r7, pc, r3, ror #4
  f4:	70617267 	rsbvc	r7, r1, r7, ror #4
  f8:	5f636968 	svcpl	0x00636968
  fc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 100:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 104:	6700657a 	smlsdxvs	r0, sl, r5, r6
 108:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 10c:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 110:	5f6c7274 	svcpl	0x006c7274
 114:	5f746962 	svcpl	0x00746962
 118:	61656c63 	cmnvs	r5, r3, ror #24
 11c:	72670072 	rsbvc	r0, r7, #114	; 0x72
 120:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 124:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 128:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 12c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 130:	69007465 	stmdbvs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
 134:	5f74696e 	svcpl	0x0074696e
 138:	00707061 	rsbseq	r7, r0, r1, rrx
 13c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 140:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 144:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 148:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
 14c:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 150:	75007972 	strvc	r7, [r0, #-2418]	; 0xfffff68e
 154:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 158:	7300745f 	movwvc	r7, #1119	; 0x45f
 15c:	63656c65 	cmnvs	r5, #25856	; 0x6500
 160:	6f635f74 	svcvs	0x00635f74
 164:	6f72746e 	svcvs	0x0072746e
 168:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 16c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 170:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 174:	736e3035 	cmnvc	lr, #53	; 0x35
 178:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 17c:	61620063 	cmnvs	r2, r3, rrx
 180:	64006c6c 	strvs	r6, [r0], #-3180	; 0xfffff394
 184:	00776172 	rsbseq	r6, r7, r2, ror r1
 188:	6b73616d 	blvs	1cd8744 <startup-0x1e3278bc>
 18c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 190:	76007865 	strvc	r7, [r0], -r5, ror #16
 194:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 198:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 19c:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; e2 <startup-0x1fffff1e>	; <UNPREDICTABLE>
 1a0:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 1a4:	61726700 	cmnvs	r2, r0, lsl #14
 1a8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1ac:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1b0:	645f6574 	ldrbvs	r6, [pc], #-1396	; 1b8 <startup-0x1ffffe48>
 1b4:	00617461 	rsbeq	r7, r1, r1, ror #8
 1b8:	5f746573 	svcpl	0x00746573
 1bc:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 1c0:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 1c4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 1c8:	61726700 	cmnvs	r2, r0, lsl #14
 1cc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1d0:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1d4:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 1d8:	00796461 	rsbseq	r6, r9, r1, ror #8
 1dc:	20554e47 	subscs	r4, r5, r7, asr #28
 1e0:	20313143 	eorscs	r3, r1, r3, asr #2
 1e4:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
 1e8:	30322031 	eorscc	r2, r2, r1, lsr r0
 1ec:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
 1f0:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
 1f4:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 1f8:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1fc:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 200:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
 204:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 208:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
 20c:	6172622d 	cmnvs	r2, sp, lsr #4
 210:	2068636e 	rsbcs	r6, r8, lr, ror #6
 214:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 218:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 21c:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 220:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
 224:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 228:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 22c:	616d2d20 	cmnvs	sp, r0, lsr #26
 230:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 234:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 238:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 23c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 240:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 244:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 248:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 24c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 250:	00304f2d 	eorseq	r4, r0, sp, lsr #30
 254:	506d756e 	rsbpl	r7, sp, lr, ror #10
 258:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 25c:	72670073 	rsbvc	r0, r7, #115	; 0x73
 260:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 264:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 268:	5f726165 	svcpl	0x00726165
 26c:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 270:	63006e65 	movwvs	r6, #3685	; 0xe65
 274:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 278:	6a626f5f 	bvs	189bffc <startup-0x1e764004>
 27c:	00746365 	rsbseq	r6, r4, r5, ror #6
 280:	616c6564 	cmnvs	ip, r4, ror #10
 284:	30355f79 	eorscc	r5, r5, r9, ror pc
 288:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 28c:	4f454750 	svcmi	0x00454750
 290:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
 294:	72640059 	rsbvc	r0, r4, #89	; 0x59
 298:	6f5f7761 	svcvs	0x005f7761
 29c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2a0:	72670074 	rsbvc	r0, r7, #116	; 0x74
 2a4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2a8:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2ac:	2f006461 	svccs	0x00006461
 2b0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 2b4:	6d6f742f 	cfstrdvs	mvd7, [pc, #-188]!	; 200 <startup-0x1ffffe00>
 2b8:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 2bc:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 2c0:	572f7374 			; <UNDEFINED> instruction: 0x572f7374
 2c4:	2f4b524f 	svccs	0x004b524f
 2c8:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
 2cc:	4f656e69 	svcmi	0x00656e69
 2d0:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 2d4:	50646574 	rsbpl	r6, r4, r4, ror r5
 2d8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 2dc:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
 2e0:	612f676e 			; <UNDEFINED> instruction: 0x612f676e
 2e4:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
 2e8:	2f676e6f 	svccs	0x00676e6f
 2ec:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 2f0:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 2f4:	6f6d0063 	svcvs	0x006d0063
 2f8:	6f5f6576 	svcvs	0x005f6576
 2fc:	63656a62 	cmnvs	r5, #401408	; 0x62000
 300:	70730074 	rsbsvc	r0, r3, r4, ror r0
 304:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 308:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 30c:	00796465 	rsbseq	r6, r9, r5, ror #8
 310:	4a424f50 	bmi	1094058 <startup-0x1ef6bfa8>
 314:	00544345 	subseq	r4, r4, r5, asr #6

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffeb1a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x000000000000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000012 	andeq	r0, r0, r2, lsl r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000066 	andcs	r0, r0, r6, rrx
  64:	0000002c 	andeq	r0, r0, ip, lsr #32
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	100e4101 	andne	r4, lr, r1, lsl #2
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	20000092 	mulcs	r0, r2, r0
  84:	00000022 	andeq	r0, r0, r2, lsr #32
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	100e4101 	andne	r4, lr, r1, lsl #2
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000b4 	strhcs	r0, [r0], -r4
  a4:	0000003c 	andeq	r0, r0, ip, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c4:	00000034 	andeq	r0, r0, r4, lsr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000124 	andcs	r0, r0, r4, lsr #2
  e4:	0000005a 	andeq	r0, r0, sl, asr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	2000017e 	andcs	r0, r0, lr, ror r1
 104:	00000076 	andeq	r0, r0, r6, ror r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001f4 	strdcs	r0, [r0], -r4
 124:	00000094 	muleq	r0, r4, r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	20000288 	andcs	r0, r0, r8, lsl #5
 144:	0000002a 	andeq	r0, r0, sl, lsr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	200002b2 			; <UNDEFINED> instruction: 0x200002b2
 164:	0000007e 	andeq	r0, r0, lr, ror r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000330 	andcs	r0, r0, r0, lsr r3
 184:	00000040 	andeq	r0, r0, r0, asr #32
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	20000370 	andcs	r0, r0, r0, ror r3
 1a4:	00000046 	andeq	r0, r0, r6, asr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
 1c4:	00000058 	andeq	r0, r0, r8, asr r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	100e4101 	andne	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	00000024 	andeq	r0, r0, r4, lsr #32
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	2000040e 	andcs	r0, r0, lr, lsl #8
 1e4:	0000017a 	andeq	r0, r0, sl, ror r1
 1e8:	40100e41 	andsmi	r0, r0, r1, asr #28
 1ec:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 1f0:	02874003 	addeq	r4, r7, #3
 1f4:	41018e40 	tstmi	r1, r0, asr #28
 1f8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 1fc:	00000007 	andeq	r0, r0, r7
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	00000000 	andeq	r0, r0, r0
 208:	20000588 	andcs	r0, r0, r8, lsl #11
 20c:	00000020 	andeq	r0, r0, r0, lsr #32
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	180e4101 	stmdane	lr, {r0, r8, lr}
 21c:	00070d41 	andeq	r0, r7, r1, asr #26
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	00000000 	andeq	r0, r0, r0
 228:	200005a8 	andcs	r0, r0, r8, lsr #11
 22c:	00000062 	andeq	r0, r0, r2, rrx
 230:	40080e41 	andmi	r0, r8, r1, asr #28
 234:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 238:	180e4101 	stmdane	lr, {r0, r8, lr}
 23c:	00070d41 	andeq	r0, r7, r1, asr #26
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	00000000 	andeq	r0, r0, r0
 248:	2000060a 	andcs	r0, r0, sl, lsl #12
 24c:	00000062 	andeq	r0, r0, r2, rrx
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	180e4101 	stmdane	lr, {r0, r8, lr}
 25c:	00070d41 	andeq	r0, r7, r1, asr #26
 260:	0000001c 	andeq	r0, r0, ip, lsl r0
 264:	00000000 	andeq	r0, r0, r0
 268:	2000066c 	andcs	r0, r0, ip, ror #12
 26c:	00000098 	muleq	r0, r8, r0
 270:	40080e41 	andmi	r0, r8, r1, asr #28
 274:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 278:	100e4101 	andne	r4, lr, r1, lsl #2
 27c:	00070d41 	andeq	r0, r7, r1, asr #26
 280:	00000018 	andeq	r0, r0, r8, lsl r0
 284:	00000000 	andeq	r0, r0, r0
 288:	20000704 	andcs	r0, r0, r4, lsl #14
 28c:	0000005c 	andeq	r0, r0, ip, asr r0
 290:	40080e41 	andmi	r0, r8, r1, asr #28
 294:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 298:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	20000760 	andcs	r0, r0, r0, ror #14
 2a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	2000078c 	andcs	r0, r0, ip, lsl #15
 2c4:	00000034 	andeq	r0, r0, r4, lsr r0
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
